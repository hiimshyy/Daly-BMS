
dalyBms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085d4  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012ec  080086e8  080086e8  000096e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099d4  080099d4  0000b1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080099d4  080099d4  0000a9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099dc  080099dc  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099dc  080099dc  0000a9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080099e0  080099e0  0000a9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080099e4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001498  200001d8  08009bbc  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001670  08009bbc  0000b670  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd54  00000000  00000000  0000b201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ba9  00000000  00000000  00018f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  0001bb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a0b  00000000  00000000  0001c810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ac7  00000000  00000000  0001d21b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9e1  00000000  00000000  00036ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d0b7  00000000  00000000  000466c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d377a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045e4  00000000  00000000  000d37c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000d7da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	080086cc 	.word	0x080086cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	080086cc 	.word	0x080086cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2uiz>:
 8001030:	0042      	lsls	r2, r0, #1
 8001032:	d20e      	bcs.n	8001052 <__aeabi_f2uiz+0x22>
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001038:	d30b      	bcc.n	8001052 <__aeabi_f2uiz+0x22>
 800103a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d409      	bmi.n	8001058 <__aeabi_f2uiz+0x28>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800104c:	fa23 f002 	lsr.w	r0, r3, r2
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr
 8001058:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800105c:	d101      	bne.n	8001062 <__aeabi_f2uiz+0x32>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	d102      	bne.n	8001068 <__aeabi_f2uiz+0x38>
 8001062:	f04f 30ff 	mov.w	r0, #4294967295
 8001066:	4770      	bx	lr
 8001068:	f04f 0000 	mov.w	r0, #0
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <DalyBMS_Request>:

DalyBMS_Data bms_data;


bool DalyBMS_Request(DalyBMS_Command command)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
	// Prepare the transmit buffer
    memset(_tx_buffer, 0x00, FRAME_SIZE);
 800107a:	220d      	movs	r2, #13
 800107c:	2100      	movs	r1, #0
 800107e:	4825      	ldr	r0, [pc, #148]	@ (8001114 <DalyBMS_Request+0xa4>)
 8001080:	f005 fa4e 	bl	8006520 <memset>

    uint8_t txChecksum = 0x00;    // transmit checksum buffer
 8001084:	2300      	movs	r3, #0
 8001086:	75fb      	strb	r3, [r7, #23]
    // Frame structure: [START_BYTE, HOST_ADDRESS, COMMAND, FRAME_LENGTH, DATA..., CHECKSUM]
    _tx_buffer[0] = START_BYTE;
 8001088:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <DalyBMS_Request+0xa4>)
 800108a:	22a5      	movs	r2, #165	@ 0xa5
 800108c:	701a      	strb	r2, [r3, #0]
    _tx_buffer[1] = HOST_ADDRESS;
 800108e:	4b21      	ldr	r3, [pc, #132]	@ (8001114 <DalyBMS_Request+0xa4>)
 8001090:	2240      	movs	r2, #64	@ 0x40
 8001092:	705a      	strb	r2, [r3, #1]
    _tx_buffer[2] = command;
 8001094:	4a1f      	ldr	r2, [pc, #124]	@ (8001114 <DalyBMS_Request+0xa4>)
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	7093      	strb	r3, [r2, #2]
    _tx_buffer[3] = FRAME_LENGTH;
 800109a:	4b1e      	ldr	r3, [pc, #120]	@ (8001114 <DalyBMS_Request+0xa4>)
 800109c:	2208      	movs	r2, #8
 800109e:	70da      	strb	r2, [r3, #3]

    // Add checksum for the first 4 bytes
    for (int i = 0; i < 11; i++) txChecksum += _tx_buffer[i];
 80010a0:	2300      	movs	r3, #0
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	e009      	b.n	80010ba <DalyBMS_Request+0x4a>
 80010a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001114 <DalyBMS_Request+0xa4>)
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4413      	add	r3, r2
 80010ac:	781a      	ldrb	r2, [r3, #0]
 80010ae:	7dfb      	ldrb	r3, [r7, #23]
 80010b0:	4413      	add	r3, r2
 80010b2:	75fb      	strb	r3, [r7, #23]
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	3301      	adds	r3, #1
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	2b0a      	cmp	r3, #10
 80010be:	ddf2      	ble.n	80010a6 <DalyBMS_Request+0x36>
    _tx_buffer[12] = (uint8_t)(txChecksum & 0xFF); // checksum
 80010c0:	4a14      	ldr	r2, [pc, #80]	@ (8001114 <DalyBMS_Request+0xa4>)
 80010c2:	7dfb      	ldrb	r3, [r7, #23]
 80010c4:	7313      	strb	r3, [r2, #12]

    // Debug start
    Debug_Printf("BMS Send request:");
 80010c6:	4814      	ldr	r0, [pc, #80]	@ (8001118 <DalyBMS_Request+0xa8>)
 80010c8:	f000 fe7a 	bl	8001dc0 <Debug_Printf>
    for (int i = 0; i < FRAME_SIZE; i++)
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	e00a      	b.n	80010e8 <DalyBMS_Request+0x78>
	{
		Debug_Printf(" %02X", _tx_buffer[i]);
 80010d2:	4a10      	ldr	r2, [pc, #64]	@ (8001114 <DalyBMS_Request+0xa4>)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4413      	add	r3, r2
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	4619      	mov	r1, r3
 80010dc:	480f      	ldr	r0, [pc, #60]	@ (800111c <DalyBMS_Request+0xac>)
 80010de:	f000 fe6f 	bl	8001dc0 <Debug_Printf>
    for (int i = 0; i < FRAME_SIZE; i++)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	3301      	adds	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2b0c      	cmp	r3, #12
 80010ec:	ddf1      	ble.n	80010d2 <DalyBMS_Request+0x62>
	}
    Debug_Printf("\n");
 80010ee:	480c      	ldr	r0, [pc, #48]	@ (8001120 <DalyBMS_Request+0xb0>)
 80010f0:	f000 fe66 	bl	8001dc0 <Debug_Printf>
    // Debug end

    return (HAL_UART_Transmit(&huart1, _tx_buffer, FRAME_SIZE, 100) == HAL_OK);
 80010f4:	2364      	movs	r3, #100	@ 0x64
 80010f6:	220d      	movs	r2, #13
 80010f8:	4906      	ldr	r1, [pc, #24]	@ (8001114 <DalyBMS_Request+0xa4>)
 80010fa:	480a      	ldr	r0, [pc, #40]	@ (8001124 <DalyBMS_Request+0xb4>)
 80010fc:	f002 fc00 	bl	8003900 <HAL_UART_Transmit>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	bf0c      	ite	eq
 8001106:	2301      	moveq	r3, #1
 8001108:	2300      	movne	r3, #0
 800110a:	b2db      	uxtb	r3, r3
}
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200001f8 	.word	0x200001f8
 8001118:	080086e8 	.word	0x080086e8
 800111c:	080086fc 	.word	0x080086fc
 8001120:	08008704 	.word	0x08008704
 8001124:	200006e8 	.word	0x200006e8

08001128 <DalyBMS_Recive>:

bool DalyBMS_Recive(uint8_t _frame_amount)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
	// Clear the buffer before receiving new data
//	memset(_rx_buffer, 0x00, FRAME_SIZE);
	memset(_rx_frame_buffer, 0x00, sizeof(_rx_frame_buffer));
 8001132:	229c      	movs	r2, #156	@ 0x9c
 8001134:	2100      	movs	r1, #0
 8001136:	4859      	ldr	r0, [pc, #356]	@ (800129c <DalyBMS_Recive+0x174>)
 8001138:	f005 f9f2 	bl	8006520 <memset>
	memset(_frame_buff, 0x00, sizeof(_frame_buff));
 800113c:	229c      	movs	r2, #156	@ 0x9c
 800113e:	2100      	movs	r1, #0
 8001140:	4857      	ldr	r0, [pc, #348]	@ (80012a0 <DalyBMS_Recive+0x178>)
 8001142:	f005 f9ed 	bl	8006520 <memset>

	size_t _total_bytes = _frame_amount * FRAME_SIZE;
 8001146:	79fa      	ldrb	r2, [r7, #7]
 8001148:	4613      	mov	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]
	// Receive data into the buffer
	if (HAL_UART_Receive(&huart1, _rx_frame_buffer, _total_bytes, 200) != HAL_OK)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	b29a      	uxth	r2, r3
 8001158:	23c8      	movs	r3, #200	@ 0xc8
 800115a:	4950      	ldr	r1, [pc, #320]	@ (800129c <DalyBMS_Recive+0x174>)
 800115c:	4851      	ldr	r0, [pc, #324]	@ (80012a4 <DalyBMS_Recive+0x17c>)
 800115e:	f002 fc5a 	bl	8003a16 <HAL_UART_Receive>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d004      	beq.n	8001172 <DalyBMS_Recive+0x4a>
	{
		Debug_Printf("BMS receive error\n");
 8001168:	484f      	ldr	r0, [pc, #316]	@ (80012a8 <DalyBMS_Recive+0x180>)
 800116a:	f000 fe29 	bl	8001dc0 <Debug_Printf>
		return false;  // Receive error
 800116e:	2300      	movs	r3, #0
 8001170:	e090      	b.n	8001294 <DalyBMS_Recive+0x16c>
	}
	else
	{
		Debug_Printf("Data received:");
 8001172:	484e      	ldr	r0, [pc, #312]	@ (80012ac <DalyBMS_Recive+0x184>)
 8001174:	f000 fe24 	bl	8001dc0 <Debug_Printf>
		for (size_t i = 0; i < _total_bytes; i++)
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	e01b      	b.n	80011b6 <DalyBMS_Recive+0x8e>
		{
			Debug_Printf(" %02X", _rx_frame_buffer[i]);
 800117e:	4a47      	ldr	r2, [pc, #284]	@ (800129c <DalyBMS_Recive+0x174>)
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	4413      	add	r3, r2
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	4619      	mov	r1, r3
 8001188:	4849      	ldr	r0, [pc, #292]	@ (80012b0 <DalyBMS_Recive+0x188>)
 800118a:	f000 fe19 	bl	8001dc0 <Debug_Printf>
			if ((i + 1) % FRAME_SIZE == 0) Debug_Printf("\n");
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	1c59      	adds	r1, r3, #1
 8001192:	4b48      	ldr	r3, [pc, #288]	@ (80012b4 <DalyBMS_Recive+0x18c>)
 8001194:	fba3 2301 	umull	r2, r3, r3, r1
 8001198:	089a      	lsrs	r2, r3, #2
 800119a:	4613      	mov	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	1aca      	subs	r2, r1, r3
 80011a6:	2a00      	cmp	r2, #0
 80011a8:	d102      	bne.n	80011b0 <DalyBMS_Recive+0x88>
 80011aa:	4843      	ldr	r0, [pc, #268]	@ (80012b8 <DalyBMS_Recive+0x190>)
 80011ac:	f000 fe08 	bl	8001dc0 <Debug_Printf>
		for (size_t i = 0; i < _total_bytes; i++)
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	3301      	adds	r3, #1
 80011b4:	61fb      	str	r3, [r7, #28]
 80011b6:	69fa      	ldr	r2, [r7, #28]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d3df      	bcc.n	800117e <DalyBMS_Recive+0x56>
		}
	}

	for (size_t i = 0; i < _frame_amount; i++)
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
 80011c2:	e062      	b.n	800128a <DalyBMS_Recive+0x162>
	{
		memcpy(_frame_buff[i], &_rx_frame_buffer[i * FRAME_SIZE], FRAME_SIZE);
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4613      	mov	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	4a33      	ldr	r2, [pc, #204]	@ (80012a0 <DalyBMS_Recive+0x178>)
 80011d2:	1898      	adds	r0, r3, r2
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	4a2e      	ldr	r2, [pc, #184]	@ (800129c <DalyBMS_Recive+0x174>)
 80011e2:	4413      	add	r3, r2
 80011e4:	220d      	movs	r2, #13
 80011e6:	4619      	mov	r1, r3
 80011e8:	f005 fa27 	bl	800663a <memcpy>

		uint8_t _checksum = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < FRAME_SIZE - 1; j++)	_checksum += _frame_buff[i][j];
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	e010      	b.n	8001218 <DalyBMS_Recive+0xf0>
 80011f6:	492a      	ldr	r1, [pc, #168]	@ (80012a0 <DalyBMS_Recive+0x178>)
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4613      	mov	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	18ca      	adds	r2, r1, r3
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	4413      	add	r3, r2
 800120a:	781a      	ldrb	r2, [r3, #0]
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	4413      	add	r3, r2
 8001210:	75fb      	strb	r3, [r7, #23]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	3301      	adds	r3, #1
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	2b0b      	cmp	r3, #11
 800121c:	d9eb      	bls.n	80011f6 <DalyBMS_Recive+0xce>

		if (_checksum != _frame_buff[i][FRAME_SIZE - 1])
 800121e:	4920      	ldr	r1, [pc, #128]	@ (80012a0 <DalyBMS_Recive+0x178>)
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4613      	mov	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4413      	add	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	440b      	add	r3, r1
 800122e:	330c      	adds	r3, #12
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	7dfa      	ldrb	r2, [r7, #23]
 8001234:	429a      	cmp	r2, r3
 8001236:	d014      	beq.n	8001262 <DalyBMS_Recive+0x13a>
		{
			Debug_Printf("BMS checksum error in frame %d\n", i);
 8001238:	69b9      	ldr	r1, [r7, #24]
 800123a:	4820      	ldr	r0, [pc, #128]	@ (80012bc <DalyBMS_Recive+0x194>)
 800123c:	f000 fdc0 	bl	8001dc0 <Debug_Printf>
			Debug_Printf("Expected: %02X, Received: %02X\n", _checksum, _frame_buff[i][FRAME_SIZE - 1]);
 8001240:	7df9      	ldrb	r1, [r7, #23]
 8001242:	4817      	ldr	r0, [pc, #92]	@ (80012a0 <DalyBMS_Recive+0x178>)
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	4403      	add	r3, r0
 8001252:	330c      	adds	r3, #12
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	4819      	ldr	r0, [pc, #100]	@ (80012c0 <DalyBMS_Recive+0x198>)
 800125a:	f000 fdb1 	bl	8001dc0 <Debug_Printf>
			return false;  // Checksum error
 800125e:	2300      	movs	r3, #0
 8001260:	e018      	b.n	8001294 <DalyBMS_Recive+0x16c>
		}

		if (_checksum == 0x00 && _frame_buff[i][0] == 0x20)	Debug_Printf("BMS sleep or invalid frame\n");
 8001262:	7dfb      	ldrb	r3, [r7, #23]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d10d      	bne.n	8001284 <DalyBMS_Recive+0x15c>
 8001268:	490d      	ldr	r1, [pc, #52]	@ (80012a0 <DalyBMS_Recive+0x178>)
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4613      	mov	r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	4413      	add	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	440b      	add	r3, r1
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b20      	cmp	r3, #32
 800127c:	d102      	bne.n	8001284 <DalyBMS_Recive+0x15c>
 800127e:	4811      	ldr	r0, [pc, #68]	@ (80012c4 <DalyBMS_Recive+0x19c>)
 8001280:	f000 fd9e 	bl	8001dc0 <Debug_Printf>
	for (size_t i = 0; i < _frame_amount; i++)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	3301      	adds	r3, #1
 8001288:	61bb      	str	r3, [r7, #24]
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	429a      	cmp	r2, r3
 8001290:	d398      	bcc.n	80011c4 <DalyBMS_Recive+0x9c>
	}

	return true;  // Invalid frame or receive error
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	3720      	adds	r7, #32
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200002a4 	.word	0x200002a4
 80012a0:	20000208 	.word	0x20000208
 80012a4:	200006e8 	.word	0x200006e8
 80012a8:	08008708 	.word	0x08008708
 80012ac:	0800871c 	.word	0x0800871c
 80012b0:	080086fc 	.word	0x080086fc
 80012b4:	4ec4ec4f 	.word	0x4ec4ec4f
 80012b8:	08008704 	.word	0x08008704
 80012bc:	0800872c 	.word	0x0800872c
 80012c0:	0800874c 	.word	0x0800874c
 80012c4:	0800876c 	.word	0x0800876c

080012c8 <DalyBMS_Get_Pack_Data>:

bool DalyBMS_Get_Pack_Data()
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	if (DalyBMS_Request(VOUT_IOUT_SOC))
 80012cc:	2090      	movs	r0, #144	@ 0x90
 80012ce:	f7ff fecf 	bl	8001070 <DalyBMS_Request>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f000 8081 	beq.w	80013dc <DalyBMS_Get_Pack_Data+0x114>
	{
		if (DalyBMS_Recive(1))
 80012da:	2001      	movs	r0, #1
 80012dc:	f7ff ff24 	bl	8001128 <DalyBMS_Recive>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d075      	beq.n	80013d2 <DalyBMS_Get_Pack_Data+0x10a>
		{
			if((((float)(((_frame_buff[0][8] << 8) | _frame_buff[0][9]) - 30000) / 10.0f) == -3000.f))
 80012e6:	4b40      	ldr	r3, [pc, #256]	@ (80013e8 <DalyBMS_Get_Pack_Data+0x120>)
 80012e8:	7a1b      	ldrb	r3, [r3, #8]
 80012ea:	021b      	lsls	r3, r3, #8
 80012ec:	4a3e      	ldr	r2, [pc, #248]	@ (80013e8 <DalyBMS_Get_Pack_Data+0x120>)
 80012ee:	7a52      	ldrb	r2, [r2, #9]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	f5a3 43ea 	sub.w	r3, r3, #29952	@ 0x7500
 80012f6:	3b30      	subs	r3, #48	@ 0x30
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fc7f 	bl	8000bfc <__aeabi_i2f>
 80012fe:	4603      	mov	r3, r0
 8001300:	493a      	ldr	r1, [pc, #232]	@ (80013ec <DalyBMS_Get_Pack_Data+0x124>)
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fd82 	bl	8000e0c <__aeabi_fdiv>
 8001308:	4603      	mov	r3, r0
 800130a:	4939      	ldr	r1, [pc, #228]	@ (80013f0 <DalyBMS_Get_Pack_Data+0x128>)
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fe5d 	bl	8000fcc <__aeabi_fcmpeq>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d004      	beq.n	8001322 <DalyBMS_Get_Pack_Data+0x5a>
			{
				Debug_Printf("Current out of range, retrying...\n");
 8001318:	4836      	ldr	r0, [pc, #216]	@ (80013f4 <DalyBMS_Get_Pack_Data+0x12c>)
 800131a:	f000 fd51 	bl	8001dc0 <Debug_Printf>
				return false;  // Current out of range
 800131e:	2300      	movs	r3, #0
 8001320:	e060      	b.n	80013e4 <DalyBMS_Get_Pack_Data+0x11c>
			}
			else if((((float)(((_frame_buff[0][10] << 8) | _frame_buff[0][11])) / 10.0f) > 100.f))
 8001322:	4b31      	ldr	r3, [pc, #196]	@ (80013e8 <DalyBMS_Get_Pack_Data+0x120>)
 8001324:	7a9b      	ldrb	r3, [r3, #10]
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	4a2f      	ldr	r2, [pc, #188]	@ (80013e8 <DalyBMS_Get_Pack_Data+0x120>)
 800132a:	7ad2      	ldrb	r2, [r2, #11]
 800132c:	4313      	orrs	r3, r2
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fc64 	bl	8000bfc <__aeabi_i2f>
 8001334:	4603      	mov	r3, r0
 8001336:	492d      	ldr	r1, [pc, #180]	@ (80013ec <DalyBMS_Get_Pack_Data+0x124>)
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fd67 	bl	8000e0c <__aeabi_fdiv>
 800133e:	4603      	mov	r3, r0
 8001340:	492d      	ldr	r1, [pc, #180]	@ (80013f8 <DalyBMS_Get_Pack_Data+0x130>)
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fe6a 	bl	800101c <__aeabi_fcmpgt>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d004      	beq.n	8001358 <DalyBMS_Get_Pack_Data+0x90>
			{
				Debug_Printf("SOC out of range, retrying...\n");
 800134e:	482b      	ldr	r0, [pc, #172]	@ (80013fc <DalyBMS_Get_Pack_Data+0x134>)
 8001350:	f000 fd36 	bl	8001dc0 <Debug_Printf>
				return false;  // SOC out of range
 8001354:	2300      	movs	r3, #0
 8001356:	e045      	b.n	80013e4 <DalyBMS_Get_Pack_Data+0x11c>
			}
			else
			{
				bms_data.voltage_v = ((float)((_frame_buff[0][4] << 8) | _frame_buff[0][5])) / 10.0f;
 8001358:	4b23      	ldr	r3, [pc, #140]	@ (80013e8 <DalyBMS_Get_Pack_Data+0x120>)
 800135a:	791b      	ldrb	r3, [r3, #4]
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	4a22      	ldr	r2, [pc, #136]	@ (80013e8 <DalyBMS_Get_Pack_Data+0x120>)
 8001360:	7952      	ldrb	r2, [r2, #5]
 8001362:	4313      	orrs	r3, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fc49 	bl	8000bfc <__aeabi_i2f>
 800136a:	4603      	mov	r3, r0
 800136c:	491f      	ldr	r1, [pc, #124]	@ (80013ec <DalyBMS_Get_Pack_Data+0x124>)
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fd4c 	bl	8000e0c <__aeabi_fdiv>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	4b21      	ldr	r3, [pc, #132]	@ (8001400 <DalyBMS_Get_Pack_Data+0x138>)
 800137a:	621a      	str	r2, [r3, #32]
				bms_data.current_ma = ((float)((_frame_buff[0][8] << 8) | _frame_buff[0][9]) - 30000) / 10.0f;
 800137c:	4b1a      	ldr	r3, [pc, #104]	@ (80013e8 <DalyBMS_Get_Pack_Data+0x120>)
 800137e:	7a1b      	ldrb	r3, [r3, #8]
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	4a19      	ldr	r2, [pc, #100]	@ (80013e8 <DalyBMS_Get_Pack_Data+0x120>)
 8001384:	7a52      	ldrb	r2, [r2, #9]
 8001386:	4313      	orrs	r3, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fc37 	bl	8000bfc <__aeabi_i2f>
 800138e:	4603      	mov	r3, r0
 8001390:	491c      	ldr	r1, [pc, #112]	@ (8001404 <DalyBMS_Get_Pack_Data+0x13c>)
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fb7c 	bl	8000a90 <__aeabi_fsub>
 8001398:	4603      	mov	r3, r0
 800139a:	4914      	ldr	r1, [pc, #80]	@ (80013ec <DalyBMS_Get_Pack_Data+0x124>)
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fd35 	bl	8000e0c <__aeabi_fdiv>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b16      	ldr	r3, [pc, #88]	@ (8001400 <DalyBMS_Get_Pack_Data+0x138>)
 80013a8:	625a      	str	r2, [r3, #36]	@ 0x24
				bms_data.soc_percent = ((float)((_frame_buff[0][10] << 8) | _frame_buff[0][11]) / 10.0f);
 80013aa:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <DalyBMS_Get_Pack_Data+0x120>)
 80013ac:	7a9b      	ldrb	r3, [r3, #10]
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	4a0d      	ldr	r2, [pc, #52]	@ (80013e8 <DalyBMS_Get_Pack_Data+0x120>)
 80013b2:	7ad2      	ldrb	r2, [r2, #11]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fc20 	bl	8000bfc <__aeabi_i2f>
 80013bc:	4603      	mov	r3, r0
 80013be:	490b      	ldr	r1, [pc, #44]	@ (80013ec <DalyBMS_Get_Pack_Data+0x124>)
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fd23 	bl	8000e0c <__aeabi_fdiv>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001400 <DalyBMS_Get_Pack_Data+0x138>)
 80013cc:	629a      	str	r2, [r3, #40]	@ 0x28
	else
	{
		Debug_Printf("BMS request pack data failed\n");
		return false;  // Request failed
	}
	return true;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e008      	b.n	80013e4 <DalyBMS_Get_Pack_Data+0x11c>
			Debug_Printf("BMS receive pack data failed\n");
 80013d2:	480d      	ldr	r0, [pc, #52]	@ (8001408 <DalyBMS_Get_Pack_Data+0x140>)
 80013d4:	f000 fcf4 	bl	8001dc0 <Debug_Printf>
			return false;  // Receive error
 80013d8:	2300      	movs	r3, #0
 80013da:	e003      	b.n	80013e4 <DalyBMS_Get_Pack_Data+0x11c>
		Debug_Printf("BMS request pack data failed\n");
 80013dc:	480b      	ldr	r0, [pc, #44]	@ (800140c <DalyBMS_Get_Pack_Data+0x144>)
 80013de:	f000 fcef 	bl	8001dc0 <Debug_Printf>
		return false;  // Request failed
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000208 	.word	0x20000208
 80013ec:	41200000 	.word	0x41200000
 80013f0:	c53b8000 	.word	0xc53b8000
 80013f4:	08008788 	.word	0x08008788
 80013f8:	42c80000 	.word	0x42c80000
 80013fc:	080087ac 	.word	0x080087ac
 8001400:	20000344 	.word	0x20000344
 8001404:	46ea6000 	.word	0x46ea6000
 8001408:	080087cc 	.word	0x080087cc
 800140c:	080087ec 	.word	0x080087ec

08001410 <DalyBMS_Get_Min_Max_Cell_Voltage>:

bool DalyBMS_Get_Min_Max_Cell_Voltage()
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	if(DalyBMS_Request(MIN_MAX_CELL_VOLTAGE))
 8001414:	2091      	movs	r0, #145	@ 0x91
 8001416:	f7ff fe2b 	bl	8001070 <DalyBMS_Request>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d04e      	beq.n	80014be <DalyBMS_Get_Min_Max_Cell_Voltage+0xae>
	{
		if(DalyBMS_Recive(1))
 8001420:	2001      	movs	r0, #1
 8001422:	f7ff fe81 	bl	8001128 <DalyBMS_Recive>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d043      	beq.n	80014b4 <DalyBMS_Get_Min_Max_Cell_Voltage+0xa4>
		{
			Debug_Printf("BMS received min/max cell voltage successfully\n");
 800142c:	4827      	ldr	r0, [pc, #156]	@ (80014cc <DalyBMS_Get_Min_Max_Cell_Voltage+0xbc>)
 800142e:	f000 fcc7 	bl	8001dc0 <Debug_Printf>
			bms_data.max_cell_v = ((float)((_frame_buff[0][4] << 8) | _frame_buff[0][5])) / 1000.0f;
 8001432:	4b27      	ldr	r3, [pc, #156]	@ (80014d0 <DalyBMS_Get_Min_Max_Cell_Voltage+0xc0>)
 8001434:	791b      	ldrb	r3, [r3, #4]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	4a25      	ldr	r2, [pc, #148]	@ (80014d0 <DalyBMS_Get_Min_Max_Cell_Voltage+0xc0>)
 800143a:	7952      	ldrb	r2, [r2, #5]
 800143c:	4313      	orrs	r3, r2
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fbdc 	bl	8000bfc <__aeabi_i2f>
 8001444:	4603      	mov	r3, r0
 8001446:	4923      	ldr	r1, [pc, #140]	@ (80014d4 <DalyBMS_Get_Min_Max_Cell_Voltage+0xc4>)
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fcdf 	bl	8000e0c <__aeabi_fdiv>
 800144e:	4603      	mov	r3, r0
 8001450:	461a      	mov	r2, r3
 8001452:	4b21      	ldr	r3, [pc, #132]	@ (80014d8 <DalyBMS_Get_Min_Max_Cell_Voltage+0xc8>)
 8001454:	62da      	str	r2, [r3, #44]	@ 0x2c
			bms_data.max_cell_voltage_num = _frame_buff[0][6];
 8001456:	4b1e      	ldr	r3, [pc, #120]	@ (80014d0 <DalyBMS_Get_Min_Max_Cell_Voltage+0xc0>)
 8001458:	799a      	ldrb	r2, [r3, #6]
 800145a:	4b1f      	ldr	r3, [pc, #124]	@ (80014d8 <DalyBMS_Get_Min_Max_Cell_Voltage+0xc8>)
 800145c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			bms_data.min_cell_v = ((float)((_frame_buff[0][7] << 8) | _frame_buff[0][8])) / 1000.0f;
 8001460:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <DalyBMS_Get_Min_Max_Cell_Voltage+0xc0>)
 8001462:	79db      	ldrb	r3, [r3, #7]
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	4a1a      	ldr	r2, [pc, #104]	@ (80014d0 <DalyBMS_Get_Min_Max_Cell_Voltage+0xc0>)
 8001468:	7a12      	ldrb	r2, [r2, #8]
 800146a:	4313      	orrs	r3, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fbc5 	bl	8000bfc <__aeabi_i2f>
 8001472:	4603      	mov	r3, r0
 8001474:	4917      	ldr	r1, [pc, #92]	@ (80014d4 <DalyBMS_Get_Min_Max_Cell_Voltage+0xc4>)
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fcc8 	bl	8000e0c <__aeabi_fdiv>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <DalyBMS_Get_Min_Max_Cell_Voltage+0xc8>)
 8001482:	631a      	str	r2, [r3, #48]	@ 0x30
			bms_data.min_cell_voltage_num = _frame_buff[0][9];
 8001484:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <DalyBMS_Get_Min_Max_Cell_Voltage+0xc0>)
 8001486:	7a5a      	ldrb	r2, [r3, #9]
 8001488:	4b13      	ldr	r3, [pc, #76]	@ (80014d8 <DalyBMS_Get_Min_Max_Cell_Voltage+0xc8>)
 800148a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
			bms_data.cell_diff = bms_data.max_cell_v - bms_data.min_cell_v;
 800148e:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <DalyBMS_Get_Min_Max_Cell_Voltage+0xc8>)
 8001490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001492:	4a11      	ldr	r2, [pc, #68]	@ (80014d8 <DalyBMS_Get_Min_Max_Cell_Voltage+0xc8>)
 8001494:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff faf9 	bl	8000a90 <__aeabi_fsub>
 800149e:	4603      	mov	r3, r0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fdc5 	bl	8001030 <__aeabi_f2uiz>
 80014a6:	4603      	mov	r3, r0
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <DalyBMS_Get_Min_Max_Cell_Voltage+0xc8>)
 80014ac:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	{
		Debug_Printf("BMS request min/max cell voltage failed\n");
		return false;  // Request failed
	}

	return true;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e008      	b.n	80014c6 <DalyBMS_Get_Min_Max_Cell_Voltage+0xb6>
			Debug_Printf("BMS receive min/max cell voltage failed\n");
 80014b4:	4809      	ldr	r0, [pc, #36]	@ (80014dc <DalyBMS_Get_Min_Max_Cell_Voltage+0xcc>)
 80014b6:	f000 fc83 	bl	8001dc0 <Debug_Printf>
			return false;  // Receive error
 80014ba:	2300      	movs	r3, #0
 80014bc:	e003      	b.n	80014c6 <DalyBMS_Get_Min_Max_Cell_Voltage+0xb6>
		Debug_Printf("BMS request min/max cell voltage failed\n");
 80014be:	4808      	ldr	r0, [pc, #32]	@ (80014e0 <DalyBMS_Get_Min_Max_Cell_Voltage+0xd0>)
 80014c0:	f000 fc7e 	bl	8001dc0 <Debug_Printf>
		return false;  // Request failed
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	0800880c 	.word	0x0800880c
 80014d0:	20000208 	.word	0x20000208
 80014d4:	447a0000 	.word	0x447a0000
 80014d8:	20000344 	.word	0x20000344
 80014dc:	0800883c 	.word	0x0800883c
 80014e0:	08008868 	.word	0x08008868

080014e4 <DalyBMS_Get_Pack_Temperature>:

bool DalyBMS_Get_Pack_Temperature()
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	if (DalyBMS_Request(MIN_MAX_TEMPERATURE))
 80014e8:	2092      	movs	r0, #146	@ 0x92
 80014ea:	f7ff fdc1 	bl	8001070 <DalyBMS_Request>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d020      	beq.n	8001536 <DalyBMS_Get_Pack_Temperature+0x52>
	{
		if (DalyBMS_Recive(1))
 80014f4:	2001      	movs	r0, #1
 80014f6:	f7ff fe17 	bl	8001128 <DalyBMS_Recive>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d015      	beq.n	800152c <DalyBMS_Get_Pack_Temperature+0x48>
		{
			Debug_Printf("BMS received min/max temperature successfully\n");
 8001500:	4810      	ldr	r0, [pc, #64]	@ (8001544 <DalyBMS_Get_Pack_Temperature+0x60>)
 8001502:	f000 fc5d 	bl	8001dc0 <Debug_Printf>
//			bms_data.max_temperature_c = (_frame_buff[0][4] - 40);
//			bms_data.min_temperature_c = (_frame_buff[0][6] - 40);
			bms_data.temperature_average = ((_frame_buff[0][4] - 40) + (_frame_buff[0][6] - 40)) / 2;
 8001506:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <DalyBMS_Get_Pack_Temperature+0x64>)
 8001508:	791b      	ldrb	r3, [r3, #4]
 800150a:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 800150e:	4b0e      	ldr	r3, [pc, #56]	@ (8001548 <DalyBMS_Get_Pack_Temperature+0x64>)
 8001510:	799b      	ldrb	r3, [r3, #6]
 8001512:	3b28      	subs	r3, #40	@ 0x28
 8001514:	4413      	add	r3, r2
 8001516:	0fda      	lsrs	r2, r3, #31
 8001518:	4413      	add	r3, r2
 800151a:	105b      	asrs	r3, r3, #1
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fb6d 	bl	8000bfc <__aeabi_i2f>
 8001522:	4603      	mov	r3, r0
 8001524:	4a09      	ldr	r2, [pc, #36]	@ (800154c <DalyBMS_Get_Pack_Temperature+0x68>)
 8001526:	6393      	str	r3, [r2, #56]	@ 0x38
	else
	{
		Debug_Printf("BMS request min/max temperature failed\n");
		return false;  // Request failed
	}
	return true;
 8001528:	2301      	movs	r3, #1
 800152a:	e008      	b.n	800153e <DalyBMS_Get_Pack_Temperature+0x5a>
			Debug_Printf("BMS receive min/max temperature failed\n");
 800152c:	4808      	ldr	r0, [pc, #32]	@ (8001550 <DalyBMS_Get_Pack_Temperature+0x6c>)
 800152e:	f000 fc47 	bl	8001dc0 <Debug_Printf>
			return false;  // Receive error
 8001532:	2300      	movs	r3, #0
 8001534:	e003      	b.n	800153e <DalyBMS_Get_Pack_Temperature+0x5a>
		Debug_Printf("BMS request min/max temperature failed\n");
 8001536:	4807      	ldr	r0, [pc, #28]	@ (8001554 <DalyBMS_Get_Pack_Temperature+0x70>)
 8001538:	f000 fc42 	bl	8001dc0 <Debug_Printf>
		return false;  // Request failed
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	08008894 	.word	0x08008894
 8001548:	20000208 	.word	0x20000208
 800154c:	20000344 	.word	0x20000344
 8001550:	080088c4 	.word	0x080088c4
 8001554:	080088ec 	.word	0x080088ec

08001558 <DalyBMS_Get_Charge_Discharge_Status>:

bool DalyBMS_Get_Charge_Discharge_Status()
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
	if (DalyBMS_Request(DISCHARGE_CHARGE_MOS_STATUS))
 800155e:	2093      	movs	r0, #147	@ 0x93
 8001560:	f7ff fd86 	bl	8001070 <DalyBMS_Request>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d07e      	beq.n	8001668 <DalyBMS_Get_Charge_Discharge_Status+0x110>
	{
		if (DalyBMS_Recive(1))
 800156a:	2001      	movs	r0, #1
 800156c:	f7ff fddc 	bl	8001128 <DalyBMS_Recive>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d073      	beq.n	800165e <DalyBMS_Get_Charge_Discharge_Status+0x106>
		{
			Debug_Printf("BMS received charge/discharge MOS status successfully\n");
 8001576:	4840      	ldr	r0, [pc, #256]	@ (8001678 <DalyBMS_Get_Charge_Discharge_Status+0x120>)
 8001578:	f000 fc22 	bl	8001dc0 <Debug_Printf>
			switch (_frame_buff[0][4])
 800157c:	4b3f      	ldr	r3, [pc, #252]	@ (800167c <DalyBMS_Get_Charge_Discharge_Status+0x124>)
 800157e:	791b      	ldrb	r3, [r3, #4]
 8001580:	2b02      	cmp	r3, #2
 8001582:	d010      	beq.n	80015a6 <DalyBMS_Get_Charge_Discharge_Status+0x4e>
 8001584:	2b02      	cmp	r3, #2
 8001586:	dc13      	bgt.n	80015b0 <DalyBMS_Get_Charge_Discharge_Status+0x58>
 8001588:	2b00      	cmp	r3, #0
 800158a:	d002      	beq.n	8001592 <DalyBMS_Get_Charge_Discharge_Status+0x3a>
 800158c:	2b01      	cmp	r3, #1
 800158e:	d005      	beq.n	800159c <DalyBMS_Get_Charge_Discharge_Status+0x44>
 8001590:	e00e      	b.n	80015b0 <DalyBMS_Get_Charge_Discharge_Status+0x58>
			{
				case 0:
					bms_data.charge_discharge_status = STATIONARY;
 8001592:	4b3b      	ldr	r3, [pc, #236]	@ (8001680 <DalyBMS_Get_Charge_Discharge_Status+0x128>)
 8001594:	2200      	movs	r2, #0
 8001596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					break;
 800159a:	e009      	b.n	80015b0 <DalyBMS_Get_Charge_Discharge_Status+0x58>
				case 1:
					bms_data.charge_discharge_status = CHARGE;
 800159c:	4b38      	ldr	r3, [pc, #224]	@ (8001680 <DalyBMS_Get_Charge_Discharge_Status+0x128>)
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					break;
 80015a4:	e004      	b.n	80015b0 <DalyBMS_Get_Charge_Discharge_Status+0x58>
				case 2:
					bms_data.charge_discharge_status = DISCHARGE;
 80015a6:	4b36      	ldr	r3, [pc, #216]	@ (8001680 <DalyBMS_Get_Charge_Discharge_Status+0x128>)
 80015a8:	2202      	movs	r2, #2
 80015aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					break;
 80015ae:	bf00      	nop
			}

			bms_data.charge_mos = _frame_buff[0][5];
 80015b0:	4b32      	ldr	r3, [pc, #200]	@ (800167c <DalyBMS_Get_Charge_Discharge_Status+0x124>)
 80015b2:	795b      	ldrb	r3, [r3, #5]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	bf14      	ite	ne
 80015b8:	2301      	movne	r3, #1
 80015ba:	2300      	moveq	r3, #0
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4b30      	ldr	r3, [pc, #192]	@ (8001680 <DalyBMS_Get_Charge_Discharge_Status+0x128>)
 80015c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
			bms_data.discharge_mos = _frame_buff[0][6];
 80015c4:	4b2d      	ldr	r3, [pc, #180]	@ (800167c <DalyBMS_Get_Charge_Discharge_Status+0x124>)
 80015c6:	799b      	ldrb	r3, [r3, #6]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	bf14      	ite	ne
 80015cc:	2301      	movne	r3, #1
 80015ce:	2300      	moveq	r3, #0
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001680 <DalyBMS_Get_Charge_Discharge_Status+0x128>)
 80015d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
			bms_data.bms_life_cycle = _frame_buff[0][7];
 80015d8:	4b28      	ldr	r3, [pc, #160]	@ (800167c <DalyBMS_Get_Charge_Discharge_Status+0x124>)
 80015da:	79da      	ldrb	r2, [r3, #7]
 80015dc:	4b28      	ldr	r3, [pc, #160]	@ (8001680 <DalyBMS_Get_Charge_Discharge_Status+0x128>)
 80015de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

			float tmpAh = (((uint32_t)_frame_buff[0][8] << 0x18) | ((uint32_t)_frame_buff[0][9] << 0x10) | ((uint32_t)_frame_buff[0][10] << 0x08) | (uint32_t)_frame_buff[0][11]);
 80015e2:	4b26      	ldr	r3, [pc, #152]	@ (800167c <DalyBMS_Get_Charge_Discharge_Status+0x124>)
 80015e4:	7a1b      	ldrb	r3, [r3, #8]
 80015e6:	061a      	lsls	r2, r3, #24
 80015e8:	4b24      	ldr	r3, [pc, #144]	@ (800167c <DalyBMS_Get_Charge_Discharge_Status+0x124>)
 80015ea:	7a5b      	ldrb	r3, [r3, #9]
 80015ec:	041b      	lsls	r3, r3, #16
 80015ee:	431a      	orrs	r2, r3
 80015f0:	4b22      	ldr	r3, [pc, #136]	@ (800167c <DalyBMS_Get_Charge_Discharge_Status+0x124>)
 80015f2:	7a9b      	ldrb	r3, [r3, #10]
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	4313      	orrs	r3, r2
 80015f8:	4a20      	ldr	r2, [pc, #128]	@ (800167c <DalyBMS_Get_Charge_Discharge_Status+0x124>)
 80015fa:	7ad2      	ldrb	r2, [r2, #11]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff faf8 	bl	8000bf4 <__aeabi_ui2f>
 8001604:	4603      	mov	r3, r0
 8001606:	607b      	str	r3, [r7, #4]
			bms_data.residual_capacity_mAh = tmpAh;
 8001608:	4a1d      	ldr	r2, [pc, #116]	@ (8001680 <DalyBMS_Get_Charge_Discharge_Status+0x128>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6413      	str	r3, [r2, #64]	@ 0x40

			Debug_Printf("<BMS> - Charge/Discharge Status: %d\n", bms_data.charge_discharge_status);
 800160e:	4b1c      	ldr	r3, [pc, #112]	@ (8001680 <DalyBMS_Get_Charge_Discharge_Status+0x128>)
 8001610:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001614:	4619      	mov	r1, r3
 8001616:	481b      	ldr	r0, [pc, #108]	@ (8001684 <DalyBMS_Get_Charge_Discharge_Status+0x12c>)
 8001618:	f000 fbd2 	bl	8001dc0 <Debug_Printf>
			Debug_Printf("<BMS> - Charge Status: %d\n", bms_data.charge_mos);
 800161c:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <DalyBMS_Get_Charge_Discharge_Status+0x128>)
 800161e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001622:	4619      	mov	r1, r3
 8001624:	4818      	ldr	r0, [pc, #96]	@ (8001688 <DalyBMS_Get_Charge_Discharge_Status+0x130>)
 8001626:	f000 fbcb 	bl	8001dc0 <Debug_Printf>
			Debug_Printf("<BMS> - Discharge Status: %d\n", bms_data.discharge_mos);
 800162a:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <DalyBMS_Get_Charge_Discharge_Status+0x128>)
 800162c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001630:	4619      	mov	r1, r3
 8001632:	4816      	ldr	r0, [pc, #88]	@ (800168c <DalyBMS_Get_Charge_Discharge_Status+0x134>)
 8001634:	f000 fbc4 	bl	8001dc0 <Debug_Printf>
			Debug_Printf("<BMS> - Life: %d\n", bms_data.bms_life_cycle);
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <DalyBMS_Get_Charge_Discharge_Status+0x128>)
 800163a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800163e:	4619      	mov	r1, r3
 8001640:	4813      	ldr	r0, [pc, #76]	@ (8001690 <DalyBMS_Get_Charge_Discharge_Status+0x138>)
 8001642:	f000 fbbd 	bl	8001dc0 <Debug_Printf>
			Debug_Printf("<BMS> - Residual Capacity: %.2f mAh\n", bms_data.residual_capacity_mAh);
 8001646:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <DalyBMS_Get_Charge_Discharge_Status+0x128>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe feec 	bl	8000428 <__aeabi_f2d>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	480f      	ldr	r0, [pc, #60]	@ (8001694 <DalyBMS_Get_Charge_Discharge_Status+0x13c>)
 8001656:	f000 fbb3 	bl	8001dc0 <Debug_Printf>
	{
		Debug_Printf("BMS request charge/discharge MOS status failed\n");
		return false;  // Request failed
	}

	return true;
 800165a:	2301      	movs	r3, #1
 800165c:	e008      	b.n	8001670 <DalyBMS_Get_Charge_Discharge_Status+0x118>
			Debug_Printf("BMS receive charge/discharge MOS status failed\n");
 800165e:	480e      	ldr	r0, [pc, #56]	@ (8001698 <DalyBMS_Get_Charge_Discharge_Status+0x140>)
 8001660:	f000 fbae 	bl	8001dc0 <Debug_Printf>
			return false;  // Receive error
 8001664:	2300      	movs	r3, #0
 8001666:	e003      	b.n	8001670 <DalyBMS_Get_Charge_Discharge_Status+0x118>
		Debug_Printf("BMS request charge/discharge MOS status failed\n");
 8001668:	480c      	ldr	r0, [pc, #48]	@ (800169c <DalyBMS_Get_Charge_Discharge_Status+0x144>)
 800166a:	f000 fba9 	bl	8001dc0 <Debug_Printf>
		return false;  // Request failed
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	08008914 	.word	0x08008914
 800167c:	20000208 	.word	0x20000208
 8001680:	20000344 	.word	0x20000344
 8001684:	0800894c 	.word	0x0800894c
 8001688:	08008974 	.word	0x08008974
 800168c:	08008990 	.word	0x08008990
 8001690:	080089b0 	.word	0x080089b0
 8001694:	080089c4 	.word	0x080089c4
 8001698:	080089ec 	.word	0x080089ec
 800169c:	08008a1c 	.word	0x08008a1c

080016a0 <DalyBMS_Get_Status_Info>:

bool DalyBMS_Get_Status_Info()
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	Debug_Printf("BMS request status info\n");
 80016a4:	4832      	ldr	r0, [pc, #200]	@ (8001770 <DalyBMS_Get_Status_Info+0xd0>)
 80016a6:	f000 fb8b 	bl	8001dc0 <Debug_Printf>
	if (DalyBMS_Request(STATUS_INFO))
 80016aa:	2094      	movs	r0, #148	@ 0x94
 80016ac:	f7ff fce0 	bl	8001070 <DalyBMS_Request>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d055      	beq.n	8001762 <DalyBMS_Get_Status_Info+0xc2>
	{
		if (DalyBMS_Recive(1))
 80016b6:	2001      	movs	r0, #1
 80016b8:	f7ff fd36 	bl	8001128 <DalyBMS_Recive>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d04a      	beq.n	8001758 <DalyBMS_Get_Status_Info+0xb8>
		{
			Debug_Printf("BMS received status info successfully\n");
 80016c2:	482c      	ldr	r0, [pc, #176]	@ (8001774 <DalyBMS_Get_Status_Info+0xd4>)
 80016c4:	f000 fb7c 	bl	8001dc0 <Debug_Printf>
			bms_data.num_cells = _frame_buff[0][4];
 80016c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001778 <DalyBMS_Get_Status_Info+0xd8>)
 80016ca:	791a      	ldrb	r2, [r3, #4]
 80016cc:	4b2b      	ldr	r3, [pc, #172]	@ (800177c <DalyBMS_Get_Status_Info+0xdc>)
 80016ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			bms_data.num_temp_sensors = _frame_buff[0][5];
 80016d2:	4b29      	ldr	r3, [pc, #164]	@ (8001778 <DalyBMS_Get_Status_Info+0xd8>)
 80016d4:	795a      	ldrb	r2, [r3, #5]
 80016d6:	4b29      	ldr	r3, [pc, #164]	@ (800177c <DalyBMS_Get_Status_Info+0xdc>)
 80016d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			bms_data.charge_status = _frame_buff[0][6];
 80016dc:	4b26      	ldr	r3, [pc, #152]	@ (8001778 <DalyBMS_Get_Status_Info+0xd8>)
 80016de:	799b      	ldrb	r3, [r3, #6]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	bf14      	ite	ne
 80016e4:	2301      	movne	r3, #1
 80016e6:	2300      	moveq	r3, #0
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4b24      	ldr	r3, [pc, #144]	@ (800177c <DalyBMS_Get_Status_Info+0xdc>)
 80016ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			bms_data.discharge_status = _frame_buff[0][7];
 80016f0:	4b21      	ldr	r3, [pc, #132]	@ (8001778 <DalyBMS_Get_Status_Info+0xd8>)
 80016f2:	79db      	ldrb	r3, [r3, #7]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	bf14      	ite	ne
 80016f8:	2301      	movne	r3, #1
 80016fa:	2300      	moveq	r3, #0
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4b1f      	ldr	r3, [pc, #124]	@ (800177c <DalyBMS_Get_Status_Info+0xdc>)
 8001700:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
			bms_data.charge_discharge_cycle = ((uint16_t)_frame_buff[0][9] << 0x08) | (uint16_t)_frame_buff[0][10];
 8001704:	4b1c      	ldr	r3, [pc, #112]	@ (8001778 <DalyBMS_Get_Status_Info+0xd8>)
 8001706:	7a9a      	ldrb	r2, [r3, #10]
 8001708:	4b1c      	ldr	r3, [pc, #112]	@ (800177c <DalyBMS_Get_Status_Info+0xdc>)
 800170a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			Debug_Printf("<BMS> - Number of cell: %d\n", bms_data.num_cells);
 800170e:	4b1b      	ldr	r3, [pc, #108]	@ (800177c <DalyBMS_Get_Status_Info+0xdc>)
 8001710:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001714:	4619      	mov	r1, r3
 8001716:	481a      	ldr	r0, [pc, #104]	@ (8001780 <DalyBMS_Get_Status_Info+0xe0>)
 8001718:	f000 fb52 	bl	8001dc0 <Debug_Printf>
			Debug_Printf("<BMS> - Number of temperature sensors: %d\n", bms_data.num_temp_sensors);
 800171c:	4b17      	ldr	r3, [pc, #92]	@ (800177c <DalyBMS_Get_Status_Info+0xdc>)
 800171e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001722:	4619      	mov	r1, r3
 8001724:	4817      	ldr	r0, [pc, #92]	@ (8001784 <DalyBMS_Get_Status_Info+0xe4>)
 8001726:	f000 fb4b 	bl	8001dc0 <Debug_Printf>
			Debug_Printf("<BMS> - Charge status: %d\n", bms_data.charge_status);
 800172a:	4b14      	ldr	r3, [pc, #80]	@ (800177c <DalyBMS_Get_Status_Info+0xdc>)
 800172c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8001730:	4619      	mov	r1, r3
 8001732:	4815      	ldr	r0, [pc, #84]	@ (8001788 <DalyBMS_Get_Status_Info+0xe8>)
 8001734:	f000 fb44 	bl	8001dc0 <Debug_Printf>
			Debug_Printf("<BMS> - Discharge status: %d\n", bms_data.discharge_status);
 8001738:	4b10      	ldr	r3, [pc, #64]	@ (800177c <DalyBMS_Get_Status_Info+0xdc>)
 800173a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800173e:	4619      	mov	r1, r3
 8001740:	4812      	ldr	r0, [pc, #72]	@ (800178c <DalyBMS_Get_Status_Info+0xec>)
 8001742:	f000 fb3d 	bl	8001dc0 <Debug_Printf>
			Debug_Printf("<BMS> - Charge/Discharge Cycle: %d\n", bms_data.charge_discharge_cycle);
 8001746:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <DalyBMS_Get_Status_Info+0xdc>)
 8001748:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800174c:	4619      	mov	r1, r3
 800174e:	4810      	ldr	r0, [pc, #64]	@ (8001790 <DalyBMS_Get_Status_Info+0xf0>)
 8001750:	f000 fb36 	bl	8001dc0 <Debug_Printf>
			return true;  // Request successful
 8001754:	2301      	movs	r3, #1
 8001756:	e008      	b.n	800176a <DalyBMS_Get_Status_Info+0xca>
		}
		else
		{
			Debug_Printf("BMS receive status info failed\n");
 8001758:	480e      	ldr	r0, [pc, #56]	@ (8001794 <DalyBMS_Get_Status_Info+0xf4>)
 800175a:	f000 fb31 	bl	8001dc0 <Debug_Printf>
			return false;  // Receive error
 800175e:	2300      	movs	r3, #0
 8001760:	e003      	b.n	800176a <DalyBMS_Get_Status_Info+0xca>
		}
	}
	else
	{
		Debug_Printf("BMS request status info failed\n");
 8001762:	480d      	ldr	r0, [pc, #52]	@ (8001798 <DalyBMS_Get_Status_Info+0xf8>)
 8001764:	f000 fb2c 	bl	8001dc0 <Debug_Printf>
		return false;  // Request failed
 8001768:	2300      	movs	r3, #0
	}
	return true;
}
 800176a:	4618      	mov	r0, r3
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	08008a4c 	.word	0x08008a4c
 8001774:	08008a68 	.word	0x08008a68
 8001778:	20000208 	.word	0x20000208
 800177c:	20000344 	.word	0x20000344
 8001780:	08008a90 	.word	0x08008a90
 8001784:	08008aac 	.word	0x08008aac
 8001788:	08008ad8 	.word	0x08008ad8
 800178c:	08008af4 	.word	0x08008af4
 8001790:	08008b14 	.word	0x08008b14
 8001794:	08008b38 	.word	0x08008b38
 8001798:	08008b58 	.word	0x08008b58

0800179c <DalyBMS_Get_Cell_Voltages>:

bool DalyBMS_Get_Cell_Voltages()
{
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
	Debug_Printf("BMS request cell voltages\n");
 80017a2:	484e      	ldr	r0, [pc, #312]	@ (80018dc <DalyBMS_Get_Cell_Voltages+0x140>)
 80017a4:	f000 fb0c 	bl	8001dc0 <Debug_Printf>
	if (bms_data.num_cells < MIN_CELLS || bms_data.num_cells > MAX_CELLS)
 80017a8:	4b4d      	ldr	r3, [pc, #308]	@ (80018e0 <DalyBMS_Get_Cell_Voltages+0x144>)
 80017aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d004      	beq.n	80017bc <DalyBMS_Get_Cell_Voltages+0x20>
 80017b2:	4b4b      	ldr	r3, [pc, #300]	@ (80018e0 <DalyBMS_Get_Cell_Voltages+0x144>)
 80017b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80017b8:	2b10      	cmp	r3, #16
 80017ba:	d908      	bls.n	80017ce <DalyBMS_Get_Cell_Voltages+0x32>
	{
		Debug_Printf("Invalid cell count: %d\n", bms_data.num_cells);
 80017bc:	4b48      	ldr	r3, [pc, #288]	@ (80018e0 <DalyBMS_Get_Cell_Voltages+0x144>)
 80017be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80017c2:	4619      	mov	r1, r3
 80017c4:	4847      	ldr	r0, [pc, #284]	@ (80018e4 <DalyBMS_Get_Cell_Voltages+0x148>)
 80017c6:	f000 fafb 	bl	8001dc0 <Debug_Printf>
		return false;  // Invalid cell count
 80017ca:	2300      	movs	r3, #0
 80017cc:	e081      	b.n	80018d2 <DalyBMS_Get_Cell_Voltages+0x136>
	}
	if (DalyBMS_Request(CELL_VOLTAGES))
 80017ce:	2095      	movs	r0, #149	@ 0x95
 80017d0:	f7ff fc4e 	bl	8001070 <DalyBMS_Request>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d07a      	beq.n	80018d0 <DalyBMS_Get_Cell_Voltages+0x134>
	{
		uint8_t _cell_num = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	71fb      	strb	r3, [r7, #7]
		uint8_t _frame_count = (bms_data.num_cells +2 )/3; // 1 frame for 1-3 cells, 2 frames for 4-6 cells, etc.
 80017de:	4b40      	ldr	r3, [pc, #256]	@ (80018e0 <DalyBMS_Get_Cell_Voltages+0x144>)
 80017e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80017e4:	3302      	adds	r3, #2
 80017e6:	4a40      	ldr	r2, [pc, #256]	@ (80018e8 <DalyBMS_Get_Cell_Voltages+0x14c>)
 80017e8:	fb82 1203 	smull	r1, r2, r2, r3
 80017ec:	17db      	asrs	r3, r3, #31
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	713b      	strb	r3, [r7, #4]
		if (DalyBMS_Recive(_frame_count))
 80017f2:	793b      	ldrb	r3, [r7, #4]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fc97 	bl	8001128 <DalyBMS_Recive>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d062      	beq.n	80018c6 <DalyBMS_Get_Cell_Voltages+0x12a>
		{
			Debug_Printf("BMS received cell voltage successfully\n");
 8001800:	483a      	ldr	r0, [pc, #232]	@ (80018ec <DalyBMS_Get_Cell_Voltages+0x150>)
 8001802:	f000 fadd 	bl	8001dc0 <Debug_Printf>


			for (uint8_t k = 0; k < _frame_count; k++)
 8001806:	2300      	movs	r3, #0
 8001808:	71bb      	strb	r3, [r7, #6]
 800180a:	e057      	b.n	80018bc <DalyBMS_Get_Cell_Voltages+0x120>
			{
				for (uint8_t i = 0; i < 3; i++)
 800180c:	2300      	movs	r3, #0
 800180e:	717b      	strb	r3, [r7, #5]
 8001810:	e04c      	b.n	80018ac <DalyBMS_Get_Cell_Voltages+0x110>
				{
					if (_cell_num >= bms_data.num_cells) break;
 8001812:	4b33      	ldr	r3, [pc, #204]	@ (80018e0 <DalyBMS_Get_Cell_Voltages+0x144>)
 8001814:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001818:	79fa      	ldrb	r2, [r7, #7]
 800181a:	429a      	cmp	r2, r3
 800181c:	d24a      	bcs.n	80018b4 <DalyBMS_Get_Cell_Voltages+0x118>

				  	uint16_t cell_mV = (_frame_buff[k][5 + 2*i] << 8) | _frame_buff[k][6 + 2*i];
 800181e:	79ba      	ldrb	r2, [r7, #6]
 8001820:	797b      	ldrb	r3, [r7, #5]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	1d59      	adds	r1, r3, #5
 8001826:	4832      	ldr	r0, [pc, #200]	@ (80018f0 <DalyBMS_Get_Cell_Voltages+0x154>)
 8001828:	4613      	mov	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	4403      	add	r3, r0
 8001834:	440b      	add	r3, r1
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	b21b      	sxth	r3, r3
 800183a:	021b      	lsls	r3, r3, #8
 800183c:	b219      	sxth	r1, r3
 800183e:	79ba      	ldrb	r2, [r7, #6]
 8001840:	797b      	ldrb	r3, [r7, #5]
 8001842:	3303      	adds	r3, #3
 8001844:	0058      	lsls	r0, r3, #1
 8001846:	4c2a      	ldr	r4, [pc, #168]	@ (80018f0 <DalyBMS_Get_Cell_Voltages+0x154>)
 8001848:	4613      	mov	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	4413      	add	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	4423      	add	r3, r4
 8001854:	4403      	add	r3, r0
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	b21b      	sxth	r3, r3
 800185a:	430b      	orrs	r3, r1
 800185c:	b21b      	sxth	r3, r3
 800185e:	807b      	strh	r3, [r7, #2]
				  	bms_data.cell_voltage_mv[_cell_num++] = cell_mV;
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	71fa      	strb	r2, [r7, #7]
 8001866:	461c      	mov	r4, r3
 8001868:	887b      	ldrh	r3, [r7, #2]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff f9c2 	bl	8000bf4 <__aeabi_ui2f>
 8001870:	4602      	mov	r2, r0
 8001872:	491b      	ldr	r1, [pc, #108]	@ (80018e0 <DalyBMS_Get_Cell_Voltages+0x144>)
 8001874:	f104 0312 	add.w	r3, r4, #18
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	605a      	str	r2, [r3, #4]
				  	Debug_Printf("<BMS> - Cell %d Voltage: %.3f V\n", _cell_num, ((float)cell_mV / 1000.0f));
 800187e:	79fc      	ldrb	r4, [r7, #7]
 8001880:	887b      	ldrh	r3, [r7, #2]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff f9b6 	bl	8000bf4 <__aeabi_ui2f>
 8001888:	4603      	mov	r3, r0
 800188a:	491a      	ldr	r1, [pc, #104]	@ (80018f4 <DalyBMS_Get_Cell_Voltages+0x158>)
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fabd 	bl	8000e0c <__aeabi_fdiv>
 8001892:	4603      	mov	r3, r0
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fdc7 	bl	8000428 <__aeabi_f2d>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4621      	mov	r1, r4
 80018a0:	4815      	ldr	r0, [pc, #84]	@ (80018f8 <DalyBMS_Get_Cell_Voltages+0x15c>)
 80018a2:	f000 fa8d 	bl	8001dc0 <Debug_Printf>
				for (uint8_t i = 0; i < 3; i++)
 80018a6:	797b      	ldrb	r3, [r7, #5]
 80018a8:	3301      	adds	r3, #1
 80018aa:	717b      	strb	r3, [r7, #5]
 80018ac:	797b      	ldrb	r3, [r7, #5]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d9af      	bls.n	8001812 <DalyBMS_Get_Cell_Voltages+0x76>
 80018b2:	e000      	b.n	80018b6 <DalyBMS_Get_Cell_Voltages+0x11a>
					if (_cell_num >= bms_data.num_cells) break;
 80018b4:	bf00      	nop
			for (uint8_t k = 0; k < _frame_count; k++)
 80018b6:	79bb      	ldrb	r3, [r7, #6]
 80018b8:	3301      	adds	r3, #1
 80018ba:	71bb      	strb	r3, [r7, #6]
 80018bc:	79ba      	ldrb	r2, [r7, #6]
 80018be:	793b      	ldrb	r3, [r7, #4]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d3a3      	bcc.n	800180c <DalyBMS_Get_Cell_Voltages+0x70>
 80018c4:	e004      	b.n	80018d0 <DalyBMS_Get_Cell_Voltages+0x134>
				}
			}
		}
		else
		{
			Debug_Printf("BMS request cell voltage failed\n");
 80018c6:	480d      	ldr	r0, [pc, #52]	@ (80018fc <DalyBMS_Get_Cell_Voltages+0x160>)
 80018c8:	f000 fa7a 	bl	8001dc0 <Debug_Printf>
			return false;  // Request failed
 80018cc:	2300      	movs	r3, #0
 80018ce:	e000      	b.n	80018d2 <DalyBMS_Get_Cell_Voltages+0x136>
		}
	}
	return true;
 80018d0:	2301      	movs	r3, #1
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd90      	pop	{r4, r7, pc}
 80018da:	bf00      	nop
 80018dc:	08008b78 	.word	0x08008b78
 80018e0:	20000344 	.word	0x20000344
 80018e4:	08008b94 	.word	0x08008b94
 80018e8:	55555556 	.word	0x55555556
 80018ec:	08008bac 	.word	0x08008bac
 80018f0:	20000208 	.word	0x20000208
 80018f4:	447a0000 	.word	0x447a0000
 80018f8:	08008bd4 	.word	0x08008bd4
 80018fc:	08008bf8 	.word	0x08008bf8

08001900 <DalyBMS_Get_Cell_Temperatures>:

bool DalyBMS_Get_Cell_Temperatures()
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
	if (bms_data.num_temp_sensors < MIN_TEMP_SENSORS || bms_data.num_temp_sensors > MAX_TEMP_SENSORS)
 8001906:	4b24      	ldr	r3, [pc, #144]	@ (8001998 <DalyBMS_Get_Cell_Temperatures+0x98>)
 8001908:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800190c:	2b00      	cmp	r3, #0
 800190e:	d004      	beq.n	800191a <DalyBMS_Get_Cell_Temperatures+0x1a>
 8001910:	4b21      	ldr	r3, [pc, #132]	@ (8001998 <DalyBMS_Get_Cell_Temperatures+0x98>)
 8001912:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001916:	2b04      	cmp	r3, #4
 8001918:	d908      	bls.n	800192c <DalyBMS_Get_Cell_Temperatures+0x2c>
	{
		Debug_Printf("Invalid temperature sensor count: %d\n", bms_data.num_temp_sensors);
 800191a:	4b1f      	ldr	r3, [pc, #124]	@ (8001998 <DalyBMS_Get_Cell_Temperatures+0x98>)
 800191c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001920:	4619      	mov	r1, r3
 8001922:	481e      	ldr	r0, [pc, #120]	@ (800199c <DalyBMS_Get_Cell_Temperatures+0x9c>)
 8001924:	f000 fa4c 	bl	8001dc0 <Debug_Printf>
		return false;  // Invalid temperature sensor count
 8001928:	2300      	movs	r3, #0
 800192a:	e031      	b.n	8001990 <DalyBMS_Get_Cell_Temperatures+0x90>
	}
	if (DalyBMS_Request(CELL_TEMPERATURE))
 800192c:	2096      	movs	r0, #150	@ 0x96
 800192e:	f7ff fb9f 	bl	8001070 <DalyBMS_Request>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d027      	beq.n	8001988 <DalyBMS_Get_Cell_Temperatures+0x88>
	{
		if (DalyBMS_Recive(1))
 8001938:	2001      	movs	r0, #1
 800193a:	f7ff fbf5 	bl	8001128 <DalyBMS_Recive>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d01c      	beq.n	800197e <DalyBMS_Get_Cell_Temperatures+0x7e>
		{
			Debug_Printf("BMS received cell temperatures successfully\n");
 8001944:	4816      	ldr	r0, [pc, #88]	@ (80019a0 <DalyBMS_Get_Cell_Temperatures+0xa0>)
 8001946:	f000 fa3b 	bl	8001dc0 <Debug_Printf>
//			uint8_t _sensor_num = 0;
//			uint8_t _temp_frame_count = (bms_data.num_temp_sensors + 6) / 7;

			for (uint8_t i = 0; i < bms_data.num_temp_sensors; i++)
 800194a:	2300      	movs	r3, #0
 800194c:	71fb      	strb	r3, [r7, #7]
 800194e:	e00e      	b.n	800196e <DalyBMS_Get_Cell_Temperatures+0x6e>
			{
//				if (_sensor_num >= bms_data.num_temp_sensors) break;
				bms_data.temperature_c[i] = (_frame_buff[0][5 + i] - 40);
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	3305      	adds	r3, #5
 8001954:	4a13      	ldr	r2, [pc, #76]	@ (80019a4 <DalyBMS_Get_Cell_Temperatures+0xa4>)
 8001956:	5cd2      	ldrb	r2, [r2, r3]
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	3a28      	subs	r2, #40	@ 0x28
 800195c:	b2d1      	uxtb	r1, r2
 800195e:	4a0e      	ldr	r2, [pc, #56]	@ (8001998 <DalyBMS_Get_Cell_Temperatures+0x98>)
 8001960:	4413      	add	r3, r2
 8001962:	460a      	mov	r2, r1
 8001964:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
			for (uint8_t i = 0; i < bms_data.num_temp_sensors; i++)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	3301      	adds	r3, #1
 800196c:	71fb      	strb	r3, [r7, #7]
 800196e:	4b0a      	ldr	r3, [pc, #40]	@ (8001998 <DalyBMS_Get_Cell_Temperatures+0x98>)
 8001970:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001974:	79fa      	ldrb	r2, [r7, #7]
 8001976:	429a      	cmp	r2, r3
 8001978:	d3ea      	bcc.n	8001950 <DalyBMS_Get_Cell_Temperatures+0x50>
//				Debug_Printf("<BMS> - Sensor %d Temperature: %d C\n", i + 1, bms_data.temperature_c[i]);
//				_sensor_num++;
			}
			return true;  // Request successful
 800197a:	2301      	movs	r3, #1
 800197c:	e008      	b.n	8001990 <DalyBMS_Get_Cell_Temperatures+0x90>
		}
		else
		{
			Debug_Printf("BMS receive cell temperatures failed\n");
 800197e:	480a      	ldr	r0, [pc, #40]	@ (80019a8 <DalyBMS_Get_Cell_Temperatures+0xa8>)
 8001980:	f000 fa1e 	bl	8001dc0 <Debug_Printf>
			return false;  // Receive error
 8001984:	2300      	movs	r3, #0
 8001986:	e003      	b.n	8001990 <DalyBMS_Get_Cell_Temperatures+0x90>
		}
	}
	else
	{
		Debug_Printf("BMS request cell temperatures failed\n");
 8001988:	4808      	ldr	r0, [pc, #32]	@ (80019ac <DalyBMS_Get_Cell_Temperatures+0xac>)
 800198a:	f000 fa19 	bl	8001dc0 <Debug_Printf>
		return false;  // Request failed
 800198e:	2300      	movs	r3, #0
	}

	return true;
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000344 	.word	0x20000344
 800199c:	08008c1c 	.word	0x08008c1c
 80019a0:	08008c44 	.word	0x08008c44
 80019a4:	20000208 	.word	0x20000208
 80019a8:	08008c74 	.word	0x08008c74
 80019ac:	08008c9c 	.word	0x08008c9c

080019b0 <DalyBMS_Get_Cell_Balance_State>:

bool DalyBMS_Get_Cell_Balance_State()
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
	if (bms_data.num_cells < MIN_CELLS || bms_data.num_cells > MAX_CELLS)
 80019b6:	4b3c      	ldr	r3, [pc, #240]	@ (8001aa8 <DalyBMS_Get_Cell_Balance_State+0xf8>)
 80019b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d004      	beq.n	80019ca <DalyBMS_Get_Cell_Balance_State+0x1a>
 80019c0:	4b39      	ldr	r3, [pc, #228]	@ (8001aa8 <DalyBMS_Get_Cell_Balance_State+0xf8>)
 80019c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80019c6:	2b10      	cmp	r3, #16
 80019c8:	d908      	bls.n	80019dc <DalyBMS_Get_Cell_Balance_State+0x2c>
	{
		Debug_Printf("Invalid cell count: %d\n", bms_data.num_cells);
 80019ca:	4b37      	ldr	r3, [pc, #220]	@ (8001aa8 <DalyBMS_Get_Cell_Balance_State+0xf8>)
 80019cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80019d0:	4619      	mov	r1, r3
 80019d2:	4836      	ldr	r0, [pc, #216]	@ (8001aac <DalyBMS_Get_Cell_Balance_State+0xfc>)
 80019d4:	f000 f9f4 	bl	8001dc0 <Debug_Printf>
		return false;  // Invalid cell count
 80019d8:	2300      	movs	r3, #0
 80019da:	e061      	b.n	8001aa0 <DalyBMS_Get_Cell_Balance_State+0xf0>
	}

	if (DalyBMS_Request(CELL_BALANCE_STATE))
 80019dc:	2097      	movs	r0, #151	@ 0x97
 80019de:	f7ff fb47 	bl	8001070 <DalyBMS_Request>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d057      	beq.n	8001a98 <DalyBMS_Get_Cell_Balance_State+0xe8>
	{
		if (DalyBMS_Recive(1))
 80019e8:	2001      	movs	r0, #1
 80019ea:	f7ff fb9d 	bl	8001128 <DalyBMS_Recive>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d04c      	beq.n	8001a8e <DalyBMS_Get_Cell_Balance_State+0xde>
		{
			Debug_Printf("BMS received cell balance state successfully\n");
 80019f4:	482e      	ldr	r0, [pc, #184]	@ (8001ab0 <DalyBMS_Get_Cell_Balance_State+0x100>)
 80019f6:	f000 f9e3 	bl	8001dc0 <Debug_Printf>
			uint8_t _cell_bit = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	71fb      	strb	r3, [r7, #7]
			uint8_t _balance_frame_count = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	71bb      	strb	r3, [r7, #6]

			for (uint8_t i = 0; i < 6; i++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	717b      	strb	r3, [r7, #5]
 8001a06:	e034      	b.n	8001a72 <DalyBMS_Get_Cell_Balance_State+0xc2>
			{
				uint8_t _byte = _frame_buff[0][4 + i];
 8001a08:	797b      	ldrb	r3, [r7, #5]
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	4a29      	ldr	r2, [pc, #164]	@ (8001ab4 <DalyBMS_Get_Cell_Balance_State+0x104>)
 8001a0e:	5cd3      	ldrb	r3, [r2, r3]
 8001a10:	70fb      	strb	r3, [r7, #3]
				for (uint8_t j = 0; j < 8; j++)
 8001a12:	2300      	movs	r3, #0
 8001a14:	713b      	strb	r3, [r7, #4]
 8001a16:	e024      	b.n	8001a62 <DalyBMS_Get_Cell_Balance_State+0xb2>
				{
					if (_cell_bit >= bms_data.num_cells) break;
 8001a18:	4b23      	ldr	r3, [pc, #140]	@ (8001aa8 <DalyBMS_Get_Cell_Balance_State+0xf8>)
 8001a1a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001a1e:	79fa      	ldrb	r2, [r7, #7]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d222      	bcs.n	8001a6a <DalyBMS_Get_Cell_Balance_State+0xba>
					uint8_t bit = (_byte >> j) & 0x01;
 8001a24:	78fa      	ldrb	r2, [r7, #3]
 8001a26:	793b      	ldrb	r3, [r7, #4]
 8001a28:	fa42 f303 	asr.w	r3, r2, r3
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	70bb      	strb	r3, [r7, #2]
					bms_data.cell_balance_state[_cell_bit++] = bit;
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	71fa      	strb	r2, [r7, #7]
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	78bb      	ldrb	r3, [r7, #2]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	bf14      	ite	ne
 8001a42:	2301      	movne	r3, #1
 8001a44:	2300      	moveq	r3, #0
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	4b17      	ldr	r3, [pc, #92]	@ (8001aa8 <DalyBMS_Get_Cell_Balance_State+0xf8>)
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
//					Debug_Printf("<BMS> - Cell %d Balance State: %s\n", _cell_bit, bit ? "ON" : "OFF");
					if (bit) _balance_frame_count++;
 8001a50:	78bb      	ldrb	r3, [r7, #2]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d002      	beq.n	8001a5c <DalyBMS_Get_Cell_Balance_State+0xac>
 8001a56:	79bb      	ldrb	r3, [r7, #6]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	71bb      	strb	r3, [r7, #6]
				for (uint8_t j = 0; j < 8; j++)
 8001a5c:	793b      	ldrb	r3, [r7, #4]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	713b      	strb	r3, [r7, #4]
 8001a62:	793b      	ldrb	r3, [r7, #4]
 8001a64:	2b07      	cmp	r3, #7
 8001a66:	d9d7      	bls.n	8001a18 <DalyBMS_Get_Cell_Balance_State+0x68>
 8001a68:	e000      	b.n	8001a6c <DalyBMS_Get_Cell_Balance_State+0xbc>
					if (_cell_bit >= bms_data.num_cells) break;
 8001a6a:	bf00      	nop
			for (uint8_t i = 0; i < 6; i++)
 8001a6c:	797b      	ldrb	r3, [r7, #5]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	717b      	strb	r3, [r7, #5]
 8001a72:	797b      	ldrb	r3, [r7, #5]
 8001a74:	2b05      	cmp	r3, #5
 8001a76:	d9c7      	bls.n	8001a08 <DalyBMS_Get_Cell_Balance_State+0x58>
				}
			}
			bms_data.cell_balance_active = (_balance_frame_count > 0) ? true : false;
 8001a78:	79bb      	ldrb	r3, [r7, #6]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	bf14      	ite	ne
 8001a7e:	2301      	movne	r3, #1
 8001a80:	2300      	moveq	r3, #0
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <DalyBMS_Get_Cell_Balance_State+0xf8>)
 8001a86:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
//			Debug_Printf("<BMS> - Cell Balance Active: %s\n", bms_data.cell_balance_active ? "Yes" : "No");
			return true;  // Request successful
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e008      	b.n	8001aa0 <DalyBMS_Get_Cell_Balance_State+0xf0>
		}
		else
		{
			Debug_Printf("BMS receive cell balance state failed\n");
 8001a8e:	480a      	ldr	r0, [pc, #40]	@ (8001ab8 <DalyBMS_Get_Cell_Balance_State+0x108>)
 8001a90:	f000 f996 	bl	8001dc0 <Debug_Printf>
			return false;  // Receive error
 8001a94:	2300      	movs	r3, #0
 8001a96:	e003      	b.n	8001aa0 <DalyBMS_Get_Cell_Balance_State+0xf0>
		}
	}
	else
	{
		Debug_Printf("BMS request cell balance state failed\n");
 8001a98:	4808      	ldr	r0, [pc, #32]	@ (8001abc <DalyBMS_Get_Cell_Balance_State+0x10c>)
 8001a9a:	f000 f991 	bl	8001dc0 <Debug_Printf>
		return false;  // Request failed
 8001a9e:	2300      	movs	r3, #0
	}

	return true;
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000344 	.word	0x20000344
 8001aac:	08008b94 	.word	0x08008b94
 8001ab0:	08008cc4 	.word	0x08008cc4
 8001ab4:	20000208 	.word	0x20000208
 8001ab8:	08008cf4 	.word	0x08008cf4
 8001abc:	08008d1c 	.word	0x08008d1c

08001ac0 <DalyBMS_Get_Failure_Codes>:

bool DalyBMS_Get_Failure_Codes()
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b0ba      	sub	sp, #232	@ 0xe8
 8001ac4:	af00      	add	r7, sp, #0
	const char* faultMsgs[7][8] = {
 8001ac6:	4a35      	ldr	r2, [pc, #212]	@ (8001b9c <DalyBMS_Get_Failure_Codes+0xdc>)
 8001ac8:	463b      	mov	r3, r7
 8001aca:	4611      	mov	r1, r2
 8001acc:	22e0      	movs	r2, #224	@ 0xe0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f004 fdb3 	bl	800663a <memcpy>
		  		{"Difference volt L1", "Difference volt L2", "Difference temperature L1", "Difference temperature L2", "", "", "", ""},
		  		{"Charge MOS temperature high", "Discharge MOS temperature high", "Charge MOS temperature sensor err", "Discharge MOS temperature sensor err", "Charge MOS adhesion err", "Discharge MOS adhesion err", "Charge MOS open circuit", "Discharge MOS open circuit"},
		  		{"AFE collect chip err", "Voltage collect dropped", "Cell temperature sensor err", "EEPROM err", "RTC err", "Precharge fail", "Communication fail", "Internal communication fail"},
		  		{"Current module fault", "Sum volt detect fault", "Short circuit protect fault", "Low volt charge forbidden", "", "", "", ""}
		  	 };
	if (DalyBMS_Request(FAILURE_CODES))
 8001ad4:	2098      	movs	r0, #152	@ 0x98
 8001ad6:	f7ff facb 	bl	8001070 <DalyBMS_Request>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d054      	beq.n	8001b8a <DalyBMS_Get_Failure_Codes+0xca>
	{
		if (DalyBMS_Recive(1))
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f7ff fb21 	bl	8001128 <DalyBMS_Recive>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d049      	beq.n	8001b80 <DalyBMS_Get_Failure_Codes+0xc0>
		{
			Debug_Printf("BMS received failure codes successfully\n");
 8001aec:	482c      	ldr	r0, [pc, #176]	@ (8001ba0 <DalyBMS_Get_Failure_Codes+0xe0>)
 8001aee:	f000 f967 	bl	8001dc0 <Debug_Printf>
			Debug_Printf("<BMS> - Failure Codes:\n");
 8001af2:	482c      	ldr	r0, [pc, #176]	@ (8001ba4 <DalyBMS_Get_Failure_Codes+0xe4>)
 8001af4:	f000 f964 	bl	8001dc0 <Debug_Printf>

			for (uint8_t byteIdx = 0; byteIdx < 7; byteIdx++) {
 8001af8:	2300      	movs	r3, #0
 8001afa:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
 8001afe:	e039      	b.n	8001b74 <DalyBMS_Get_Failure_Codes+0xb4>
				uint8_t byteVal = _frame_buff[0][4 + byteIdx];
 8001b00:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8001b04:	3304      	adds	r3, #4
 8001b06:	4a28      	ldr	r2, [pc, #160]	@ (8001ba8 <DalyBMS_Get_Failure_Codes+0xe8>)
 8001b08:	5cd3      	ldrb	r3, [r2, r3]
 8001b0a:	f887 30e5 	strb.w	r3, [r7, #229]	@ 0xe5
				for (uint8_t bit = 0; bit < 8; bit++) {
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6
 8001b14:	e025      	b.n	8001b62 <DalyBMS_Get_Failure_Codes+0xa2>
			 	    if (byteVal & (1 << bit)) {
 8001b16:	f897 20e5 	ldrb.w	r2, [r7, #229]	@ 0xe5
 8001b1a:	f897 30e6 	ldrb.w	r3, [r7, #230]	@ 0xe6
 8001b1e:	fa42 f303 	asr.w	r3, r2, r3
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d016      	beq.n	8001b58 <DalyBMS_Get_Failure_Codes+0x98>
			 	    	const char* msg = faultMsgs[byteIdx][bit];
 8001b2a:	f897 20e7 	ldrb.w	r2, [r7, #231]	@ 0xe7
 8001b2e:	f897 30e6 	ldrb.w	r3, [r7, #230]	@ 0xe6
 8001b32:	00d2      	lsls	r2, r2, #3
 8001b34:	4413      	add	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	33e8      	adds	r3, #232	@ 0xe8
 8001b3a:	443b      	add	r3, r7
 8001b3c:	f853 3ce8 	ldr.w	r3, [r3, #-232]
 8001b40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			 	    	if (msg[0] != '\0') Debug_Printf("- %s\n", msg);
 8001b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d004      	beq.n	8001b58 <DalyBMS_Get_Failure_Codes+0x98>
 8001b4e:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8001b52:	4816      	ldr	r0, [pc, #88]	@ (8001bac <DalyBMS_Get_Failure_Codes+0xec>)
 8001b54:	f000 f934 	bl	8001dc0 <Debug_Printf>
				for (uint8_t bit = 0; bit < 8; bit++) {
 8001b58:	f897 30e6 	ldrb.w	r3, [r7, #230]	@ 0xe6
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6
 8001b62:	f897 30e6 	ldrb.w	r3, [r7, #230]	@ 0xe6
 8001b66:	2b07      	cmp	r3, #7
 8001b68:	d9d5      	bls.n	8001b16 <DalyBMS_Get_Failure_Codes+0x56>
			for (uint8_t byteIdx = 0; byteIdx < 7; byteIdx++) {
 8001b6a:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8001b6e:	3301      	adds	r3, #1
 8001b70:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
 8001b74:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8001b78:	2b06      	cmp	r3, #6
 8001b7a:	d9c1      	bls.n	8001b00 <DalyBMS_Get_Failure_Codes+0x40>
			 	    }
				}
			}
			return true;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e008      	b.n	8001b92 <DalyBMS_Get_Failure_Codes+0xd2>
		}
		else
		{
			Debug_Printf("BMS receive failure codes failed\n");
 8001b80:	480b      	ldr	r0, [pc, #44]	@ (8001bb0 <DalyBMS_Get_Failure_Codes+0xf0>)
 8001b82:	f000 f91d 	bl	8001dc0 <Debug_Printf>
			return false;  // Receive error
 8001b86:	2300      	movs	r3, #0
 8001b88:	e003      	b.n	8001b92 <DalyBMS_Get_Failure_Codes+0xd2>
		}
	}
	else
	{
		Debug_Printf("BMS request failure codes failed\n");
 8001b8a:	480a      	ldr	r0, [pc, #40]	@ (8001bb4 <DalyBMS_Get_Failure_Codes+0xf4>)
 8001b8c:	f000 f918 	bl	8001dc0 <Debug_Printf>
		return false;  // Request failed
 8001b90:	2300      	movs	r3, #0
	}

	return true;
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	37e8      	adds	r7, #232	@ 0xe8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	08009254 	.word	0x08009254
 8001ba0:	08008d44 	.word	0x08008d44
 8001ba4:	08008d70 	.word	0x08008d70
 8001ba8:	20000208 	.word	0x20000208
 8001bac:	08008d88 	.word	0x08008d88
 8001bb0:	08008d90 	.word	0x08008d90
 8001bb4:	08008db4 	.word	0x08008db4

08001bb8 <DalyBMS_Get_Voltage_Thresholds>:

bool DalyBMS_Get_Voltage_Thresholds()
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
	if (DalyBMS_Request(CELL_THRESHOLDS))
 8001bbc:	2059      	movs	r0, #89	@ 0x59
 8001bbe:	f7ff fa57 	bl	8001070 <DalyBMS_Request>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d067      	beq.n	8001c98 <DalyBMS_Get_Voltage_Thresholds+0xe0>
	{
		if (DalyBMS_Recive(1))
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f7ff faad 	bl	8001128 <DalyBMS_Recive>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d05c      	beq.n	8001c8e <DalyBMS_Get_Voltage_Thresholds+0xd6>
		{
			Debug_Printf("BMS received cell thresholds successfully\n");
 8001bd4:	4833      	ldr	r0, [pc, #204]	@ (8001ca4 <DalyBMS_Get_Voltage_Thresholds+0xec>)
 8001bd6:	f000 f8f3 	bl	8001dc0 <Debug_Printf>
			bms_data.max_cell_threshold_1 = ((float)((_frame_buff[0][4] << 8) | _frame_buff[0][5]));
 8001bda:	4b33      	ldr	r3, [pc, #204]	@ (8001ca8 <DalyBMS_Get_Voltage_Thresholds+0xf0>)
 8001bdc:	791b      	ldrb	r3, [r3, #4]
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	4a31      	ldr	r2, [pc, #196]	@ (8001ca8 <DalyBMS_Get_Voltage_Thresholds+0xf0>)
 8001be2:	7952      	ldrb	r2, [r2, #5]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff f808 	bl	8000bfc <__aeabi_i2f>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4a2f      	ldr	r2, [pc, #188]	@ (8001cac <DalyBMS_Get_Voltage_Thresholds+0xf4>)
 8001bf0:	6013      	str	r3, [r2, #0]
			bms_data.max_cell_threshold_2 = ((float)((_frame_buff[0][6] << 8) | _frame_buff[0][7]));
 8001bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca8 <DalyBMS_Get_Voltage_Thresholds+0xf0>)
 8001bf4:	799b      	ldrb	r3, [r3, #6]
 8001bf6:	021b      	lsls	r3, r3, #8
 8001bf8:	4a2b      	ldr	r2, [pc, #172]	@ (8001ca8 <DalyBMS_Get_Voltage_Thresholds+0xf0>)
 8001bfa:	79d2      	ldrb	r2, [r2, #7]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fffc 	bl	8000bfc <__aeabi_i2f>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4a29      	ldr	r2, [pc, #164]	@ (8001cac <DalyBMS_Get_Voltage_Thresholds+0xf4>)
 8001c08:	6093      	str	r3, [r2, #8]
			bms_data.min_cell_threshold_1 = ((float)((_frame_buff[0][8] << 8) | _frame_buff[0][9]));
 8001c0a:	4b27      	ldr	r3, [pc, #156]	@ (8001ca8 <DalyBMS_Get_Voltage_Thresholds+0xf0>)
 8001c0c:	7a1b      	ldrb	r3, [r3, #8]
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	4a25      	ldr	r2, [pc, #148]	@ (8001ca8 <DalyBMS_Get_Voltage_Thresholds+0xf0>)
 8001c12:	7a52      	ldrb	r2, [r2, #9]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fff0 	bl	8000bfc <__aeabi_i2f>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4a23      	ldr	r2, [pc, #140]	@ (8001cac <DalyBMS_Get_Voltage_Thresholds+0xf4>)
 8001c20:	6053      	str	r3, [r2, #4]
			bms_data.min_cell_threshold_2 = ((float)((_frame_buff[0][10] << 8) | _frame_buff[0][11]));
 8001c22:	4b21      	ldr	r3, [pc, #132]	@ (8001ca8 <DalyBMS_Get_Voltage_Thresholds+0xf0>)
 8001c24:	7a9b      	ldrb	r3, [r3, #10]
 8001c26:	021b      	lsls	r3, r3, #8
 8001c28:	4a1f      	ldr	r2, [pc, #124]	@ (8001ca8 <DalyBMS_Get_Voltage_Thresholds+0xf0>)
 8001c2a:	7ad2      	ldrb	r2, [r2, #11]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe ffe4 	bl	8000bfc <__aeabi_i2f>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4a1d      	ldr	r2, [pc, #116]	@ (8001cac <DalyBMS_Get_Voltage_Thresholds+0xf4>)
 8001c38:	60d3      	str	r3, [r2, #12]
			Debug_Printf("<BMS> - Max Cell Threshold 1: %.2f V\n", bms_data.max_cell_threshold_1);
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cac <DalyBMS_Get_Voltage_Thresholds+0xf4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fbf2 	bl	8000428 <__aeabi_f2d>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4819      	ldr	r0, [pc, #100]	@ (8001cb0 <DalyBMS_Get_Voltage_Thresholds+0xf8>)
 8001c4a:	f000 f8b9 	bl	8001dc0 <Debug_Printf>
			Debug_Printf("<BMS> - Max Cell Threshold 2: %.2f V\n", bms_data.max_cell_threshold_2);
 8001c4e:	4b17      	ldr	r3, [pc, #92]	@ (8001cac <DalyBMS_Get_Voltage_Thresholds+0xf4>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fbe8 	bl	8000428 <__aeabi_f2d>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4815      	ldr	r0, [pc, #84]	@ (8001cb4 <DalyBMS_Get_Voltage_Thresholds+0xfc>)
 8001c5e:	f000 f8af 	bl	8001dc0 <Debug_Printf>
			Debug_Printf("<BMS> - Min Cell Threshold 1: %.2f V\n", bms_data.min_cell_threshold_1);
 8001c62:	4b12      	ldr	r3, [pc, #72]	@ (8001cac <DalyBMS_Get_Voltage_Thresholds+0xf4>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fbde 	bl	8000428 <__aeabi_f2d>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4811      	ldr	r0, [pc, #68]	@ (8001cb8 <DalyBMS_Get_Voltage_Thresholds+0x100>)
 8001c72:	f000 f8a5 	bl	8001dc0 <Debug_Printf>
			Debug_Printf("<BMS> - Min Cell Threshold 2: %.2f V\n", bms_data.min_cell_threshold_2);
 8001c76:	4b0d      	ldr	r3, [pc, #52]	@ (8001cac <DalyBMS_Get_Voltage_Thresholds+0xf4>)
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fbd4 	bl	8000428 <__aeabi_f2d>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	480d      	ldr	r0, [pc, #52]	@ (8001cbc <DalyBMS_Get_Voltage_Thresholds+0x104>)
 8001c86:	f000 f89b 	bl	8001dc0 <Debug_Printf>
			return true;  // Request successful
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e008      	b.n	8001ca0 <DalyBMS_Get_Voltage_Thresholds+0xe8>
		}
		else
		{
			Debug_Printf("BMS receive cell thresholds failed\n");
 8001c8e:	480c      	ldr	r0, [pc, #48]	@ (8001cc0 <DalyBMS_Get_Voltage_Thresholds+0x108>)
 8001c90:	f000 f896 	bl	8001dc0 <Debug_Printf>
			return false;  // Receive error
 8001c94:	2300      	movs	r3, #0
 8001c96:	e003      	b.n	8001ca0 <DalyBMS_Get_Voltage_Thresholds+0xe8>
		}
	}
	else
	{
		Debug_Printf("BMS request cell thresholds failed\n");
 8001c98:	480a      	ldr	r0, [pc, #40]	@ (8001cc4 <DalyBMS_Get_Voltage_Thresholds+0x10c>)
 8001c9a:	f000 f891 	bl	8001dc0 <Debug_Printf>
		return false;  // Request failed
 8001c9e:	2300      	movs	r3, #0
	}

	return true;
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	08009334 	.word	0x08009334
 8001ca8:	20000208 	.word	0x20000208
 8001cac:	20000344 	.word	0x20000344
 8001cb0:	08009360 	.word	0x08009360
 8001cb4:	08009388 	.word	0x08009388
 8001cb8:	080093b0 	.word	0x080093b0
 8001cbc:	080093d8 	.word	0x080093d8
 8001cc0:	08009400 	.word	0x08009400
 8001cc4:	08009424 	.word	0x08009424

08001cc8 <DalyBMS_Get_Pack_Thresholds>:

bool DalyBMS_Get_Pack_Thresholds()
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
	if (DalyBMS_Request(PACK_THRESHOLDS))
 8001ccc:	205a      	movs	r0, #90	@ 0x5a
 8001cce:	f7ff f9cf 	bl	8001070 <DalyBMS_Request>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d03f      	beq.n	8001d58 <DalyBMS_Get_Pack_Thresholds+0x90>
	{
		if (DalyBMS_Recive(1))
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f7ff fa25 	bl	8001128 <DalyBMS_Recive>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d034      	beq.n	8001d4e <DalyBMS_Get_Pack_Thresholds+0x86>
		{
			Debug_Printf("BMS received pack thresholds successfully\n");
 8001ce4:	481f      	ldr	r0, [pc, #124]	@ (8001d64 <DalyBMS_Get_Pack_Thresholds+0x9c>)
 8001ce6:	f000 f86b 	bl	8001dc0 <Debug_Printf>
			bms_data.max_pack_threshold_1 = ((float)((_frame_buff[0][4] << 8) | _frame_buff[0][5]));
 8001cea:	4b1f      	ldr	r3, [pc, #124]	@ (8001d68 <DalyBMS_Get_Pack_Thresholds+0xa0>)
 8001cec:	791b      	ldrb	r3, [r3, #4]
 8001cee:	021b      	lsls	r3, r3, #8
 8001cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8001d68 <DalyBMS_Get_Pack_Thresholds+0xa0>)
 8001cf2:	7952      	ldrb	r2, [r2, #5]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe ff80 	bl	8000bfc <__aeabi_i2f>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8001d6c <DalyBMS_Get_Pack_Thresholds+0xa4>)
 8001d00:	6113      	str	r3, [r2, #16]
			bms_data.max_pack_threshold_2 = ((float)((_frame_buff[0][6] << 8) | _frame_buff[0][7]));
 8001d02:	4b19      	ldr	r3, [pc, #100]	@ (8001d68 <DalyBMS_Get_Pack_Thresholds+0xa0>)
 8001d04:	799b      	ldrb	r3, [r3, #6]
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	4a17      	ldr	r2, [pc, #92]	@ (8001d68 <DalyBMS_Get_Pack_Thresholds+0xa0>)
 8001d0a:	79d2      	ldrb	r2, [r2, #7]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe ff74 	bl	8000bfc <__aeabi_i2f>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4a15      	ldr	r2, [pc, #84]	@ (8001d6c <DalyBMS_Get_Pack_Thresholds+0xa4>)
 8001d18:	6193      	str	r3, [r2, #24]
			bms_data.min_pack_threshold_1 = ((float)((_frame_buff[0][8] << 8) | _frame_buff[0][9]));
 8001d1a:	4b13      	ldr	r3, [pc, #76]	@ (8001d68 <DalyBMS_Get_Pack_Thresholds+0xa0>)
 8001d1c:	7a1b      	ldrb	r3, [r3, #8]
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	4a11      	ldr	r2, [pc, #68]	@ (8001d68 <DalyBMS_Get_Pack_Thresholds+0xa0>)
 8001d22:	7a52      	ldrb	r2, [r2, #9]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe ff68 	bl	8000bfc <__aeabi_i2f>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4a0f      	ldr	r2, [pc, #60]	@ (8001d6c <DalyBMS_Get_Pack_Thresholds+0xa4>)
 8001d30:	6153      	str	r3, [r2, #20]
			bms_data.min_pack_threshold_2 = ((float)((_frame_buff[0][10] << 8) | _frame_buff[0][11]));
 8001d32:	4b0d      	ldr	r3, [pc, #52]	@ (8001d68 <DalyBMS_Get_Pack_Thresholds+0xa0>)
 8001d34:	7a9b      	ldrb	r3, [r3, #10]
 8001d36:	021b      	lsls	r3, r3, #8
 8001d38:	4a0b      	ldr	r2, [pc, #44]	@ (8001d68 <DalyBMS_Get_Pack_Thresholds+0xa0>)
 8001d3a:	7ad2      	ldrb	r2, [r2, #11]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe ff5c 	bl	8000bfc <__aeabi_i2f>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4a09      	ldr	r2, [pc, #36]	@ (8001d6c <DalyBMS_Get_Pack_Thresholds+0xa4>)
 8001d48:	61d3      	str	r3, [r2, #28]
//			Debug_Printf("<BMS> - Max Pack Threshold 1: %.2f V\n", bms_data.max_pack_threshold_1);
//			Debug_Printf("<BMS> - Max Pack Threshold 2: %.2f V\n", bms_data.max_pack_threshold_2);
//			Debug_Printf("<BMS> - Min Pack Threshold 1: %.2f V\n", bms_data.min_pack_threshold_1);
//			Debug_Printf("<BMS> - Min Pack Threshold 2: %.2f V\n", bms_data.min_pack_threshold_2);
			return true;  // Request successful
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e008      	b.n	8001d60 <DalyBMS_Get_Pack_Thresholds+0x98>
		}
		else
		{
			Debug_Printf("BMS receive pack thresholds failed\n");
 8001d4e:	4808      	ldr	r0, [pc, #32]	@ (8001d70 <DalyBMS_Get_Pack_Thresholds+0xa8>)
 8001d50:	f000 f836 	bl	8001dc0 <Debug_Printf>
			return false;  // Receive error
 8001d54:	2300      	movs	r3, #0
 8001d56:	e003      	b.n	8001d60 <DalyBMS_Get_Pack_Thresholds+0x98>
		}
	}
	else
	{
		Debug_Printf("BMS request pack thresholds failed\n");
 8001d58:	4806      	ldr	r0, [pc, #24]	@ (8001d74 <DalyBMS_Get_Pack_Thresholds+0xac>)
 8001d5a:	f000 f831 	bl	8001dc0 <Debug_Printf>
		return false;  // Request failed
 8001d5e:	2300      	movs	r3, #0
	}

	return true;
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	08009448 	.word	0x08009448
 8001d68:	20000208 	.word	0x20000208
 8001d6c:	20000344 	.word	0x20000344
 8001d70:	08009474 	.word	0x08009474
 8001d74:	08009498 	.word	0x08009498

08001d78 <DalyBMS_On_Request_Done>:
	}
	return true;
}

void DalyBMS_On_Request_Done(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	// send json data
	Debug_Printf("debug: on callback.\n");
 8001d7c:	4802      	ldr	r0, [pc, #8]	@ (8001d88 <DalyBMS_On_Request_Done+0x10>)
 8001d7e:	f000 f81f 	bl	8001dc0 <Debug_Printf>
//			bms_data.bms_life_cycle,
//			bms_data.temperature_average,
//			bms_data.temperature_c[0],
//	        bms_data.charge_discharge_status
//	    );
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	08009570 	.word	0x08009570

08001d8c <DalyBMS_Clear_Get>:
	return (checksum == _rx_buffer[FRAME_SIZE - 1]);
}


void DalyBMS_Clear_Get()
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
    bms_data.charge_discharge_status = OFFLINE;
 8001d90:	4b03      	ldr	r3, [pc, #12]	@ (8001da0 <DalyBMS_Clear_Get+0x14>)
 8001d92:	2203      	movs	r2, #3
 8001d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	20000344 	.word	0x20000344

08001da4 <DalyBMS_Set_Callback>:

void DalyBMS_Set_Callback(DalyBMS_Callback_t callback) {
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
    _bms_request_callback = callback;
 8001dac:	4a03      	ldr	r2, [pc, #12]	@ (8001dbc <DalyBMS_Set_Callback+0x18>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6013      	str	r3, [r2, #0]
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	200001f4 	.word	0x200001f4

08001dc0 <Debug_Printf>:
#include "debugger.h"
#include <stdarg.h>
#include <stdio.h>

void Debug_Printf(const char *format, ...)
{
 8001dc0:	b40f      	push	{r0, r1, r2, r3}
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b0a2      	sub	sp, #136	@ 0x88
 8001dc6:	af00      	add	r7, sp, #0
    char buffer[128];
    va_list args;
    va_start(args, format);
 8001dc8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001dcc:	603b      	str	r3, [r7, #0]
    int len = vsnprintf(buffer, sizeof(buffer), format, args);
 8001dce:	1d38      	adds	r0, r7, #4
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001dd6:	2180      	movs	r1, #128	@ 0x80
 8001dd8:	f004 fb94 	bl	8006504 <vsniprintf>
 8001ddc:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    va_end(args);

    if (len < 0) {
 8001de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	db12      	blt.n	8001e0e <Debug_Printf+0x4e>
        return;
    }

    if (len >= sizeof(buffer)) {
 8001de8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001dec:	2b7f      	cmp	r3, #127	@ 0x7f
 8001dee:	d905      	bls.n	8001dfc <Debug_Printf+0x3c>
        buffer[sizeof(buffer) - 1] = '\0';
 8001df0:	2300      	movs	r3, #0
 8001df2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
        len = sizeof(buffer) - 1;
 8001df6:	237f      	movs	r3, #127	@ 0x7f
 8001df8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 100);
 8001dfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	1d39      	adds	r1, r7, #4
 8001e04:	2364      	movs	r3, #100	@ 0x64
 8001e06:	4805      	ldr	r0, [pc, #20]	@ (8001e1c <Debug_Printf+0x5c>)
 8001e08:	f001 fd7a 	bl	8003900 <HAL_UART_Transmit>
 8001e0c:	e000      	b.n	8001e10 <Debug_Printf+0x50>
        return;
 8001e0e:	bf00      	nop
}
 8001e10:	3788      	adds	r7, #136	@ 0x88
 8001e12:	46bd      	mov	sp, r7
 8001e14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e18:	b004      	add	sp, #16
 8001e1a:	4770      	bx	lr
 8001e1c:	20000730 	.word	0x20000730

08001e20 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4a06      	ldr	r2, [pc, #24]	@ (8001e48 <vApplicationGetIdleTaskMemory+0x28>)
 8001e30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	4a05      	ldr	r2, [pc, #20]	@ (8001e4c <vApplicationGetIdleTaskMemory+0x2c>)
 8001e36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2280      	movs	r2, #128	@ 0x80
 8001e3c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001e3e:	bf00      	nop
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	20000494 	.word	0x20000494
 8001e4c:	200004e8 	.word	0x200004e8

08001e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e50:	b5b0      	push	{r4, r5, r7, lr}
 8001e52:	b08e      	sub	sp, #56	@ 0x38
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e56:	f000 fcf7 	bl	8002848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e5a:	f000 f83d 	bl	8001ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e5e:	f000 f8ff 	bl	8002060 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001e62:	f000 f87f 	bl	8001f64 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001e66:	f000 f8a7 	bl	8001fb8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001e6a:	f000 f8cf 	bl	800200c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  DalyBMS_Set_Callback(DalyBMS_On_Request_Done);
 8001e6e:	4815      	ldr	r0, [pc, #84]	@ (8001ec4 <main+0x74>)
 8001e70:	f7ff ff98 	bl	8001da4 <DalyBMS_Set_Callback>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001e74:	4b14      	ldr	r3, [pc, #80]	@ (8001ec8 <main+0x78>)
 8001e76:	f107 041c 	add.w	r4, r7, #28
 8001e7a:	461d      	mov	r5, r3
 8001e7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001e88:	f107 031c 	add.w	r3, r7, #28
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f002 fbb0 	bl	80045f4 <osThreadCreate>
 8001e94:	4603      	mov	r3, r0
 8001e96:	4a0d      	ldr	r2, [pc, #52]	@ (8001ecc <main+0x7c>)
 8001e98:	6013      	str	r3, [r2, #0]

  /* definition and creation of bmsTask */
  osThreadDef(bmsTask, StartBMSTask, osPriorityNormal, 0, 128);
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed0 <main+0x80>)
 8001e9c:	463c      	mov	r4, r7
 8001e9e:	461d      	mov	r5, r3
 8001ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ea4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ea8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  bmsTaskHandle = osThreadCreate(osThread(bmsTask), NULL);
 8001eac:	463b      	mov	r3, r7
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f002 fb9f 	bl	80045f4 <osThreadCreate>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	4a06      	ldr	r2, [pc, #24]	@ (8001ed4 <main+0x84>)
 8001eba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001ebc:	f002 fb93 	bl	80045e6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001ec0:	bf00      	nop
 8001ec2:	e7fd      	b.n	8001ec0 <main+0x70>
 8001ec4:	08001d79 	.word	0x08001d79
 8001ec8:	08009594 	.word	0x08009594
 8001ecc:	200007c0 	.word	0x200007c0
 8001ed0:	080095b8 	.word	0x080095b8
 8001ed4:	200007c4 	.word	0x200007c4

08001ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b090      	sub	sp, #64	@ 0x40
 8001edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ede:	f107 0318 	add.w	r3, r7, #24
 8001ee2:	2228      	movs	r2, #40	@ 0x28
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f004 fb1a 	bl	8006520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	609a      	str	r2, [r3, #8]
 8001ef6:	60da      	str	r2, [r3, #12]
 8001ef8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001efa:	2301      	movs	r3, #1
 8001efc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001efe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f04:	2300      	movs	r3, #0
 8001f06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f16:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f1c:	f107 0318 	add.w	r3, r7, #24
 8001f20:	4618      	mov	r0, r3
 8001f22:	f001 f88d 	bl	8003040 <HAL_RCC_OscConfig>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001f2c:	f000 fa32 	bl	8002394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f30:	230f      	movs	r3, #15
 8001f32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f34:	2302      	movs	r3, #2
 8001f36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	2102      	movs	r1, #2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f001 fafa 	bl	8003544 <HAL_RCC_ClockConfig>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001f56:	f000 fa1d 	bl	8002394 <Error_Handler>
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	3740      	adds	r7, #64	@ 0x40
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f68:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <MX_USART1_UART_Init+0x4c>)
 8001f6a:	4a12      	ldr	r2, [pc, #72]	@ (8001fb4 <MX_USART1_UART_Init+0x50>)
 8001f6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001f6e:	4b10      	ldr	r3, [pc, #64]	@ (8001fb0 <MX_USART1_UART_Init+0x4c>)
 8001f70:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <MX_USART1_UART_Init+0x4c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb0 <MX_USART1_UART_Init+0x4c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb0 <MX_USART1_UART_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f88:	4b09      	ldr	r3, [pc, #36]	@ (8001fb0 <MX_USART1_UART_Init+0x4c>)
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	@ (8001fb0 <MX_USART1_UART_Init+0x4c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f94:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <MX_USART1_UART_Init+0x4c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f9a:	4805      	ldr	r0, [pc, #20]	@ (8001fb0 <MX_USART1_UART_Init+0x4c>)
 8001f9c:	f001 fc60 	bl	8003860 <HAL_UART_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001fa6:	f000 f9f5 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200006e8 	.word	0x200006e8
 8001fb4:	40013800 	.word	0x40013800

08001fb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	@ (8002004 <MX_USART2_UART_Init+0x4c>)
 8001fbe:	4a12      	ldr	r2, [pc, #72]	@ (8002008 <MX_USART2_UART_Init+0x50>)
 8001fc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fc2:	4b10      	ldr	r3, [pc, #64]	@ (8002004 <MX_USART2_UART_Init+0x4c>)
 8001fc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <MX_USART2_UART_Init+0x4c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002004 <MX_USART2_UART_Init+0x4c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8002004 <MX_USART2_UART_Init+0x4c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fdc:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <MX_USART2_UART_Init+0x4c>)
 8001fde:	220c      	movs	r2, #12
 8001fe0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe2:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <MX_USART2_UART_Init+0x4c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <MX_USART2_UART_Init+0x4c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fee:	4805      	ldr	r0, [pc, #20]	@ (8002004 <MX_USART2_UART_Init+0x4c>)
 8001ff0:	f001 fc36 	bl	8003860 <HAL_UART_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ffa:	f000 f9cb 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000730 	.word	0x20000730
 8002008:	40004400 	.word	0x40004400

0800200c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002010:	4b11      	ldr	r3, [pc, #68]	@ (8002058 <MX_USART3_UART_Init+0x4c>)
 8002012:	4a12      	ldr	r2, [pc, #72]	@ (800205c <MX_USART3_UART_Init+0x50>)
 8002014:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002016:	4b10      	ldr	r3, [pc, #64]	@ (8002058 <MX_USART3_UART_Init+0x4c>)
 8002018:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800201c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800201e:	4b0e      	ldr	r3, [pc, #56]	@ (8002058 <MX_USART3_UART_Init+0x4c>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002024:	4b0c      	ldr	r3, [pc, #48]	@ (8002058 <MX_USART3_UART_Init+0x4c>)
 8002026:	2200      	movs	r2, #0
 8002028:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800202a:	4b0b      	ldr	r3, [pc, #44]	@ (8002058 <MX_USART3_UART_Init+0x4c>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002030:	4b09      	ldr	r3, [pc, #36]	@ (8002058 <MX_USART3_UART_Init+0x4c>)
 8002032:	220c      	movs	r2, #12
 8002034:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002036:	4b08      	ldr	r3, [pc, #32]	@ (8002058 <MX_USART3_UART_Init+0x4c>)
 8002038:	2200      	movs	r2, #0
 800203a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800203c:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <MX_USART3_UART_Init+0x4c>)
 800203e:	2200      	movs	r2, #0
 8002040:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002042:	4805      	ldr	r0, [pc, #20]	@ (8002058 <MX_USART3_UART_Init+0x4c>)
 8002044:	f001 fc0c 	bl	8003860 <HAL_UART_Init>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800204e:	f000 f9a1 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000778 	.word	0x20000778
 800205c:	40004800 	.word	0x40004800

08002060 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002066:	f107 0310 	add.w	r3, r7, #16
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002074:	4b24      	ldr	r3, [pc, #144]	@ (8002108 <MX_GPIO_Init+0xa8>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	4a23      	ldr	r2, [pc, #140]	@ (8002108 <MX_GPIO_Init+0xa8>)
 800207a:	f043 0310 	orr.w	r3, r3, #16
 800207e:	6193      	str	r3, [r2, #24]
 8002080:	4b21      	ldr	r3, [pc, #132]	@ (8002108 <MX_GPIO_Init+0xa8>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800208c:	4b1e      	ldr	r3, [pc, #120]	@ (8002108 <MX_GPIO_Init+0xa8>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	4a1d      	ldr	r2, [pc, #116]	@ (8002108 <MX_GPIO_Init+0xa8>)
 8002092:	f043 0320 	orr.w	r3, r3, #32
 8002096:	6193      	str	r3, [r2, #24]
 8002098:	4b1b      	ldr	r3, [pc, #108]	@ (8002108 <MX_GPIO_Init+0xa8>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f003 0320 	and.w	r3, r3, #32
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a4:	4b18      	ldr	r3, [pc, #96]	@ (8002108 <MX_GPIO_Init+0xa8>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	4a17      	ldr	r2, [pc, #92]	@ (8002108 <MX_GPIO_Init+0xa8>)
 80020aa:	f043 0304 	orr.w	r3, r3, #4
 80020ae:	6193      	str	r3, [r2, #24]
 80020b0:	4b15      	ldr	r3, [pc, #84]	@ (8002108 <MX_GPIO_Init+0xa8>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020bc:	4b12      	ldr	r3, [pc, #72]	@ (8002108 <MX_GPIO_Init+0xa8>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	4a11      	ldr	r2, [pc, #68]	@ (8002108 <MX_GPIO_Init+0xa8>)
 80020c2:	f043 0308 	orr.w	r3, r3, #8
 80020c6:	6193      	str	r3, [r2, #24]
 80020c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002108 <MX_GPIO_Init+0xa8>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	603b      	str	r3, [r7, #0]
 80020d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80020d4:	2200      	movs	r2, #0
 80020d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020da:	480c      	ldr	r0, [pc, #48]	@ (800210c <MX_GPIO_Init+0xac>)
 80020dc:	f000 ff7e 	bl	8002fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80020e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e6:	2301      	movs	r3, #1
 80020e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2302      	movs	r3, #2
 80020f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80020f2:	f107 0310 	add.w	r3, r7, #16
 80020f6:	4619      	mov	r1, r3
 80020f8:	4804      	ldr	r0, [pc, #16]	@ (800210c <MX_GPIO_Init+0xac>)
 80020fa:	f000 fdeb 	bl	8002cd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80020fe:	bf00      	nop
 8002100:	3720      	adds	r7, #32
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000
 800210c:	40011000 	.word	0x40011000

08002110 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1000);
 8002118:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800211c:	f002 fab6 	bl	800468c <osDelay>
 8002120:	e7fa      	b.n	8002118 <StartDefaultTask+0x8>
	...

08002124 <StartBMSTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBMSTask */
void StartBMSTask(void const * argument)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBMSTask */
	memset(_tx_buffer, 0x00, FRAME_SIZE);
 800212c:	220d      	movs	r2, #13
 800212e:	2100      	movs	r1, #0
 8002130:	4890      	ldr	r0, [pc, #576]	@ (8002374 <StartBMSTask+0x250>)
 8002132:	f004 f9f5 	bl	8006520 <memset>
	DalyBMS_Clear_Get(&bms_data);
 8002136:	4890      	ldr	r0, [pc, #576]	@ (8002378 <StartBMSTask+0x254>)
 8002138:	f7ff fe28 	bl	8001d8c <DalyBMS_Clear_Get>
	/* Infinite loop */
	for(;;)
	{
		//Debug_Printf("BMS request counter: %d\n", _request_counter);
		switch (_request_counter)
 800213c:	4b8f      	ldr	r3, [pc, #572]	@ (800237c <StartBMSTask+0x258>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b0a      	cmp	r3, #10
 8002142:	f200 810c 	bhi.w	800235e <StartBMSTask+0x23a>
 8002146:	a201      	add	r2, pc, #4	@ (adr r2, 800214c <StartBMSTask+0x28>)
 8002148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214c:	08002179 	.word	0x08002179
 8002150:	080021e7 	.word	0x080021e7
 8002154:	08002203 	.word	0x08002203
 8002158:	0800221f 	.word	0x0800221f
 800215c:	0800223b 	.word	0x0800223b
 8002160:	08002257 	.word	0x08002257
 8002164:	08002273 	.word	0x08002273
 8002168:	0800228f 	.word	0x0800228f
 800216c:	080022ab 	.word	0x080022ab
 8002170:	080022e3 	.word	0x080022e3
 8002174:	0800231b 	.word	0x0800231b
	    {
	  		case 0: // Request pack data & connectivity status
	  			if (DalyBMS_Get_Pack_Data())
 8002178:	f7ff f8a6 	bl	80012c8 <DalyBMS_Get_Pack_Data>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d010      	beq.n	80021a4 <StartBMSTask+0x80>
	  			{
	  				Debug_Printf("BMS request pack data successful\n");
 8002182:	487f      	ldr	r0, [pc, #508]	@ (8002380 <StartBMSTask+0x25c>)
 8002184:	f7ff fe1c 	bl	8001dc0 <Debug_Printf>
	  				bms_data.connection_status = true;
 8002188:	4b7b      	ldr	r3, [pc, #492]	@ (8002378 <StartBMSTask+0x254>)
 800218a:	2201      	movs	r2, #1
 800218c:	f883 214d 	strb.w	r2, [r3, #333]	@ 0x14d
	  				_error_counter = 0; // Reset error counter on successful data retrieval
 8002190:	4b7c      	ldr	r3, [pc, #496]	@ (8002384 <StartBMSTask+0x260>)
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
	  				_request_counter++;
 8002196:	4b79      	ldr	r3, [pc, #484]	@ (800237c <StartBMSTask+0x258>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	3301      	adds	r3, #1
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4b77      	ldr	r3, [pc, #476]	@ (800237c <StartBMSTask+0x258>)
 80021a0:	701a      	strb	r2, [r3, #0]
	  					_error_counter = 0; // Reset error counter after max errors
	  					if (_bms_request_callback) _bms_request_callback();
	  				}
	  			}
	  			//Debug_Printf("BMS request counter: %d\n", _request_counter);
	  			break;
 80021a2:	e0de      	b.n	8002362 <StartBMSTask+0x23e>
	  				Debug_Printf("BMS request pack data failed\n");
 80021a4:	4878      	ldr	r0, [pc, #480]	@ (8002388 <StartBMSTask+0x264>)
 80021a6:	f7ff fe0b 	bl	8001dc0 <Debug_Printf>
	  				_request_counter = 0; // Reset request counter on failure
 80021aa:	4b74      	ldr	r3, [pc, #464]	@ (800237c <StartBMSTask+0x258>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
	  				if (_error_counter < MAX_ERROR) _error_counter++;
 80021b0:	4b74      	ldr	r3, [pc, #464]	@ (8002384 <StartBMSTask+0x260>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b09      	cmp	r3, #9
 80021b6:	d806      	bhi.n	80021c6 <StartBMSTask+0xa2>
 80021b8:	4b72      	ldr	r3, [pc, #456]	@ (8002384 <StartBMSTask+0x260>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	3301      	adds	r3, #1
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	4b70      	ldr	r3, [pc, #448]	@ (8002384 <StartBMSTask+0x260>)
 80021c2:	701a      	strb	r2, [r3, #0]
	  			break;
 80021c4:	e0cd      	b.n	8002362 <StartBMSTask+0x23e>
	  					bms_data.connection_status = false; // Set connection status to false after max errors
 80021c6:	4b6c      	ldr	r3, [pc, #432]	@ (8002378 <StartBMSTask+0x254>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 214d 	strb.w	r2, [r3, #333]	@ 0x14d
	  					_error_counter = 0; // Reset error counter after max errors
 80021ce:	4b6d      	ldr	r3, [pc, #436]	@ (8002384 <StartBMSTask+0x260>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	701a      	strb	r2, [r3, #0]
	  					if (_bms_request_callback) _bms_request_callback();
 80021d4:	4b6d      	ldr	r3, [pc, #436]	@ (800238c <StartBMSTask+0x268>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80c2 	beq.w	8002362 <StartBMSTask+0x23e>
 80021de:	4b6b      	ldr	r3, [pc, #428]	@ (800238c <StartBMSTask+0x268>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4798      	blx	r3
	  			break;
 80021e4:	e0bd      	b.n	8002362 <StartBMSTask+0x23e>
	  		case 1: // Request min/max cell voltage
	  			_request_counter = DalyBMS_Get_Min_Max_Cell_Voltage() ? (_request_counter + 1) : 0;
 80021e6:	f7ff f913 	bl	8001410 <DalyBMS_Get_Min_Max_Cell_Voltage>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d004      	beq.n	80021fa <StartBMSTask+0xd6>
 80021f0:	4b62      	ldr	r3, [pc, #392]	@ (800237c <StartBMSTask+0x258>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	3301      	adds	r3, #1
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	e000      	b.n	80021fc <StartBMSTask+0xd8>
 80021fa:	2300      	movs	r3, #0
 80021fc:	4a5f      	ldr	r2, [pc, #380]	@ (800237c <StartBMSTask+0x258>)
 80021fe:	7013      	strb	r3, [r2, #0]
	  			//Debug_Printf("BMS request counter: %d\n", _request_counter);
	  			break;
 8002200:	e0b4      	b.n	800236c <StartBMSTask+0x248>
	  		case 2: // Request min/max temperature
	  			_request_counter = DalyBMS_Get_Pack_Temperature() ? (_request_counter + 1) : 0;
 8002202:	f7ff f96f 	bl	80014e4 <DalyBMS_Get_Pack_Temperature>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d004      	beq.n	8002216 <StartBMSTask+0xf2>
 800220c:	4b5b      	ldr	r3, [pc, #364]	@ (800237c <StartBMSTask+0x258>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	3301      	adds	r3, #1
 8002212:	b2db      	uxtb	r3, r3
 8002214:	e000      	b.n	8002218 <StartBMSTask+0xf4>
 8002216:	2300      	movs	r3, #0
 8002218:	4a58      	ldr	r2, [pc, #352]	@ (800237c <StartBMSTask+0x258>)
 800221a:	7013      	strb	r3, [r2, #0]
	  			//Debug_Printf("BMS request counter: %d\n", _request_counter);
	  			break;
 800221c:	e0a6      	b.n	800236c <StartBMSTask+0x248>
	  		case 3: // Request charge/discharge MOS status
	  			_request_counter = DalyBMS_Get_Charge_Discharge_Status() ? (_request_counter + 1) : 0;
 800221e:	f7ff f99b 	bl	8001558 <DalyBMS_Get_Charge_Discharge_Status>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d004      	beq.n	8002232 <StartBMSTask+0x10e>
 8002228:	4b54      	ldr	r3, [pc, #336]	@ (800237c <StartBMSTask+0x258>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	3301      	adds	r3, #1
 800222e:	b2db      	uxtb	r3, r3
 8002230:	e000      	b.n	8002234 <StartBMSTask+0x110>
 8002232:	2300      	movs	r3, #0
 8002234:	4a51      	ldr	r2, [pc, #324]	@ (800237c <StartBMSTask+0x258>)
 8002236:	7013      	strb	r3, [r2, #0]
	  			//Debug_Printf("BMS request counter: %d\n", _request_counter);
	  			break;
 8002238:	e098      	b.n	800236c <StartBMSTask+0x248>
	  		case 4: // Request status info
	  			//Debug_Printf("In case 4!\n");
	  			_request_counter = DalyBMS_Get_Status_Info() ? (_request_counter + 1) : 0;
 800223a:	f7ff fa31 	bl	80016a0 <DalyBMS_Get_Status_Info>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d004      	beq.n	800224e <StartBMSTask+0x12a>
 8002244:	4b4d      	ldr	r3, [pc, #308]	@ (800237c <StartBMSTask+0x258>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	3301      	adds	r3, #1
 800224a:	b2db      	uxtb	r3, r3
 800224c:	e000      	b.n	8002250 <StartBMSTask+0x12c>
 800224e:	2300      	movs	r3, #0
 8002250:	4a4a      	ldr	r2, [pc, #296]	@ (800237c <StartBMSTask+0x258>)
 8002252:	7013      	strb	r3, [r2, #0]
	  			//Debug_Printf("BMS request counter: %d\n", _request_counter);
	  			break;
 8002254:	e08a      	b.n	800236c <StartBMSTask+0x248>
	  		case 5: // Request cell voltages
	  			_request_counter = DalyBMS_Get_Cell_Voltages() ? (_request_counter + 1) : 0;
 8002256:	f7ff faa1 	bl	800179c <DalyBMS_Get_Cell_Voltages>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d004      	beq.n	800226a <StartBMSTask+0x146>
 8002260:	4b46      	ldr	r3, [pc, #280]	@ (800237c <StartBMSTask+0x258>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	3301      	adds	r3, #1
 8002266:	b2db      	uxtb	r3, r3
 8002268:	e000      	b.n	800226c <StartBMSTask+0x148>
 800226a:	2300      	movs	r3, #0
 800226c:	4a43      	ldr	r2, [pc, #268]	@ (800237c <StartBMSTask+0x258>)
 800226e:	7013      	strb	r3, [r2, #0]
	  			//Debug_Printf("BMS request counter: %d\n", _request_counter);
	  			break;
 8002270:	e07c      	b.n	800236c <StartBMSTask+0x248>
	  		case 6: // Request cell temperatures
	  			_request_counter = DalyBMS_Get_Cell_Temperatures() ? (_request_counter + 1) : 0;
 8002272:	f7ff fb45 	bl	8001900 <DalyBMS_Get_Cell_Temperatures>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d004      	beq.n	8002286 <StartBMSTask+0x162>
 800227c:	4b3f      	ldr	r3, [pc, #252]	@ (800237c <StartBMSTask+0x258>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	3301      	adds	r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	e000      	b.n	8002288 <StartBMSTask+0x164>
 8002286:	2300      	movs	r3, #0
 8002288:	4a3c      	ldr	r2, [pc, #240]	@ (800237c <StartBMSTask+0x258>)
 800228a:	7013      	strb	r3, [r2, #0]
	  			//Debug_Printf("BMS request counter: %d\n", _request_counter);
	  			break;
 800228c:	e06e      	b.n	800236c <StartBMSTask+0x248>
	  		case 7: // Request cell balance state
	  			_request_counter = DalyBMS_Get_Cell_Balance_State() ? (_request_counter + 1) : 0;
 800228e:	f7ff fb8f 	bl	80019b0 <DalyBMS_Get_Cell_Balance_State>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d004      	beq.n	80022a2 <StartBMSTask+0x17e>
 8002298:	4b38      	ldr	r3, [pc, #224]	@ (800237c <StartBMSTask+0x258>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	3301      	adds	r3, #1
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	e000      	b.n	80022a4 <StartBMSTask+0x180>
 80022a2:	2300      	movs	r3, #0
 80022a4:	4a35      	ldr	r2, [pc, #212]	@ (800237c <StartBMSTask+0x258>)
 80022a6:	7013      	strb	r3, [r2, #0]
	  			//Debug_Printf("BMS request counter: %d\n", _request_counter);
	  			break;
 80022a8:	e060      	b.n	800236c <StartBMSTask+0x248>
	  		case 8: // Request failure codes
	  			_request_counter = DalyBMS_Get_Failure_Codes() ? (_request_counter + 1) : 0;
 80022aa:	f7ff fc09 	bl	8001ac0 <DalyBMS_Get_Failure_Codes>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d004      	beq.n	80022be <StartBMSTask+0x19a>
 80022b4:	4b31      	ldr	r3, [pc, #196]	@ (800237c <StartBMSTask+0x258>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	3301      	adds	r3, #1
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	e000      	b.n	80022c0 <StartBMSTask+0x19c>
 80022be:	2300      	movs	r3, #0
 80022c0:	4a2e      	ldr	r2, [pc, #184]	@ (800237c <StartBMSTask+0x258>)
 80022c2:	7013      	strb	r3, [r2, #0]
	  			if (_get_static_data) _request_counter = 0; // Reset request counter if static data is requested
 80022c4:	4b32      	ldr	r3, [pc, #200]	@ (8002390 <StartBMSTask+0x26c>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <StartBMSTask+0x1ae>
 80022cc:	4b2b      	ldr	r3, [pc, #172]	@ (800237c <StartBMSTask+0x258>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
	  			if (_bms_request_callback) _bms_request_callback();
 80022d2:	4b2e      	ldr	r3, [pc, #184]	@ (800238c <StartBMSTask+0x268>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d045      	beq.n	8002366 <StartBMSTask+0x242>
 80022da:	4b2c      	ldr	r3, [pc, #176]	@ (800238c <StartBMSTask+0x268>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4798      	blx	r3
	  			break;
 80022e0:	e041      	b.n	8002366 <StartBMSTask+0x242>
	  		case 9: // Request Voltage Thresholds
	  			if (!_get_static_data) _request_counter = DalyBMS_Get_Voltage_Thresholds() ? (_request_counter + 1) : 0;
 80022e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002390 <StartBMSTask+0x26c>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	f083 0301 	eor.w	r3, r3, #1
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00c      	beq.n	800230a <StartBMSTask+0x1e6>
 80022f0:	f7ff fc62 	bl	8001bb8 <DalyBMS_Get_Voltage_Thresholds>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d004      	beq.n	8002304 <StartBMSTask+0x1e0>
 80022fa:	4b20      	ldr	r3, [pc, #128]	@ (800237c <StartBMSTask+0x258>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	3301      	adds	r3, #1
 8002300:	b2db      	uxtb	r3, r3
 8002302:	e000      	b.n	8002306 <StartBMSTask+0x1e2>
 8002304:	2300      	movs	r3, #0
 8002306:	4a1d      	ldr	r2, [pc, #116]	@ (800237c <StartBMSTask+0x258>)
 8002308:	7013      	strb	r3, [r2, #0]
	  			if (_bms_request_callback) _bms_request_callback();
 800230a:	4b20      	ldr	r3, [pc, #128]	@ (800238c <StartBMSTask+0x268>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d02b      	beq.n	800236a <StartBMSTask+0x246>
 8002312:	4b1e      	ldr	r3, [pc, #120]	@ (800238c <StartBMSTask+0x268>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4798      	blx	r3
	  			break;
 8002318:	e027      	b.n	800236a <StartBMSTask+0x246>
	  		case 10: // Request Pack Thresholds
	  			if (!_get_static_data) _request_counter = DalyBMS_Get_Pack_Thresholds() ? (_request_counter + 1) : 0;
 800231a:	4b1d      	ldr	r3, [pc, #116]	@ (8002390 <StartBMSTask+0x26c>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	f083 0301 	eor.w	r3, r3, #1
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00c      	beq.n	8002342 <StartBMSTask+0x21e>
 8002328:	f7ff fcce 	bl	8001cc8 <DalyBMS_Get_Pack_Thresholds>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d004      	beq.n	800233c <StartBMSTask+0x218>
 8002332:	4b12      	ldr	r3, [pc, #72]	@ (800237c <StartBMSTask+0x258>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	3301      	adds	r3, #1
 8002338:	b2db      	uxtb	r3, r3
 800233a:	e000      	b.n	800233e <StartBMSTask+0x21a>
 800233c:	2300      	movs	r3, #0
 800233e:	4a0f      	ldr	r2, [pc, #60]	@ (800237c <StartBMSTask+0x258>)
 8002340:	7013      	strb	r3, [r2, #0]
	  			_request_counter = 0; // Reset request counter after pack thresholds
 8002342:	4b0e      	ldr	r3, [pc, #56]	@ (800237c <StartBMSTask+0x258>)
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
	  			if (_bms_request_callback) _bms_request_callback();
 8002348:	4b10      	ldr	r3, [pc, #64]	@ (800238c <StartBMSTask+0x268>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <StartBMSTask+0x232>
 8002350:	4b0e      	ldr	r3, [pc, #56]	@ (800238c <StartBMSTask+0x268>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4798      	blx	r3
	  			_get_static_data = true;
 8002356:	4b0e      	ldr	r3, [pc, #56]	@ (8002390 <StartBMSTask+0x26c>)
 8002358:	2201      	movs	r2, #1
 800235a:	701a      	strb	r2, [r3, #0]
	  			break;
 800235c:	e006      	b.n	800236c <StartBMSTask+0x248>
	  		default:
	  			break;
 800235e:	bf00      	nop
 8002360:	e004      	b.n	800236c <StartBMSTask+0x248>
	  			break;
 8002362:	bf00      	nop
 8002364:	e002      	b.n	800236c <StartBMSTask+0x248>
	  			break;
 8002366:	bf00      	nop
 8002368:	e000      	b.n	800236c <StartBMSTask+0x248>
	  			break;
 800236a:	bf00      	nop
	    }
    osDelay(150);
 800236c:	2096      	movs	r0, #150	@ 0x96
 800236e:	f002 f98d 	bl	800468c <osDelay>
		switch (_request_counter)
 8002372:	e6e3      	b.n	800213c <StartBMSTask+0x18>
 8002374:	200001f8 	.word	0x200001f8
 8002378:	20000344 	.word	0x20000344
 800237c:	20000341 	.word	0x20000341
 8002380:	080095d4 	.word	0x080095d4
 8002384:	20000340 	.word	0x20000340
 8002388:	080095f8 	.word	0x080095f8
 800238c:	200001f4 	.word	0x200001f4
 8002390:	20000342 	.word	0x20000342

08002394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002398:	b672      	cpsid	i
}
 800239a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  Debug_Printf("ERROR: system halted\n");
 800239c:	4806      	ldr	r0, [pc, #24]	@ (80023b8 <Error_Handler+0x24>)
 800239e:	f7ff fd0f 	bl	8001dc0 <Debug_Printf>
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 80023a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023a6:	4805      	ldr	r0, [pc, #20]	@ (80023bc <Error_Handler+0x28>)
 80023a8:	f000 fe30 	bl	800300c <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80023ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80023b0:	f000 faac 	bl	800290c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 80023b4:	bf00      	nop
 80023b6:	e7f4      	b.n	80023a2 <Error_Handler+0xe>
 80023b8:	08009618 	.word	0x08009618
 80023bc:	40011000 	.word	0x40011000

080023c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023c6:	4b18      	ldr	r3, [pc, #96]	@ (8002428 <HAL_MspInit+0x68>)
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	4a17      	ldr	r2, [pc, #92]	@ (8002428 <HAL_MspInit+0x68>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6193      	str	r3, [r2, #24]
 80023d2:	4b15      	ldr	r3, [pc, #84]	@ (8002428 <HAL_MspInit+0x68>)
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023de:	4b12      	ldr	r3, [pc, #72]	@ (8002428 <HAL_MspInit+0x68>)
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	4a11      	ldr	r2, [pc, #68]	@ (8002428 <HAL_MspInit+0x68>)
 80023e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e8:	61d3      	str	r3, [r2, #28]
 80023ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002428 <HAL_MspInit+0x68>)
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f2:	607b      	str	r3, [r7, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	210f      	movs	r1, #15
 80023fa:	f06f 0001 	mvn.w	r0, #1
 80023fe:	f000 fb80 	bl	8002b02 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002402:	4b0a      	ldr	r3, [pc, #40]	@ (800242c <HAL_MspInit+0x6c>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	4a04      	ldr	r2, [pc, #16]	@ (800242c <HAL_MspInit+0x6c>)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
 800242c:	40010000 	.word	0x40010000

08002430 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08c      	sub	sp, #48	@ 0x30
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 0320 	add.w	r3, r7, #32
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a5f      	ldr	r2, [pc, #380]	@ (80025c8 <HAL_UART_MspInit+0x198>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d13a      	bne.n	80024c6 <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002450:	4b5e      	ldr	r3, [pc, #376]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	4a5d      	ldr	r2, [pc, #372]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 8002456:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800245a:	6193      	str	r3, [r2, #24]
 800245c:	4b5b      	ldr	r3, [pc, #364]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002468:	4b58      	ldr	r3, [pc, #352]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	4a57      	ldr	r2, [pc, #348]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 800246e:	f043 0304 	orr.w	r3, r3, #4
 8002472:	6193      	str	r3, [r2, #24]
 8002474:	4b55      	ldr	r3, [pc, #340]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002480:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800248a:	2303      	movs	r3, #3
 800248c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248e:	f107 0320 	add.w	r3, r7, #32
 8002492:	4619      	mov	r1, r3
 8002494:	484e      	ldr	r0, [pc, #312]	@ (80025d0 <HAL_UART_MspInit+0x1a0>)
 8002496:	f000 fc1d 	bl	8002cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800249a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800249e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a0:	2300      	movs	r3, #0
 80024a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a8:	f107 0320 	add.w	r3, r7, #32
 80024ac:	4619      	mov	r1, r3
 80024ae:	4848      	ldr	r0, [pc, #288]	@ (80025d0 <HAL_UART_MspInit+0x1a0>)
 80024b0:	f000 fc10 	bl	8002cd4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80024b4:	2200      	movs	r2, #0
 80024b6:	2105      	movs	r1, #5
 80024b8:	2025      	movs	r0, #37	@ 0x25
 80024ba:	f000 fb22 	bl	8002b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024be:	2025      	movs	r0, #37	@ 0x25
 80024c0:	f000 fb3b 	bl	8002b3a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80024c4:	e07c      	b.n	80025c0 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a42      	ldr	r2, [pc, #264]	@ (80025d4 <HAL_UART_MspInit+0x1a4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d138      	bne.n	8002542 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 80024d0:	4b3e      	ldr	r3, [pc, #248]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	4a3d      	ldr	r2, [pc, #244]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 80024d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024da:	61d3      	str	r3, [r2, #28]
 80024dc:	4b3b      	ldr	r3, [pc, #236]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e8:	4b38      	ldr	r3, [pc, #224]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	4a37      	ldr	r2, [pc, #220]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 80024ee:	f043 0304 	orr.w	r3, r3, #4
 80024f2:	6193      	str	r3, [r2, #24]
 80024f4:	4b35      	ldr	r3, [pc, #212]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002500:	2304      	movs	r3, #4
 8002502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	2302      	movs	r3, #2
 8002506:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002508:	2303      	movs	r3, #3
 800250a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250c:	f107 0320 	add.w	r3, r7, #32
 8002510:	4619      	mov	r1, r3
 8002512:	482f      	ldr	r0, [pc, #188]	@ (80025d0 <HAL_UART_MspInit+0x1a0>)
 8002514:	f000 fbde 	bl	8002cd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002518:	2308      	movs	r3, #8
 800251a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800251c:	2300      	movs	r3, #0
 800251e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002524:	f107 0320 	add.w	r3, r7, #32
 8002528:	4619      	mov	r1, r3
 800252a:	4829      	ldr	r0, [pc, #164]	@ (80025d0 <HAL_UART_MspInit+0x1a0>)
 800252c:	f000 fbd2 	bl	8002cd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002530:	2200      	movs	r2, #0
 8002532:	2105      	movs	r1, #5
 8002534:	2026      	movs	r0, #38	@ 0x26
 8002536:	f000 fae4 	bl	8002b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800253a:	2026      	movs	r0, #38	@ 0x26
 800253c:	f000 fafd 	bl	8002b3a <HAL_NVIC_EnableIRQ>
}
 8002540:	e03e      	b.n	80025c0 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a24      	ldr	r2, [pc, #144]	@ (80025d8 <HAL_UART_MspInit+0x1a8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d139      	bne.n	80025c0 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 800254c:	4b1f      	ldr	r3, [pc, #124]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	4a1e      	ldr	r2, [pc, #120]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 8002552:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002556:	61d3      	str	r3, [r2, #28]
 8002558:	4b1c      	ldr	r3, [pc, #112]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002564:	4b19      	ldr	r3, [pc, #100]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	4a18      	ldr	r2, [pc, #96]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 800256a:	f043 0308 	orr.w	r3, r3, #8
 800256e:	6193      	str	r3, [r2, #24]
 8002570:	4b16      	ldr	r3, [pc, #88]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800257c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002582:	2302      	movs	r3, #2
 8002584:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002586:	2303      	movs	r3, #3
 8002588:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258a:	f107 0320 	add.w	r3, r7, #32
 800258e:	4619      	mov	r1, r3
 8002590:	4812      	ldr	r0, [pc, #72]	@ (80025dc <HAL_UART_MspInit+0x1ac>)
 8002592:	f000 fb9f 	bl	8002cd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002596:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800259a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800259c:	2300      	movs	r3, #0
 800259e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a4:	f107 0320 	add.w	r3, r7, #32
 80025a8:	4619      	mov	r1, r3
 80025aa:	480c      	ldr	r0, [pc, #48]	@ (80025dc <HAL_UART_MspInit+0x1ac>)
 80025ac:	f000 fb92 	bl	8002cd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80025b0:	2200      	movs	r2, #0
 80025b2:	2105      	movs	r1, #5
 80025b4:	2027      	movs	r0, #39	@ 0x27
 80025b6:	f000 faa4 	bl	8002b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80025ba:	2027      	movs	r0, #39	@ 0x27
 80025bc:	f000 fabd 	bl	8002b3a <HAL_NVIC_EnableIRQ>
}
 80025c0:	bf00      	nop
 80025c2:	3730      	adds	r7, #48	@ 0x30
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40013800 	.word	0x40013800
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40010800 	.word	0x40010800
 80025d4:	40004400 	.word	0x40004400
 80025d8:	40004800 	.word	0x40004800
 80025dc:	40010c00 	.word	0x40010c00

080025e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025e4:	bf00      	nop
 80025e6:	e7fd      	b.n	80025e4 <NMI_Handler+0x4>

080025e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ec:	bf00      	nop
 80025ee:	e7fd      	b.n	80025ec <HardFault_Handler+0x4>

080025f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f4:	bf00      	nop
 80025f6:	e7fd      	b.n	80025f4 <MemManage_Handler+0x4>

080025f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025fc:	bf00      	nop
 80025fe:	e7fd      	b.n	80025fc <BusFault_Handler+0x4>

08002600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002604:	bf00      	nop
 8002606:	e7fd      	b.n	8002604 <UsageFault_Handler+0x4>

08002608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002618:	f000 f95c 	bl	80028d4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800261c:	f002 fdc0 	bl	80051a0 <xTaskGetSchedulerState>
 8002620:	4603      	mov	r3, r0
 8002622:	2b01      	cmp	r3, #1
 8002624:	d001      	beq.n	800262a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002626:	f002 ffaf 	bl	8005588 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002634:	4802      	ldr	r0, [pc, #8]	@ (8002640 <USART1_IRQHandler+0x10>)
 8002636:	f001 fa85 	bl	8003b44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	200006e8 	.word	0x200006e8

08002644 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002648:	4802      	ldr	r0, [pc, #8]	@ (8002654 <USART2_IRQHandler+0x10>)
 800264a:	f001 fa7b 	bl	8003b44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000730 	.word	0x20000730

08002658 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800265c:	4802      	ldr	r0, [pc, #8]	@ (8002668 <USART3_IRQHandler+0x10>)
 800265e:	f001 fa71 	bl	8003b44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000778 	.word	0x20000778

0800266c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return 1;
 8002670:	2301      	movs	r3, #1
}
 8002672:	4618      	mov	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr

0800267a <_kill>:

int _kill(int pid, int sig)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002684:	f003 ff9e 	bl	80065c4 <__errno>
 8002688:	4603      	mov	r3, r0
 800268a:	2216      	movs	r2, #22
 800268c:	601a      	str	r2, [r3, #0]
  return -1;
 800268e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <_exit>:

void _exit (int status)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026a2:	f04f 31ff 	mov.w	r1, #4294967295
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff ffe7 	bl	800267a <_kill>
  while (1) {}    /* Make sure we hang here */
 80026ac:	bf00      	nop
 80026ae:	e7fd      	b.n	80026ac <_exit+0x12>

080026b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	e00a      	b.n	80026d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026c2:	f3af 8000 	nop.w
 80026c6:	4601      	mov	r1, r0
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	60ba      	str	r2, [r7, #8]
 80026ce:	b2ca      	uxtb	r2, r1
 80026d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	3301      	adds	r3, #1
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	429a      	cmp	r2, r3
 80026de:	dbf0      	blt.n	80026c2 <_read+0x12>
  }

  return len;
 80026e0:	687b      	ldr	r3, [r7, #4]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b086      	sub	sp, #24
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	e009      	b.n	8002710 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	60ba      	str	r2, [r7, #8]
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	3301      	adds	r3, #1
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	429a      	cmp	r2, r3
 8002716:	dbf1      	blt.n	80026fc <_write+0x12>
  }
  return len;
 8002718:	687b      	ldr	r3, [r7, #4]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <_close>:

int _close(int file)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800272a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002748:	605a      	str	r2, [r3, #4]
  return 0;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr

08002756 <_isatty>:

int _isatty(int file)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800275e:	2301      	movs	r3, #1
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800276a:	b480      	push	{r7}
 800276c:	b085      	sub	sp, #20
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr
	...

08002784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800278c:	4a14      	ldr	r2, [pc, #80]	@ (80027e0 <_sbrk+0x5c>)
 800278e:	4b15      	ldr	r3, [pc, #84]	@ (80027e4 <_sbrk+0x60>)
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002798:	4b13      	ldr	r3, [pc, #76]	@ (80027e8 <_sbrk+0x64>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d102      	bne.n	80027a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027a0:	4b11      	ldr	r3, [pc, #68]	@ (80027e8 <_sbrk+0x64>)
 80027a2:	4a12      	ldr	r2, [pc, #72]	@ (80027ec <_sbrk+0x68>)
 80027a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027a6:	4b10      	ldr	r3, [pc, #64]	@ (80027e8 <_sbrk+0x64>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d207      	bcs.n	80027c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027b4:	f003 ff06 	bl	80065c4 <__errno>
 80027b8:	4603      	mov	r3, r0
 80027ba:	220c      	movs	r2, #12
 80027bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027be:	f04f 33ff 	mov.w	r3, #4294967295
 80027c2:	e009      	b.n	80027d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027c4:	4b08      	ldr	r3, [pc, #32]	@ (80027e8 <_sbrk+0x64>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ca:	4b07      	ldr	r3, [pc, #28]	@ (80027e8 <_sbrk+0x64>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	4a05      	ldr	r2, [pc, #20]	@ (80027e8 <_sbrk+0x64>)
 80027d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027d6:	68fb      	ldr	r3, [r7, #12]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20005000 	.word	0x20005000
 80027e4:	00000400 	.word	0x00000400
 80027e8:	200007c8 	.word	0x200007c8
 80027ec:	20001670 	.word	0x20001670

080027f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027fc:	f7ff fff8 	bl	80027f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002800:	480b      	ldr	r0, [pc, #44]	@ (8002830 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002802:	490c      	ldr	r1, [pc, #48]	@ (8002834 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002804:	4a0c      	ldr	r2, [pc, #48]	@ (8002838 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002808:	e002      	b.n	8002810 <LoopCopyDataInit>

0800280a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800280c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280e:	3304      	adds	r3, #4

08002810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002814:	d3f9      	bcc.n	800280a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002816:	4a09      	ldr	r2, [pc, #36]	@ (800283c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002818:	4c09      	ldr	r4, [pc, #36]	@ (8002840 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800281c:	e001      	b.n	8002822 <LoopFillZerobss>

0800281e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002820:	3204      	adds	r2, #4

08002822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002824:	d3fb      	bcc.n	800281e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002826:	f003 fed3 	bl	80065d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800282a:	f7ff fb11 	bl	8001e50 <main>
  bx lr
 800282e:	4770      	bx	lr
  ldr r0, =_sdata
 8002830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002834:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002838:	080099e4 	.word	0x080099e4
  ldr r2, =_sbss
 800283c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002840:	20001670 	.word	0x20001670

08002844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002844:	e7fe      	b.n	8002844 <ADC1_2_IRQHandler>
	...

08002848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800284c:	4b08      	ldr	r3, [pc, #32]	@ (8002870 <HAL_Init+0x28>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a07      	ldr	r2, [pc, #28]	@ (8002870 <HAL_Init+0x28>)
 8002852:	f043 0310 	orr.w	r3, r3, #16
 8002856:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002858:	2003      	movs	r0, #3
 800285a:	f000 f947 	bl	8002aec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800285e:	200f      	movs	r0, #15
 8002860:	f000 f808 	bl	8002874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002864:	f7ff fdac 	bl	80023c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40022000 	.word	0x40022000

08002874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800287c:	4b12      	ldr	r3, [pc, #72]	@ (80028c8 <HAL_InitTick+0x54>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b12      	ldr	r3, [pc, #72]	@ (80028cc <HAL_InitTick+0x58>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	4619      	mov	r1, r3
 8002886:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800288a:	fbb3 f3f1 	udiv	r3, r3, r1
 800288e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f95f 	bl	8002b56 <HAL_SYSTICK_Config>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e00e      	b.n	80028c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b0f      	cmp	r3, #15
 80028a6:	d80a      	bhi.n	80028be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028a8:	2200      	movs	r2, #0
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	f04f 30ff 	mov.w	r0, #4294967295
 80028b0:	f000 f927 	bl	8002b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028b4:	4a06      	ldr	r2, [pc, #24]	@ (80028d0 <HAL_InitTick+0x5c>)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	e000      	b.n	80028c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000000 	.word	0x20000000
 80028cc:	20000008 	.word	0x20000008
 80028d0:	20000004 	.word	0x20000004

080028d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028d8:	4b05      	ldr	r3, [pc, #20]	@ (80028f0 <HAL_IncTick+0x1c>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <HAL_IncTick+0x20>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4413      	add	r3, r2
 80028e4:	4a03      	ldr	r2, [pc, #12]	@ (80028f4 <HAL_IncTick+0x20>)
 80028e6:	6013      	str	r3, [r2, #0]
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr
 80028f0:	20000008 	.word	0x20000008
 80028f4:	200007cc 	.word	0x200007cc

080028f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return uwTick;
 80028fc:	4b02      	ldr	r3, [pc, #8]	@ (8002908 <HAL_GetTick+0x10>)
 80028fe:	681b      	ldr	r3, [r3, #0]
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	200007cc 	.word	0x200007cc

0800290c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002914:	f7ff fff0 	bl	80028f8 <HAL_GetTick>
 8002918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002924:	d005      	beq.n	8002932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002926:	4b0a      	ldr	r3, [pc, #40]	@ (8002950 <HAL_Delay+0x44>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4413      	add	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002932:	bf00      	nop
 8002934:	f7ff ffe0 	bl	80028f8 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	429a      	cmp	r2, r3
 8002942:	d8f7      	bhi.n	8002934 <HAL_Delay+0x28>
  {
  }
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000008 	.word	0x20000008

08002954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002964:	4b0c      	ldr	r3, [pc, #48]	@ (8002998 <__NVIC_SetPriorityGrouping+0x44>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002970:	4013      	ands	r3, r2
 8002972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800297c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002980:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002986:	4a04      	ldr	r2, [pc, #16]	@ (8002998 <__NVIC_SetPriorityGrouping+0x44>)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	60d3      	str	r3, [r2, #12]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a0:	4b04      	ldr	r3, [pc, #16]	@ (80029b4 <__NVIC_GetPriorityGrouping+0x18>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	0a1b      	lsrs	r3, r3, #8
 80029a6:	f003 0307 	and.w	r3, r3, #7
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	db0b      	blt.n	80029e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	f003 021f 	and.w	r2, r3, #31
 80029d0:	4906      	ldr	r1, [pc, #24]	@ (80029ec <__NVIC_EnableIRQ+0x34>)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	2001      	movs	r0, #1
 80029da:	fa00 f202 	lsl.w	r2, r0, r2
 80029de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	e000e100 	.word	0xe000e100

080029f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	6039      	str	r1, [r7, #0]
 80029fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	db0a      	blt.n	8002a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	490c      	ldr	r1, [pc, #48]	@ (8002a3c <__NVIC_SetPriority+0x4c>)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	0112      	lsls	r2, r2, #4
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	440b      	add	r3, r1
 8002a14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a18:	e00a      	b.n	8002a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4908      	ldr	r1, [pc, #32]	@ (8002a40 <__NVIC_SetPriority+0x50>)
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	3b04      	subs	r3, #4
 8002a28:	0112      	lsls	r2, r2, #4
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	761a      	strb	r2, [r3, #24]
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	e000e100 	.word	0xe000e100
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b089      	sub	sp, #36	@ 0x24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f1c3 0307 	rsb	r3, r3, #7
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	bf28      	it	cs
 8002a62:	2304      	movcs	r3, #4
 8002a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d902      	bls.n	8002a74 <NVIC_EncodePriority+0x30>
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3b03      	subs	r3, #3
 8002a72:	e000      	b.n	8002a76 <NVIC_EncodePriority+0x32>
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	f04f 32ff 	mov.w	r2, #4294967295
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43da      	mvns	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	401a      	ands	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	43d9      	mvns	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a9c:	4313      	orrs	r3, r2
         );
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3724      	adds	r7, #36	@ 0x24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr

08002aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ab8:	d301      	bcc.n	8002abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aba:	2301      	movs	r3, #1
 8002abc:	e00f      	b.n	8002ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002abe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae8 <SysTick_Config+0x40>)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ac6:	210f      	movs	r1, #15
 8002ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8002acc:	f7ff ff90 	bl	80029f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad0:	4b05      	ldr	r3, [pc, #20]	@ (8002ae8 <SysTick_Config+0x40>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ad6:	4b04      	ldr	r3, [pc, #16]	@ (8002ae8 <SysTick_Config+0x40>)
 8002ad8:	2207      	movs	r2, #7
 8002ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	e000e010 	.word	0xe000e010

08002aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff ff2d 	bl	8002954 <__NVIC_SetPriorityGrouping>
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b086      	sub	sp, #24
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	4603      	mov	r3, r0
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]
 8002b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b14:	f7ff ff42 	bl	800299c <__NVIC_GetPriorityGrouping>
 8002b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	6978      	ldr	r0, [r7, #20]
 8002b20:	f7ff ff90 	bl	8002a44 <NVIC_EncodePriority>
 8002b24:	4602      	mov	r2, r0
 8002b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff5f 	bl	80029f0 <__NVIC_SetPriority>
}
 8002b32:	bf00      	nop
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	4603      	mov	r3, r0
 8002b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff35 	bl	80029b8 <__NVIC_EnableIRQ>
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff ffa2 	bl	8002aa8 <SysTick_Config>
 8002b64:	4603      	mov	r3, r0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d008      	beq.n	8002b98 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2204      	movs	r2, #4
 8002b8a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e020      	b.n	8002bda <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 020e 	bic.w	r2, r2, #14
 8002ba6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0201 	bic.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d005      	beq.n	8002c08 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2204      	movs	r2, #4
 8002c00:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	73fb      	strb	r3, [r7, #15]
 8002c06:	e051      	b.n	8002cac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 020e 	bic.w	r2, r2, #14
 8002c16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0201 	bic.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a22      	ldr	r2, [pc, #136]	@ (8002cb8 <HAL_DMA_Abort_IT+0xd4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d029      	beq.n	8002c86 <HAL_DMA_Abort_IT+0xa2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a21      	ldr	r2, [pc, #132]	@ (8002cbc <HAL_DMA_Abort_IT+0xd8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d022      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x9e>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a1f      	ldr	r2, [pc, #124]	@ (8002cc0 <HAL_DMA_Abort_IT+0xdc>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d01a      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x98>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc4 <HAL_DMA_Abort_IT+0xe0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d012      	beq.n	8002c76 <HAL_DMA_Abort_IT+0x92>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a1c      	ldr	r2, [pc, #112]	@ (8002cc8 <HAL_DMA_Abort_IT+0xe4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00a      	beq.n	8002c70 <HAL_DMA_Abort_IT+0x8c>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a1b      	ldr	r2, [pc, #108]	@ (8002ccc <HAL_DMA_Abort_IT+0xe8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d102      	bne.n	8002c6a <HAL_DMA_Abort_IT+0x86>
 8002c64:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002c68:	e00e      	b.n	8002c88 <HAL_DMA_Abort_IT+0xa4>
 8002c6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c6e:	e00b      	b.n	8002c88 <HAL_DMA_Abort_IT+0xa4>
 8002c70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c74:	e008      	b.n	8002c88 <HAL_DMA_Abort_IT+0xa4>
 8002c76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c7a:	e005      	b.n	8002c88 <HAL_DMA_Abort_IT+0xa4>
 8002c7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c80:	e002      	b.n	8002c88 <HAL_DMA_Abort_IT+0xa4>
 8002c82:	2310      	movs	r3, #16
 8002c84:	e000      	b.n	8002c88 <HAL_DMA_Abort_IT+0xa4>
 8002c86:	2301      	movs	r3, #1
 8002c88:	4a11      	ldr	r2, [pc, #68]	@ (8002cd0 <HAL_DMA_Abort_IT+0xec>)
 8002c8a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	4798      	blx	r3
    } 
  }
  return status;
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40020008 	.word	0x40020008
 8002cbc:	4002001c 	.word	0x4002001c
 8002cc0:	40020030 	.word	0x40020030
 8002cc4:	40020044 	.word	0x40020044
 8002cc8:	40020058 	.word	0x40020058
 8002ccc:	4002006c 	.word	0x4002006c
 8002cd0:	40020000 	.word	0x40020000

08002cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b08b      	sub	sp, #44	@ 0x2c
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ce6:	e169      	b.n	8002fbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ce8:	2201      	movs	r2, #1
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	69fa      	ldr	r2, [r7, #28]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	f040 8158 	bne.w	8002fb6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4a9a      	ldr	r2, [pc, #616]	@ (8002f74 <HAL_GPIO_Init+0x2a0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d05e      	beq.n	8002dce <HAL_GPIO_Init+0xfa>
 8002d10:	4a98      	ldr	r2, [pc, #608]	@ (8002f74 <HAL_GPIO_Init+0x2a0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d875      	bhi.n	8002e02 <HAL_GPIO_Init+0x12e>
 8002d16:	4a98      	ldr	r2, [pc, #608]	@ (8002f78 <HAL_GPIO_Init+0x2a4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d058      	beq.n	8002dce <HAL_GPIO_Init+0xfa>
 8002d1c:	4a96      	ldr	r2, [pc, #600]	@ (8002f78 <HAL_GPIO_Init+0x2a4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d86f      	bhi.n	8002e02 <HAL_GPIO_Init+0x12e>
 8002d22:	4a96      	ldr	r2, [pc, #600]	@ (8002f7c <HAL_GPIO_Init+0x2a8>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d052      	beq.n	8002dce <HAL_GPIO_Init+0xfa>
 8002d28:	4a94      	ldr	r2, [pc, #592]	@ (8002f7c <HAL_GPIO_Init+0x2a8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d869      	bhi.n	8002e02 <HAL_GPIO_Init+0x12e>
 8002d2e:	4a94      	ldr	r2, [pc, #592]	@ (8002f80 <HAL_GPIO_Init+0x2ac>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d04c      	beq.n	8002dce <HAL_GPIO_Init+0xfa>
 8002d34:	4a92      	ldr	r2, [pc, #584]	@ (8002f80 <HAL_GPIO_Init+0x2ac>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d863      	bhi.n	8002e02 <HAL_GPIO_Init+0x12e>
 8002d3a:	4a92      	ldr	r2, [pc, #584]	@ (8002f84 <HAL_GPIO_Init+0x2b0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d046      	beq.n	8002dce <HAL_GPIO_Init+0xfa>
 8002d40:	4a90      	ldr	r2, [pc, #576]	@ (8002f84 <HAL_GPIO_Init+0x2b0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d85d      	bhi.n	8002e02 <HAL_GPIO_Init+0x12e>
 8002d46:	2b12      	cmp	r3, #18
 8002d48:	d82a      	bhi.n	8002da0 <HAL_GPIO_Init+0xcc>
 8002d4a:	2b12      	cmp	r3, #18
 8002d4c:	d859      	bhi.n	8002e02 <HAL_GPIO_Init+0x12e>
 8002d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d54 <HAL_GPIO_Init+0x80>)
 8002d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d54:	08002dcf 	.word	0x08002dcf
 8002d58:	08002da9 	.word	0x08002da9
 8002d5c:	08002dbb 	.word	0x08002dbb
 8002d60:	08002dfd 	.word	0x08002dfd
 8002d64:	08002e03 	.word	0x08002e03
 8002d68:	08002e03 	.word	0x08002e03
 8002d6c:	08002e03 	.word	0x08002e03
 8002d70:	08002e03 	.word	0x08002e03
 8002d74:	08002e03 	.word	0x08002e03
 8002d78:	08002e03 	.word	0x08002e03
 8002d7c:	08002e03 	.word	0x08002e03
 8002d80:	08002e03 	.word	0x08002e03
 8002d84:	08002e03 	.word	0x08002e03
 8002d88:	08002e03 	.word	0x08002e03
 8002d8c:	08002e03 	.word	0x08002e03
 8002d90:	08002e03 	.word	0x08002e03
 8002d94:	08002e03 	.word	0x08002e03
 8002d98:	08002db1 	.word	0x08002db1
 8002d9c:	08002dc5 	.word	0x08002dc5
 8002da0:	4a79      	ldr	r2, [pc, #484]	@ (8002f88 <HAL_GPIO_Init+0x2b4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d013      	beq.n	8002dce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002da6:	e02c      	b.n	8002e02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	623b      	str	r3, [r7, #32]
          break;
 8002dae:	e029      	b.n	8002e04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	3304      	adds	r3, #4
 8002db6:	623b      	str	r3, [r7, #32]
          break;
 8002db8:	e024      	b.n	8002e04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	3308      	adds	r3, #8
 8002dc0:	623b      	str	r3, [r7, #32]
          break;
 8002dc2:	e01f      	b.n	8002e04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	330c      	adds	r3, #12
 8002dca:	623b      	str	r3, [r7, #32]
          break;
 8002dcc:	e01a      	b.n	8002e04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d102      	bne.n	8002ddc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002dd6:	2304      	movs	r3, #4
 8002dd8:	623b      	str	r3, [r7, #32]
          break;
 8002dda:	e013      	b.n	8002e04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d105      	bne.n	8002df0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002de4:	2308      	movs	r3, #8
 8002de6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69fa      	ldr	r2, [r7, #28]
 8002dec:	611a      	str	r2, [r3, #16]
          break;
 8002dee:	e009      	b.n	8002e04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002df0:	2308      	movs	r3, #8
 8002df2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	615a      	str	r2, [r3, #20]
          break;
 8002dfa:	e003      	b.n	8002e04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	623b      	str	r3, [r7, #32]
          break;
 8002e00:	e000      	b.n	8002e04 <HAL_GPIO_Init+0x130>
          break;
 8002e02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	2bff      	cmp	r3, #255	@ 0xff
 8002e08:	d801      	bhi.n	8002e0e <HAL_GPIO_Init+0x13a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	e001      	b.n	8002e12 <HAL_GPIO_Init+0x13e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3304      	adds	r3, #4
 8002e12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2bff      	cmp	r3, #255	@ 0xff
 8002e18:	d802      	bhi.n	8002e20 <HAL_GPIO_Init+0x14c>
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	e002      	b.n	8002e26 <HAL_GPIO_Init+0x152>
 8002e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e22:	3b08      	subs	r3, #8
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	210f      	movs	r1, #15
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	fa01 f303 	lsl.w	r3, r1, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	401a      	ands	r2, r3
 8002e38:	6a39      	ldr	r1, [r7, #32]
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e40:	431a      	orrs	r2, r3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 80b1 	beq.w	8002fb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e54:	4b4d      	ldr	r3, [pc, #308]	@ (8002f8c <HAL_GPIO_Init+0x2b8>)
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	4a4c      	ldr	r2, [pc, #304]	@ (8002f8c <HAL_GPIO_Init+0x2b8>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	6193      	str	r3, [r2, #24]
 8002e60:	4b4a      	ldr	r3, [pc, #296]	@ (8002f8c <HAL_GPIO_Init+0x2b8>)
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e6c:	4a48      	ldr	r2, [pc, #288]	@ (8002f90 <HAL_GPIO_Init+0x2bc>)
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	089b      	lsrs	r3, r3, #2
 8002e72:	3302      	adds	r3, #2
 8002e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	f003 0303 	and.w	r3, r3, #3
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	220f      	movs	r2, #15
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a40      	ldr	r2, [pc, #256]	@ (8002f94 <HAL_GPIO_Init+0x2c0>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d013      	beq.n	8002ec0 <HAL_GPIO_Init+0x1ec>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a3f      	ldr	r2, [pc, #252]	@ (8002f98 <HAL_GPIO_Init+0x2c4>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d00d      	beq.n	8002ebc <HAL_GPIO_Init+0x1e8>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a3e      	ldr	r2, [pc, #248]	@ (8002f9c <HAL_GPIO_Init+0x2c8>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d007      	beq.n	8002eb8 <HAL_GPIO_Init+0x1e4>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a3d      	ldr	r2, [pc, #244]	@ (8002fa0 <HAL_GPIO_Init+0x2cc>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d101      	bne.n	8002eb4 <HAL_GPIO_Init+0x1e0>
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e006      	b.n	8002ec2 <HAL_GPIO_Init+0x1ee>
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	e004      	b.n	8002ec2 <HAL_GPIO_Init+0x1ee>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e002      	b.n	8002ec2 <HAL_GPIO_Init+0x1ee>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <HAL_GPIO_Init+0x1ee>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec4:	f002 0203 	and.w	r2, r2, #3
 8002ec8:	0092      	lsls	r2, r2, #2
 8002eca:	4093      	lsls	r3, r2
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ed2:	492f      	ldr	r1, [pc, #188]	@ (8002f90 <HAL_GPIO_Init+0x2bc>)
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed6:	089b      	lsrs	r3, r3, #2
 8002ed8:	3302      	adds	r3, #2
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d006      	beq.n	8002efa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002eec:	4b2d      	ldr	r3, [pc, #180]	@ (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	492c      	ldr	r1, [pc, #176]	@ (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	608b      	str	r3, [r1, #8]
 8002ef8:	e006      	b.n	8002f08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002efa:	4b2a      	ldr	r3, [pc, #168]	@ (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	4928      	ldr	r1, [pc, #160]	@ (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d006      	beq.n	8002f22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f14:	4b23      	ldr	r3, [pc, #140]	@ (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	4922      	ldr	r1, [pc, #136]	@ (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	60cb      	str	r3, [r1, #12]
 8002f20:	e006      	b.n	8002f30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f22:	4b20      	ldr	r3, [pc, #128]	@ (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	491e      	ldr	r1, [pc, #120]	@ (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d006      	beq.n	8002f4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f3c:	4b19      	ldr	r3, [pc, #100]	@ (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	4918      	ldr	r1, [pc, #96]	@ (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	604b      	str	r3, [r1, #4]
 8002f48:	e006      	b.n	8002f58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f4a:	4b16      	ldr	r3, [pc, #88]	@ (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	4914      	ldr	r1, [pc, #80]	@ (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d021      	beq.n	8002fa8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f64:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	490e      	ldr	r1, [pc, #56]	@ (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	600b      	str	r3, [r1, #0]
 8002f70:	e021      	b.n	8002fb6 <HAL_GPIO_Init+0x2e2>
 8002f72:	bf00      	nop
 8002f74:	10320000 	.word	0x10320000
 8002f78:	10310000 	.word	0x10310000
 8002f7c:	10220000 	.word	0x10220000
 8002f80:	10210000 	.word	0x10210000
 8002f84:	10120000 	.word	0x10120000
 8002f88:	10110000 	.word	0x10110000
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40010000 	.word	0x40010000
 8002f94:	40010800 	.word	0x40010800
 8002f98:	40010c00 	.word	0x40010c00
 8002f9c:	40011000 	.word	0x40011000
 8002fa0:	40011400 	.word	0x40011400
 8002fa4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd8 <HAL_GPIO_Init+0x304>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	4909      	ldr	r1, [pc, #36]	@ (8002fd8 <HAL_GPIO_Init+0x304>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb8:	3301      	adds	r3, #1
 8002fba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f47f ae8e 	bne.w	8002ce8 <HAL_GPIO_Init+0x14>
  }
}
 8002fcc:	bf00      	nop
 8002fce:	bf00      	nop
 8002fd0:	372c      	adds	r7, #44	@ 0x2c
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	40010400 	.word	0x40010400

08002fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	807b      	strh	r3, [r7, #2]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fec:	787b      	ldrb	r3, [r7, #1]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ff2:	887a      	ldrh	r2, [r7, #2]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ff8:	e003      	b.n	8003002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ffa:	887b      	ldrh	r3, [r7, #2]
 8002ffc:	041a      	lsls	r2, r3, #16
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	611a      	str	r2, [r3, #16]
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr

0800300c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800301e:	887a      	ldrh	r2, [r7, #2]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4013      	ands	r3, r2
 8003024:	041a      	lsls	r2, r3, #16
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	43d9      	mvns	r1, r3
 800302a:	887b      	ldrh	r3, [r7, #2]
 800302c:	400b      	ands	r3, r1
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	611a      	str	r2, [r3, #16]
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr
	...

08003040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e272      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 8087 	beq.w	800316e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003060:	4b92      	ldr	r3, [pc, #584]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 030c 	and.w	r3, r3, #12
 8003068:	2b04      	cmp	r3, #4
 800306a:	d00c      	beq.n	8003086 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800306c:	4b8f      	ldr	r3, [pc, #572]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 030c 	and.w	r3, r3, #12
 8003074:	2b08      	cmp	r3, #8
 8003076:	d112      	bne.n	800309e <HAL_RCC_OscConfig+0x5e>
 8003078:	4b8c      	ldr	r3, [pc, #560]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003084:	d10b      	bne.n	800309e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003086:	4b89      	ldr	r3, [pc, #548]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d06c      	beq.n	800316c <HAL_RCC_OscConfig+0x12c>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d168      	bne.n	800316c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e24c      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030a6:	d106      	bne.n	80030b6 <HAL_RCC_OscConfig+0x76>
 80030a8:	4b80      	ldr	r3, [pc, #512]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a7f      	ldr	r2, [pc, #508]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	e02e      	b.n	8003114 <HAL_RCC_OscConfig+0xd4>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10c      	bne.n	80030d8 <HAL_RCC_OscConfig+0x98>
 80030be:	4b7b      	ldr	r3, [pc, #492]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a7a      	ldr	r2, [pc, #488]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b78      	ldr	r3, [pc, #480]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a77      	ldr	r2, [pc, #476]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	e01d      	b.n	8003114 <HAL_RCC_OscConfig+0xd4>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030e0:	d10c      	bne.n	80030fc <HAL_RCC_OscConfig+0xbc>
 80030e2:	4b72      	ldr	r3, [pc, #456]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a71      	ldr	r2, [pc, #452]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	4b6f      	ldr	r3, [pc, #444]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a6e      	ldr	r2, [pc, #440]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	e00b      	b.n	8003114 <HAL_RCC_OscConfig+0xd4>
 80030fc:	4b6b      	ldr	r3, [pc, #428]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a6a      	ldr	r2, [pc, #424]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003102:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003106:	6013      	str	r3, [r2, #0]
 8003108:	4b68      	ldr	r3, [pc, #416]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a67      	ldr	r2, [pc, #412]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 800310e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003112:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d013      	beq.n	8003144 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311c:	f7ff fbec 	bl	80028f8 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003124:	f7ff fbe8 	bl	80028f8 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b64      	cmp	r3, #100	@ 0x64
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e200      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003136:	4b5d      	ldr	r3, [pc, #372]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0xe4>
 8003142:	e014      	b.n	800316e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7ff fbd8 	bl	80028f8 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800314c:	f7ff fbd4 	bl	80028f8 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b64      	cmp	r3, #100	@ 0x64
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e1ec      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315e:	4b53      	ldr	r3, [pc, #332]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x10c>
 800316a:	e000      	b.n	800316e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d063      	beq.n	8003242 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800317a:	4b4c      	ldr	r3, [pc, #304]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00b      	beq.n	800319e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003186:	4b49      	ldr	r3, [pc, #292]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	2b08      	cmp	r3, #8
 8003190:	d11c      	bne.n	80031cc <HAL_RCC_OscConfig+0x18c>
 8003192:	4b46      	ldr	r3, [pc, #280]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d116      	bne.n	80031cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319e:	4b43      	ldr	r3, [pc, #268]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_RCC_OscConfig+0x176>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d001      	beq.n	80031b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e1c0      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b6:	4b3d      	ldr	r3, [pc, #244]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4939      	ldr	r1, [pc, #228]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ca:	e03a      	b.n	8003242 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d020      	beq.n	8003216 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d4:	4b36      	ldr	r3, [pc, #216]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 80031d6:	2201      	movs	r2, #1
 80031d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031da:	f7ff fb8d 	bl	80028f8 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e2:	f7ff fb89 	bl	80028f8 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e1a1      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f4:	4b2d      	ldr	r3, [pc, #180]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0f0      	beq.n	80031e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003200:	4b2a      	ldr	r3, [pc, #168]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4927      	ldr	r1, [pc, #156]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003210:	4313      	orrs	r3, r2
 8003212:	600b      	str	r3, [r1, #0]
 8003214:	e015      	b.n	8003242 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003216:	4b26      	ldr	r3, [pc, #152]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7ff fb6c 	bl	80028f8 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003224:	f7ff fb68 	bl	80028f8 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e180      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003236:	4b1d      	ldr	r3, [pc, #116]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d03a      	beq.n	80032c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d019      	beq.n	800328a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003256:	4b17      	ldr	r3, [pc, #92]	@ (80032b4 <HAL_RCC_OscConfig+0x274>)
 8003258:	2201      	movs	r2, #1
 800325a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325c:	f7ff fb4c 	bl	80028f8 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003264:	f7ff fb48 	bl	80028f8 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e160      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003276:	4b0d      	ldr	r3, [pc, #52]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003282:	2001      	movs	r0, #1
 8003284:	f000 face 	bl	8003824 <RCC_Delay>
 8003288:	e01c      	b.n	80032c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800328a:	4b0a      	ldr	r3, [pc, #40]	@ (80032b4 <HAL_RCC_OscConfig+0x274>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003290:	f7ff fb32 	bl	80028f8 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003296:	e00f      	b.n	80032b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003298:	f7ff fb2e 	bl	80028f8 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d908      	bls.n	80032b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e146      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
 80032aa:	bf00      	nop
 80032ac:	40021000 	.word	0x40021000
 80032b0:	42420000 	.word	0x42420000
 80032b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b8:	4b92      	ldr	r3, [pc, #584]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80032ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1e9      	bne.n	8003298 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80a6 	beq.w	800341e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032d2:	2300      	movs	r3, #0
 80032d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032d6:	4b8b      	ldr	r3, [pc, #556]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10d      	bne.n	80032fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e2:	4b88      	ldr	r3, [pc, #544]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	4a87      	ldr	r2, [pc, #540]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80032e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ec:	61d3      	str	r3, [r2, #28]
 80032ee:	4b85      	ldr	r3, [pc, #532]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f6:	60bb      	str	r3, [r7, #8]
 80032f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032fa:	2301      	movs	r3, #1
 80032fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fe:	4b82      	ldr	r3, [pc, #520]	@ (8003508 <HAL_RCC_OscConfig+0x4c8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d118      	bne.n	800333c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800330a:	4b7f      	ldr	r3, [pc, #508]	@ (8003508 <HAL_RCC_OscConfig+0x4c8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a7e      	ldr	r2, [pc, #504]	@ (8003508 <HAL_RCC_OscConfig+0x4c8>)
 8003310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003316:	f7ff faef 	bl	80028f8 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331e:	f7ff faeb 	bl	80028f8 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b64      	cmp	r3, #100	@ 0x64
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e103      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003330:	4b75      	ldr	r3, [pc, #468]	@ (8003508 <HAL_RCC_OscConfig+0x4c8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f0      	beq.n	800331e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d106      	bne.n	8003352 <HAL_RCC_OscConfig+0x312>
 8003344:	4b6f      	ldr	r3, [pc, #444]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	4a6e      	ldr	r2, [pc, #440]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	6213      	str	r3, [r2, #32]
 8003350:	e02d      	b.n	80033ae <HAL_RCC_OscConfig+0x36e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10c      	bne.n	8003374 <HAL_RCC_OscConfig+0x334>
 800335a:	4b6a      	ldr	r3, [pc, #424]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	4a69      	ldr	r2, [pc, #420]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	6213      	str	r3, [r2, #32]
 8003366:	4b67      	ldr	r3, [pc, #412]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	4a66      	ldr	r2, [pc, #408]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800336c:	f023 0304 	bic.w	r3, r3, #4
 8003370:	6213      	str	r3, [r2, #32]
 8003372:	e01c      	b.n	80033ae <HAL_RCC_OscConfig+0x36e>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	2b05      	cmp	r3, #5
 800337a:	d10c      	bne.n	8003396 <HAL_RCC_OscConfig+0x356>
 800337c:	4b61      	ldr	r3, [pc, #388]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	4a60      	ldr	r2, [pc, #384]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003382:	f043 0304 	orr.w	r3, r3, #4
 8003386:	6213      	str	r3, [r2, #32]
 8003388:	4b5e      	ldr	r3, [pc, #376]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	4a5d      	ldr	r2, [pc, #372]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	6213      	str	r3, [r2, #32]
 8003394:	e00b      	b.n	80033ae <HAL_RCC_OscConfig+0x36e>
 8003396:	4b5b      	ldr	r3, [pc, #364]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	4a5a      	ldr	r2, [pc, #360]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800339c:	f023 0301 	bic.w	r3, r3, #1
 80033a0:	6213      	str	r3, [r2, #32]
 80033a2:	4b58      	ldr	r3, [pc, #352]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	4a57      	ldr	r2, [pc, #348]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80033a8:	f023 0304 	bic.w	r3, r3, #4
 80033ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d015      	beq.n	80033e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b6:	f7ff fa9f 	bl	80028f8 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033bc:	e00a      	b.n	80033d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033be:	f7ff fa9b 	bl	80028f8 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e0b1      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d4:	4b4b      	ldr	r3, [pc, #300]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0ee      	beq.n	80033be <HAL_RCC_OscConfig+0x37e>
 80033e0:	e014      	b.n	800340c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e2:	f7ff fa89 	bl	80028f8 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e8:	e00a      	b.n	8003400 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ea:	f7ff fa85 	bl	80028f8 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e09b      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003400:	4b40      	ldr	r3, [pc, #256]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1ee      	bne.n	80033ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800340c:	7dfb      	ldrb	r3, [r7, #23]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d105      	bne.n	800341e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003412:	4b3c      	ldr	r3, [pc, #240]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	4a3b      	ldr	r2, [pc, #236]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003418:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800341c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 8087 	beq.w	8003536 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003428:	4b36      	ldr	r3, [pc, #216]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 030c 	and.w	r3, r3, #12
 8003430:	2b08      	cmp	r3, #8
 8003432:	d061      	beq.n	80034f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d146      	bne.n	80034ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343c:	4b33      	ldr	r3, [pc, #204]	@ (800350c <HAL_RCC_OscConfig+0x4cc>)
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003442:	f7ff fa59 	bl	80028f8 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344a:	f7ff fa55 	bl	80028f8 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e06d      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800345c:	4b29      	ldr	r3, [pc, #164]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1f0      	bne.n	800344a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003470:	d108      	bne.n	8003484 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003472:	4b24      	ldr	r3, [pc, #144]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	4921      	ldr	r1, [pc, #132]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003480:	4313      	orrs	r3, r2
 8003482:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003484:	4b1f      	ldr	r3, [pc, #124]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a19      	ldr	r1, [r3, #32]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003494:	430b      	orrs	r3, r1
 8003496:	491b      	ldr	r1, [pc, #108]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003498:	4313      	orrs	r3, r2
 800349a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800349c:	4b1b      	ldr	r3, [pc, #108]	@ (800350c <HAL_RCC_OscConfig+0x4cc>)
 800349e:	2201      	movs	r2, #1
 80034a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a2:	f7ff fa29 	bl	80028f8 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034aa:	f7ff fa25 	bl	80028f8 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e03d      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034bc:	4b11      	ldr	r3, [pc, #68]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f0      	beq.n	80034aa <HAL_RCC_OscConfig+0x46a>
 80034c8:	e035      	b.n	8003536 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ca:	4b10      	ldr	r3, [pc, #64]	@ (800350c <HAL_RCC_OscConfig+0x4cc>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d0:	f7ff fa12 	bl	80028f8 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d8:	f7ff fa0e 	bl	80028f8 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e026      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ea:	4b06      	ldr	r3, [pc, #24]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f0      	bne.n	80034d8 <HAL_RCC_OscConfig+0x498>
 80034f6:	e01e      	b.n	8003536 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d107      	bne.n	8003510 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e019      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
 8003504:	40021000 	.word	0x40021000
 8003508:	40007000 	.word	0x40007000
 800350c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003510:	4b0b      	ldr	r3, [pc, #44]	@ (8003540 <HAL_RCC_OscConfig+0x500>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	429a      	cmp	r2, r3
 8003522:	d106      	bne.n	8003532 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352e:	429a      	cmp	r2, r3
 8003530:	d001      	beq.n	8003536 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40021000 	.word	0x40021000

08003544 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0d0      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003558:	4b6a      	ldr	r3, [pc, #424]	@ (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d910      	bls.n	8003588 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003566:	4b67      	ldr	r3, [pc, #412]	@ (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f023 0207 	bic.w	r2, r3, #7
 800356e:	4965      	ldr	r1, [pc, #404]	@ (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	4313      	orrs	r3, r2
 8003574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003576:	4b63      	ldr	r3, [pc, #396]	@ (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0b8      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d020      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035a0:	4b59      	ldr	r3, [pc, #356]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4a58      	ldr	r2, [pc, #352]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80035aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035b8:	4b53      	ldr	r3, [pc, #332]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	4a52      	ldr	r2, [pc, #328]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035be:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80035c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c4:	4b50      	ldr	r3, [pc, #320]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	494d      	ldr	r1, [pc, #308]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d040      	beq.n	8003664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d107      	bne.n	80035fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	4b47      	ldr	r3, [pc, #284]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d115      	bne.n	8003622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e07f      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d107      	bne.n	8003612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003602:	4b41      	ldr	r3, [pc, #260]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d109      	bne.n	8003622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e073      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003612:	4b3d      	ldr	r3, [pc, #244]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e06b      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003622:	4b39      	ldr	r3, [pc, #228]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f023 0203 	bic.w	r2, r3, #3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	4936      	ldr	r1, [pc, #216]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003630:	4313      	orrs	r3, r2
 8003632:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003634:	f7ff f960 	bl	80028f8 <HAL_GetTick>
 8003638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363a:	e00a      	b.n	8003652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800363c:	f7ff f95c 	bl	80028f8 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800364a:	4293      	cmp	r3, r2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e053      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003652:	4b2d      	ldr	r3, [pc, #180]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 020c 	and.w	r2, r3, #12
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	429a      	cmp	r2, r3
 8003662:	d1eb      	bne.n	800363c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003664:	4b27      	ldr	r3, [pc, #156]	@ (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d210      	bcs.n	8003694 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003672:	4b24      	ldr	r3, [pc, #144]	@ (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f023 0207 	bic.w	r2, r3, #7
 800367a:	4922      	ldr	r1, [pc, #136]	@ (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	4b20      	ldr	r3, [pc, #128]	@ (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d001      	beq.n	8003694 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e032      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a0:	4b19      	ldr	r3, [pc, #100]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4916      	ldr	r1, [pc, #88]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d009      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036be:	4b12      	ldr	r3, [pc, #72]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	490e      	ldr	r1, [pc, #56]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036d2:	f000 f821 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 80036d6:	4602      	mov	r2, r0
 80036d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	091b      	lsrs	r3, r3, #4
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	490a      	ldr	r1, [pc, #40]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80036e4:	5ccb      	ldrb	r3, [r1, r3]
 80036e6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ea:	4a09      	ldr	r2, [pc, #36]	@ (8003710 <HAL_RCC_ClockConfig+0x1cc>)
 80036ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036ee:	4b09      	ldr	r3, [pc, #36]	@ (8003714 <HAL_RCC_ClockConfig+0x1d0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff f8be 	bl	8002874 <HAL_InitTick>

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40022000 	.word	0x40022000
 8003708:	40021000 	.word	0x40021000
 800370c:	08009638 	.word	0x08009638
 8003710:	20000000 	.word	0x20000000
 8003714:	20000004 	.word	0x20000004

08003718 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	2300      	movs	r3, #0
 8003724:	60bb      	str	r3, [r7, #8]
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	2300      	movs	r3, #0
 800372c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003732:	4b1e      	ldr	r3, [pc, #120]	@ (80037ac <HAL_RCC_GetSysClockFreq+0x94>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	2b04      	cmp	r3, #4
 8003740:	d002      	beq.n	8003748 <HAL_RCC_GetSysClockFreq+0x30>
 8003742:	2b08      	cmp	r3, #8
 8003744:	d003      	beq.n	800374e <HAL_RCC_GetSysClockFreq+0x36>
 8003746:	e027      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003748:	4b19      	ldr	r3, [pc, #100]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800374a:	613b      	str	r3, [r7, #16]
      break;
 800374c:	e027      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	0c9b      	lsrs	r3, r3, #18
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	4a17      	ldr	r2, [pc, #92]	@ (80037b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003758:	5cd3      	ldrb	r3, [r2, r3]
 800375a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d010      	beq.n	8003788 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003766:	4b11      	ldr	r3, [pc, #68]	@ (80037ac <HAL_RCC_GetSysClockFreq+0x94>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	0c5b      	lsrs	r3, r3, #17
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	4a11      	ldr	r2, [pc, #68]	@ (80037b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003772:	5cd3      	ldrb	r3, [r2, r3]
 8003774:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a0d      	ldr	r2, [pc, #52]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800377a:	fb03 f202 	mul.w	r2, r3, r2
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	fbb2 f3f3 	udiv	r3, r2, r3
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	e004      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a0c      	ldr	r2, [pc, #48]	@ (80037bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800378c:	fb02 f303 	mul.w	r3, r2, r3
 8003790:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	613b      	str	r3, [r7, #16]
      break;
 8003796:	e002      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003798:	4b05      	ldr	r3, [pc, #20]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800379a:	613b      	str	r3, [r7, #16]
      break;
 800379c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800379e:	693b      	ldr	r3, [r7, #16]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	371c      	adds	r7, #28
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	40021000 	.word	0x40021000
 80037b0:	007a1200 	.word	0x007a1200
 80037b4:	08009650 	.word	0x08009650
 80037b8:	08009660 	.word	0x08009660
 80037bc:	003d0900 	.word	0x003d0900

080037c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037c4:	4b02      	ldr	r3, [pc, #8]	@ (80037d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80037c6:	681b      	ldr	r3, [r3, #0]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr
 80037d0:	20000000 	.word	0x20000000

080037d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037d8:	f7ff fff2 	bl	80037c0 <HAL_RCC_GetHCLKFreq>
 80037dc:	4602      	mov	r2, r0
 80037de:	4b05      	ldr	r3, [pc, #20]	@ (80037f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	0a1b      	lsrs	r3, r3, #8
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	4903      	ldr	r1, [pc, #12]	@ (80037f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ea:	5ccb      	ldrb	r3, [r1, r3]
 80037ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40021000 	.word	0x40021000
 80037f8:	08009648 	.word	0x08009648

080037fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003800:	f7ff ffde 	bl	80037c0 <HAL_RCC_GetHCLKFreq>
 8003804:	4602      	mov	r2, r0
 8003806:	4b05      	ldr	r3, [pc, #20]	@ (800381c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	0adb      	lsrs	r3, r3, #11
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	4903      	ldr	r1, [pc, #12]	@ (8003820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003812:	5ccb      	ldrb	r3, [r1, r3]
 8003814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003818:	4618      	mov	r0, r3
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40021000 	.word	0x40021000
 8003820:	08009648 	.word	0x08009648

08003824 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800382c:	4b0a      	ldr	r3, [pc, #40]	@ (8003858 <RCC_Delay+0x34>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a0a      	ldr	r2, [pc, #40]	@ (800385c <RCC_Delay+0x38>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	0a5b      	lsrs	r3, r3, #9
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	fb02 f303 	mul.w	r3, r2, r3
 800383e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003840:	bf00      	nop
  }
  while (Delay --);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1e5a      	subs	r2, r3, #1
 8003846:	60fa      	str	r2, [r7, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f9      	bne.n	8003840 <RCC_Delay+0x1c>
}
 800384c:	bf00      	nop
 800384e:	bf00      	nop
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr
 8003858:	20000000 	.word	0x20000000
 800385c:	10624dd3 	.word	0x10624dd3

08003860 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e042      	b.n	80038f8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fe fdd2 	bl	8002430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2224      	movs	r2, #36	@ 0x24
 8003890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 fdf9 	bl	800449c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695a      	ldr	r2, [r3, #20]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	@ 0x28
 8003904:	af02      	add	r7, sp, #8
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	4613      	mov	r3, r2
 800390e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b20      	cmp	r3, #32
 800391e:	d175      	bne.n	8003a0c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <HAL_UART_Transmit+0x2c>
 8003926:	88fb      	ldrh	r3, [r7, #6]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e06e      	b.n	8003a0e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2221      	movs	r2, #33	@ 0x21
 800393a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800393e:	f7fe ffdb 	bl	80028f8 <HAL_GetTick>
 8003942:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	88fa      	ldrh	r2, [r7, #6]
 8003948:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	88fa      	ldrh	r2, [r7, #6]
 800394e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003958:	d108      	bne.n	800396c <HAL_UART_Transmit+0x6c>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d104      	bne.n	800396c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	61bb      	str	r3, [r7, #24]
 800396a:	e003      	b.n	8003974 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003970:	2300      	movs	r3, #0
 8003972:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003974:	e02e      	b.n	80039d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2200      	movs	r2, #0
 800397e:	2180      	movs	r1, #128	@ 0x80
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 fb97 	bl	80040b4 <UART_WaitOnFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e03a      	b.n	8003a0e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10b      	bne.n	80039b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	3302      	adds	r3, #2
 80039b2:	61bb      	str	r3, [r7, #24]
 80039b4:	e007      	b.n	80039c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	781a      	ldrb	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	3301      	adds	r3, #1
 80039c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1cb      	bne.n	8003976 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2200      	movs	r2, #0
 80039e6:	2140      	movs	r1, #64	@ 0x40
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 fb63 	bl	80040b4 <UART_WaitOnFlagUntilTimeout>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e006      	b.n	8003a0e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e000      	b.n	8003a0e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a0c:	2302      	movs	r3, #2
  }
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3720      	adds	r7, #32
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b08a      	sub	sp, #40	@ 0x28
 8003a1a:	af02      	add	r7, sp, #8
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	603b      	str	r3, [r7, #0]
 8003a22:	4613      	mov	r3, r2
 8003a24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	f040 8081 	bne.w	8003b3a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HAL_UART_Receive+0x2e>
 8003a3e:	88fb      	ldrh	r3, [r7, #6]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e079      	b.n	8003b3c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2222      	movs	r2, #34	@ 0x22
 8003a52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a5c:	f7fe ff4c 	bl	80028f8 <HAL_GetTick>
 8003a60:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	88fa      	ldrh	r2, [r7, #6]
 8003a66:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	88fa      	ldrh	r2, [r7, #6]
 8003a6c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a76:	d108      	bne.n	8003a8a <HAL_UART_Receive+0x74>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d104      	bne.n	8003a8a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003a80:	2300      	movs	r3, #0
 8003a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	61bb      	str	r3, [r7, #24]
 8003a88:	e003      	b.n	8003a92 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003a92:	e047      	b.n	8003b24 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	2120      	movs	r1, #32
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 fb08 	bl	80040b4 <UART_WaitOnFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2220      	movs	r2, #32
 8003aae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e042      	b.n	8003b3c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10c      	bne.n	8003ad6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	3302      	adds	r3, #2
 8003ad2:	61bb      	str	r3, [r7, #24]
 8003ad4:	e01f      	b.n	8003b16 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ade:	d007      	beq.n	8003af0 <HAL_UART_Receive+0xda>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10a      	bne.n	8003afe <HAL_UART_Receive+0xe8>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d106      	bne.n	8003afe <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	701a      	strb	r2, [r3, #0]
 8003afc:	e008      	b.n	8003b10 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	3301      	adds	r3, #1
 8003b14:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1b2      	bne.n	8003a94 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	e000      	b.n	8003b3c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003b3a:	2302      	movs	r3, #2
  }
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3720      	adds	r7, #32
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b0ba      	sub	sp, #232	@ 0xe8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003b82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10f      	bne.n	8003baa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d009      	beq.n	8003baa <HAL_UART_IRQHandler+0x66>
 8003b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fbbc 	bl	8004320 <UART_Receive_IT>
      return;
 8003ba8:	e25b      	b.n	8004062 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003baa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 80de 	beq.w	8003d70 <HAL_UART_IRQHandler+0x22c>
 8003bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d106      	bne.n	8003bce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bc4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 80d1 	beq.w	8003d70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00b      	beq.n	8003bf2 <HAL_UART_IRQHandler+0xae>
 8003bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d005      	beq.n	8003bf2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bea:	f043 0201 	orr.w	r2, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00b      	beq.n	8003c16 <HAL_UART_IRQHandler+0xd2>
 8003bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d005      	beq.n	8003c16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0e:	f043 0202 	orr.w	r2, r3, #2
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00b      	beq.n	8003c3a <HAL_UART_IRQHandler+0xf6>
 8003c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d005      	beq.n	8003c3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c32:	f043 0204 	orr.w	r2, r3, #4
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d011      	beq.n	8003c6a <HAL_UART_IRQHandler+0x126>
 8003c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d105      	bne.n	8003c5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c62:	f043 0208 	orr.w	r2, r3, #8
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 81f2 	beq.w	8004058 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_UART_IRQHandler+0x14e>
 8003c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c84:	f003 0320 	and.w	r3, r3, #32
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 fb47 	bl	8004320 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bf14      	ite	ne
 8003ca0:	2301      	movne	r3, #1
 8003ca2:	2300      	moveq	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d103      	bne.n	8003cbe <HAL_UART_IRQHandler+0x17a>
 8003cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d04f      	beq.n	8003d5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fa51 	bl	8004166 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d041      	beq.n	8003d56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3314      	adds	r3, #20
 8003cd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3314      	adds	r3, #20
 8003cfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003cfe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d0e:	e841 2300 	strex	r3, r2, [r1]
 8003d12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1d9      	bne.n	8003cd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d013      	beq.n	8003d4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d2a:	4a7e      	ldr	r2, [pc, #504]	@ (8003f24 <HAL_UART_IRQHandler+0x3e0>)
 8003d2c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fe ff56 	bl	8002be4 <HAL_DMA_Abort_IT>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d016      	beq.n	8003d6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d4c:	e00e      	b.n	8003d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f99c 	bl	800408c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d54:	e00a      	b.n	8003d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f998 	bl	800408c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5c:	e006      	b.n	8003d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f994 	bl	800408c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003d6a:	e175      	b.n	8004058 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d6c:	bf00      	nop
    return;
 8003d6e:	e173      	b.n	8004058 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	f040 814f 	bne.w	8004018 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d7e:	f003 0310 	and.w	r3, r3, #16
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 8148 	beq.w	8004018 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 8141 	beq.w	8004018 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d96:	2300      	movs	r3, #0
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 80b6 	beq.w	8003f28 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003dc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 8145 	beq.w	800405c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003dd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	f080 813e 	bcs.w	800405c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003de6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	f000 8088 	beq.w	8003f04 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	330c      	adds	r3, #12
 8003dfa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e02:	e853 3f00 	ldrex	r3, [r3]
 8003e06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e12:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	330c      	adds	r3, #12
 8003e1c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003e20:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e28:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003e2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e30:	e841 2300 	strex	r3, r2, [r1]
 8003e34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003e38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1d9      	bne.n	8003df4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3314      	adds	r3, #20
 8003e46:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e4a:	e853 3f00 	ldrex	r3, [r3]
 8003e4e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003e50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e52:	f023 0301 	bic.w	r3, r3, #1
 8003e56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3314      	adds	r3, #20
 8003e60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e64:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e68:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e70:	e841 2300 	strex	r3, r2, [r1]
 8003e74:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1e1      	bne.n	8003e40 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3314      	adds	r3, #20
 8003e82:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e86:	e853 3f00 	ldrex	r3, [r3]
 8003e8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3314      	adds	r3, #20
 8003e9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003ea0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ea2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ea6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ea8:	e841 2300 	strex	r3, r2, [r1]
 8003eac:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003eae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e3      	bne.n	8003e7c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	330c      	adds	r3, #12
 8003ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ecc:	e853 3f00 	ldrex	r3, [r3]
 8003ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ed4:	f023 0310 	bic.w	r3, r3, #16
 8003ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	330c      	adds	r3, #12
 8003ee2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003ee6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ee8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003eec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003eee:	e841 2300 	strex	r3, r2, [r1]
 8003ef2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ef4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e3      	bne.n	8003ec2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fe fe35 	bl	8002b6e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	4619      	mov	r1, r3
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f8bf 	bl	800409e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f20:	e09c      	b.n	800405c <HAL_UART_IRQHandler+0x518>
 8003f22:	bf00      	nop
 8003f24:	0800422b 	.word	0x0800422b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 808e 	beq.w	8004060 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003f44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 8089 	beq.w	8004060 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	330c      	adds	r3, #12
 8003f54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f58:	e853 3f00 	ldrex	r3, [r3]
 8003f5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	330c      	adds	r3, #12
 8003f6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003f72:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f7a:	e841 2300 	strex	r3, r2, [r1]
 8003f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1e3      	bne.n	8003f4e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3314      	adds	r3, #20
 8003f8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	623b      	str	r3, [r7, #32]
   return(result);
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	f023 0301 	bic.w	r3, r3, #1
 8003f9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3314      	adds	r3, #20
 8003fa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003faa:	633a      	str	r2, [r7, #48]	@ 0x30
 8003fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fb2:	e841 2300 	strex	r3, r2, [r1]
 8003fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e3      	bne.n	8003f86 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	e853 3f00 	ldrex	r3, [r3]
 8003fda:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0310 	bic.w	r3, r3, #16
 8003fe2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	330c      	adds	r3, #12
 8003fec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003ff0:	61fa      	str	r2, [r7, #28]
 8003ff2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff4:	69b9      	ldr	r1, [r7, #24]
 8003ff6:	69fa      	ldr	r2, [r7, #28]
 8003ff8:	e841 2300 	strex	r3, r2, [r1]
 8003ffc:	617b      	str	r3, [r7, #20]
   return(result);
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e3      	bne.n	8003fcc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800400a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800400e:	4619      	mov	r1, r3
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f844 	bl	800409e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004016:	e023      	b.n	8004060 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800401c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004020:	2b00      	cmp	r3, #0
 8004022:	d009      	beq.n	8004038 <HAL_UART_IRQHandler+0x4f4>
 8004024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f90e 	bl	8004252 <UART_Transmit_IT>
    return;
 8004036:	e014      	b.n	8004062 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800403c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00e      	beq.n	8004062 <HAL_UART_IRQHandler+0x51e>
 8004044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800404c:	2b00      	cmp	r3, #0
 800404e:	d008      	beq.n	8004062 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f94d 	bl	80042f0 <UART_EndTransmit_IT>
    return;
 8004056:	e004      	b.n	8004062 <HAL_UART_IRQHandler+0x51e>
    return;
 8004058:	bf00      	nop
 800405a:	e002      	b.n	8004062 <HAL_UART_IRQHandler+0x51e>
      return;
 800405c:	bf00      	nop
 800405e:	e000      	b.n	8004062 <HAL_UART_IRQHandler+0x51e>
      return;
 8004060:	bf00      	nop
  }
}
 8004062:	37e8      	adds	r7, #232	@ 0xe8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	bc80      	pop	{r7}
 8004078:	4770      	bx	lr

0800407a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr

0800408c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	bc80      	pop	{r7}
 800409c:	4770      	bx	lr

0800409e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	460b      	mov	r3, r1
 80040a8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	4613      	mov	r3, r2
 80040c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040c4:	e03b      	b.n	800413e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040cc:	d037      	beq.n	800413e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ce:	f7fe fc13 	bl	80028f8 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	6a3a      	ldr	r2, [r7, #32]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d302      	bcc.n	80040e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e03a      	b.n	800415e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d023      	beq.n	800413e <UART_WaitOnFlagUntilTimeout+0x8a>
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2b80      	cmp	r3, #128	@ 0x80
 80040fa:	d020      	beq.n	800413e <UART_WaitOnFlagUntilTimeout+0x8a>
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2b40      	cmp	r3, #64	@ 0x40
 8004100:	d01d      	beq.n	800413e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0308 	and.w	r3, r3, #8
 800410c:	2b08      	cmp	r3, #8
 800410e:	d116      	bne.n	800413e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004110:	2300      	movs	r3, #0
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	617b      	str	r3, [r7, #20]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 f81d 	bl	8004166 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2208      	movs	r2, #8
 8004130:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e00f      	b.n	800415e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4013      	ands	r3, r2
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	429a      	cmp	r2, r3
 800414c:	bf0c      	ite	eq
 800414e:	2301      	moveq	r3, #1
 8004150:	2300      	movne	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	429a      	cmp	r2, r3
 800415a:	d0b4      	beq.n	80040c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004166:	b480      	push	{r7}
 8004168:	b095      	sub	sp, #84	@ 0x54
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	330c      	adds	r3, #12
 8004174:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800417e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004180:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004184:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	330c      	adds	r3, #12
 800418c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800418e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004190:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004192:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004194:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800419c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e5      	bne.n	800416e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3314      	adds	r3, #20
 80041a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3314      	adds	r3, #20
 80041c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e5      	bne.n	80041a2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d119      	bne.n	8004212 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	330c      	adds	r3, #12
 80041e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	e853 3f00 	ldrex	r3, [r3]
 80041ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f023 0310 	bic.w	r3, r3, #16
 80041f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	330c      	adds	r3, #12
 80041fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041fe:	61ba      	str	r2, [r7, #24]
 8004200:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004202:	6979      	ldr	r1, [r7, #20]
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	613b      	str	r3, [r7, #16]
   return(result);
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e5      	bne.n	80041de <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004220:	bf00      	nop
 8004222:	3754      	adds	r7, #84	@ 0x54
 8004224:	46bd      	mov	sp, r7
 8004226:	bc80      	pop	{r7}
 8004228:	4770      	bx	lr

0800422a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b084      	sub	sp, #16
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004236:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f7ff ff21 	bl	800408c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800424a:	bf00      	nop
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004252:	b480      	push	{r7}
 8004254:	b085      	sub	sp, #20
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b21      	cmp	r3, #33	@ 0x21
 8004264:	d13e      	bne.n	80042e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800426e:	d114      	bne.n	800429a <UART_Transmit_IT+0x48>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d110      	bne.n	800429a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800428c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	1c9a      	adds	r2, r3, #2
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	621a      	str	r2, [r3, #32]
 8004298:	e008      	b.n	80042ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	1c59      	adds	r1, r3, #1
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6211      	str	r1, [r2, #32]
 80042a4:	781a      	ldrb	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	4619      	mov	r1, r3
 80042ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10f      	bne.n	80042e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e000      	b.n	80042e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042e4:	2302      	movs	r3, #2
  }
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr

080042f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004306:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2220      	movs	r2, #32
 800430c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7ff fea9 	bl	8004068 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08c      	sub	sp, #48	@ 0x30
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b22      	cmp	r3, #34	@ 0x22
 8004332:	f040 80ae 	bne.w	8004492 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800433e:	d117      	bne.n	8004370 <UART_Receive_IT+0x50>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d113      	bne.n	8004370 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004348:	2300      	movs	r3, #0
 800434a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004350:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	b29b      	uxth	r3, r3
 800435a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800435e:	b29a      	uxth	r2, r3
 8004360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004362:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004368:	1c9a      	adds	r2, r3, #2
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	629a      	str	r2, [r3, #40]	@ 0x28
 800436e:	e026      	b.n	80043be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004374:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004376:	2300      	movs	r3, #0
 8004378:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004382:	d007      	beq.n	8004394 <UART_Receive_IT+0x74>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10a      	bne.n	80043a2 <UART_Receive_IT+0x82>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d106      	bne.n	80043a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800439e:	701a      	strb	r2, [r3, #0]
 80043a0:	e008      	b.n	80043b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	4619      	mov	r1, r3
 80043cc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d15d      	bne.n	800448e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0220 	bic.w	r2, r2, #32
 80043e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695a      	ldr	r2, [r3, #20]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0201 	bic.w	r2, r2, #1
 8004400:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2220      	movs	r2, #32
 8004406:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004414:	2b01      	cmp	r3, #1
 8004416:	d135      	bne.n	8004484 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	330c      	adds	r3, #12
 8004424:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	613b      	str	r3, [r7, #16]
   return(result);
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f023 0310 	bic.w	r3, r3, #16
 8004434:	627b      	str	r3, [r7, #36]	@ 0x24
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	330c      	adds	r3, #12
 800443c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800443e:	623a      	str	r2, [r7, #32]
 8004440:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004442:	69f9      	ldr	r1, [r7, #28]
 8004444:	6a3a      	ldr	r2, [r7, #32]
 8004446:	e841 2300 	strex	r3, r2, [r1]
 800444a:	61bb      	str	r3, [r7, #24]
   return(result);
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1e5      	bne.n	800441e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0310 	and.w	r3, r3, #16
 800445c:	2b10      	cmp	r3, #16
 800445e:	d10a      	bne.n	8004476 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004460:	2300      	movs	r3, #0
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800447a:	4619      	mov	r1, r3
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff fe0e 	bl	800409e <HAL_UARTEx_RxEventCallback>
 8004482:	e002      	b.n	800448a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7ff fdf8 	bl	800407a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800448a:	2300      	movs	r3, #0
 800448c:	e002      	b.n	8004494 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	e000      	b.n	8004494 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004492:	2302      	movs	r3, #2
  }
}
 8004494:	4618      	mov	r0, r3
 8004496:	3730      	adds	r7, #48	@ 0x30
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80044d6:	f023 030c 	bic.w	r3, r3, #12
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6812      	ldr	r2, [r2, #0]
 80044de:	68b9      	ldr	r1, [r7, #8]
 80044e0:	430b      	orrs	r3, r1
 80044e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699a      	ldr	r2, [r3, #24]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a2c      	ldr	r2, [pc, #176]	@ (80045b0 <UART_SetConfig+0x114>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d103      	bne.n	800450c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004504:	f7ff f97a 	bl	80037fc <HAL_RCC_GetPCLK2Freq>
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	e002      	b.n	8004512 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800450c:	f7ff f962 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8004510:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	4613      	mov	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	009a      	lsls	r2, r3, #2
 800451c:	441a      	add	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	fbb2 f3f3 	udiv	r3, r2, r3
 8004528:	4a22      	ldr	r2, [pc, #136]	@ (80045b4 <UART_SetConfig+0x118>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	0119      	lsls	r1, r3, #4
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	009a      	lsls	r2, r3, #2
 800453c:	441a      	add	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	fbb2 f2f3 	udiv	r2, r2, r3
 8004548:	4b1a      	ldr	r3, [pc, #104]	@ (80045b4 <UART_SetConfig+0x118>)
 800454a:	fba3 0302 	umull	r0, r3, r3, r2
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	2064      	movs	r0, #100	@ 0x64
 8004552:	fb00 f303 	mul.w	r3, r0, r3
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	3332      	adds	r3, #50	@ 0x32
 800455c:	4a15      	ldr	r2, [pc, #84]	@ (80045b4 <UART_SetConfig+0x118>)
 800455e:	fba2 2303 	umull	r2, r3, r2, r3
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004568:	4419      	add	r1, r3
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4613      	mov	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	009a      	lsls	r2, r3, #2
 8004574:	441a      	add	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004580:	4b0c      	ldr	r3, [pc, #48]	@ (80045b4 <UART_SetConfig+0x118>)
 8004582:	fba3 0302 	umull	r0, r3, r3, r2
 8004586:	095b      	lsrs	r3, r3, #5
 8004588:	2064      	movs	r0, #100	@ 0x64
 800458a:	fb00 f303 	mul.w	r3, r0, r3
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	3332      	adds	r3, #50	@ 0x32
 8004594:	4a07      	ldr	r2, [pc, #28]	@ (80045b4 <UART_SetConfig+0x118>)
 8004596:	fba2 2303 	umull	r2, r3, r2, r3
 800459a:	095b      	lsrs	r3, r3, #5
 800459c:	f003 020f 	and.w	r2, r3, #15
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	440a      	add	r2, r1
 80045a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80045a8:	bf00      	nop
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40013800 	.word	0x40013800
 80045b4:	51eb851f 	.word	0x51eb851f

080045b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	4603      	mov	r3, r0
 80045c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80045c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045ca:	2b84      	cmp	r3, #132	@ 0x84
 80045cc:	d005      	beq.n	80045da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80045ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4413      	add	r3, r2
 80045d6:	3303      	adds	r3, #3
 80045d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80045da:	68fb      	ldr	r3, [r7, #12]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	4770      	bx	lr

080045e6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80045ea:	f000 fadf 	bl	8004bac <vTaskStartScheduler>
  
  return osOK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80045f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045f6:	b089      	sub	sp, #36	@ 0x24
 80045f8:	af04      	add	r7, sp, #16
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d020      	beq.n	8004648 <osThreadCreate+0x54>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d01c      	beq.n	8004648 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685c      	ldr	r4, [r3, #4]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691e      	ldr	r6, [r3, #16]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff ffc9 	bl	80045b8 <makeFreeRtosPriority>
 8004626:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004630:	9202      	str	r2, [sp, #8]
 8004632:	9301      	str	r3, [sp, #4]
 8004634:	9100      	str	r1, [sp, #0]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	4632      	mov	r2, r6
 800463a:	4629      	mov	r1, r5
 800463c:	4620      	mov	r0, r4
 800463e:	f000 f8e8 	bl	8004812 <xTaskCreateStatic>
 8004642:	4603      	mov	r3, r0
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	e01c      	b.n	8004682 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685c      	ldr	r4, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004654:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800465c:	4618      	mov	r0, r3
 800465e:	f7ff ffab 	bl	80045b8 <makeFreeRtosPriority>
 8004662:	4602      	mov	r2, r0
 8004664:	f107 030c 	add.w	r3, r7, #12
 8004668:	9301      	str	r3, [sp, #4]
 800466a:	9200      	str	r2, [sp, #0]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	4632      	mov	r2, r6
 8004670:	4629      	mov	r1, r5
 8004672:	4620      	mov	r0, r4
 8004674:	f000 f92d 	bl	80048d2 <xTaskCreate>
 8004678:	4603      	mov	r3, r0
 800467a:	2b01      	cmp	r3, #1
 800467c:	d001      	beq.n	8004682 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800467e:	2300      	movs	r3, #0
 8004680:	e000      	b.n	8004684 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004682:	68fb      	ldr	r3, [r7, #12]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800468c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <osDelay+0x16>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	e000      	b.n	80046a4 <osDelay+0x18>
 80046a2:	2301      	movs	r3, #1
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 fa4b 	bl	8004b40 <vTaskDelay>
  
  return osOK;
 80046aa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f103 0208 	add.w	r2, r3, #8
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f04f 32ff 	mov.w	r2, #4294967295
 80046cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f103 0208 	add.w	r2, r3, #8
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f103 0208 	add.w	r2, r3, #8
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr

080046f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	bc80      	pop	{r7}
 8004708:	4770      	bx	lr

0800470a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800470a:	b480      	push	{r7}
 800470c:	b085      	sub	sp, #20
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	601a      	str	r2, [r3, #0]
}
 8004746:	bf00      	nop
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr

08004750 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004766:	d103      	bne.n	8004770 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	e00c      	b.n	800478a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3308      	adds	r3, #8
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	e002      	b.n	800477e <vListInsert+0x2e>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	429a      	cmp	r2, r3
 8004788:	d2f6      	bcs.n	8004778 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	601a      	str	r2, [r3, #0]
}
 80047b6:	bf00      	nop
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bc80      	pop	{r7}
 80047be:	4770      	bx	lr

080047c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6892      	ldr	r2, [r2, #8]
 80047d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6852      	ldr	r2, [r2, #4]
 80047e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d103      	bne.n	80047f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	1e5a      	subs	r2, r3, #1
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3714      	adds	r7, #20
 800480c:	46bd      	mov	sp, r7
 800480e:	bc80      	pop	{r7}
 8004810:	4770      	bx	lr

08004812 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004812:	b580      	push	{r7, lr}
 8004814:	b08e      	sub	sp, #56	@ 0x38
 8004816:	af04      	add	r7, sp, #16
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	607a      	str	r2, [r7, #4]
 800481e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10b      	bne.n	800483e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	e7fd      	b.n	800483a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800483e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10b      	bne.n	800485c <xTaskCreateStatic+0x4a>
	__asm volatile
 8004844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	61fb      	str	r3, [r7, #28]
}
 8004856:	bf00      	nop
 8004858:	bf00      	nop
 800485a:	e7fd      	b.n	8004858 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800485c:	2354      	movs	r3, #84	@ 0x54
 800485e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	2b54      	cmp	r3, #84	@ 0x54
 8004864:	d00b      	beq.n	800487e <xTaskCreateStatic+0x6c>
	__asm volatile
 8004866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	61bb      	str	r3, [r7, #24]
}
 8004878:	bf00      	nop
 800487a:	bf00      	nop
 800487c:	e7fd      	b.n	800487a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800487e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004882:	2b00      	cmp	r3, #0
 8004884:	d01e      	beq.n	80048c4 <xTaskCreateStatic+0xb2>
 8004886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01b      	beq.n	80048c4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800488c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800488e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004892:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004894:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004898:	2202      	movs	r2, #2
 800489a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800489e:	2300      	movs	r3, #0
 80048a0:	9303      	str	r3, [sp, #12]
 80048a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a4:	9302      	str	r3, [sp, #8]
 80048a6:	f107 0314 	add.w	r3, r7, #20
 80048aa:	9301      	str	r3, [sp, #4]
 80048ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	68b9      	ldr	r1, [r7, #8]
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 f850 	bl	800495c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80048be:	f000 f8d5 	bl	8004a6c <prvAddNewTaskToReadyList>
 80048c2:	e001      	b.n	80048c8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80048c4:	2300      	movs	r3, #0
 80048c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80048c8:	697b      	ldr	r3, [r7, #20]
	}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3728      	adds	r7, #40	@ 0x28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b08c      	sub	sp, #48	@ 0x30
 80048d6:	af04      	add	r7, sp, #16
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	603b      	str	r3, [r7, #0]
 80048de:	4613      	mov	r3, r2
 80048e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80048e2:	88fb      	ldrh	r3, [r7, #6]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fe92 	bl	8005610 <pvPortMalloc>
 80048ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00e      	beq.n	8004912 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80048f4:	2054      	movs	r0, #84	@ 0x54
 80048f6:	f000 fe8b 	bl	8005610 <pvPortMalloc>
 80048fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	631a      	str	r2, [r3, #48]	@ 0x30
 8004908:	e005      	b.n	8004916 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800490a:	6978      	ldr	r0, [r7, #20]
 800490c:	f000 ff4e 	bl	80057ac <vPortFree>
 8004910:	e001      	b.n	8004916 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004912:	2300      	movs	r3, #0
 8004914:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d017      	beq.n	800494c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004924:	88fa      	ldrh	r2, [r7, #6]
 8004926:	2300      	movs	r3, #0
 8004928:	9303      	str	r3, [sp, #12]
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	9302      	str	r3, [sp, #8]
 800492e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004930:	9301      	str	r3, [sp, #4]
 8004932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68b9      	ldr	r1, [r7, #8]
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 f80e 	bl	800495c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004940:	69f8      	ldr	r0, [r7, #28]
 8004942:	f000 f893 	bl	8004a6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004946:	2301      	movs	r3, #1
 8004948:	61bb      	str	r3, [r7, #24]
 800494a:	e002      	b.n	8004952 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800494c:	f04f 33ff 	mov.w	r3, #4294967295
 8004950:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004952:	69bb      	ldr	r3, [r7, #24]
	}
 8004954:	4618      	mov	r0, r3
 8004956:	3720      	adds	r7, #32
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b088      	sub	sp, #32
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800496a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004974:	3b01      	subs	r3, #1
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	f023 0307 	bic.w	r3, r3, #7
 8004982:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00b      	beq.n	80049a6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	617b      	str	r3, [r7, #20]
}
 80049a0:	bf00      	nop
 80049a2:	bf00      	nop
 80049a4:	e7fd      	b.n	80049a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d01f      	beq.n	80049ec <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049ac:	2300      	movs	r3, #0
 80049ae:	61fb      	str	r3, [r7, #28]
 80049b0:	e012      	b.n	80049d8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	4413      	add	r3, r2
 80049b8:	7819      	ldrb	r1, [r3, #0]
 80049ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	4413      	add	r3, r2
 80049c0:	3334      	adds	r3, #52	@ 0x34
 80049c2:	460a      	mov	r2, r1
 80049c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	4413      	add	r3, r2
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d006      	beq.n	80049e0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	3301      	adds	r3, #1
 80049d6:	61fb      	str	r3, [r7, #28]
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	2b0f      	cmp	r3, #15
 80049dc:	d9e9      	bls.n	80049b2 <prvInitialiseNewTask+0x56>
 80049de:	e000      	b.n	80049e2 <prvInitialiseNewTask+0x86>
			{
				break;
 80049e0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80049e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049ea:	e003      	b.n	80049f4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80049ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80049f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f6:	2b06      	cmp	r3, #6
 80049f8:	d901      	bls.n	80049fe <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80049fa:	2306      	movs	r3, #6
 80049fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80049fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a02:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a08:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a12:	3304      	adds	r3, #4
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7ff fe6c 	bl	80046f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1c:	3318      	adds	r3, #24
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7ff fe67 	bl	80046f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a28:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2c:	f1c3 0207 	rsb	r2, r3, #7
 8004a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a32:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a38:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	68f9      	ldr	r1, [r7, #12]
 8004a4c:	69b8      	ldr	r0, [r7, #24]
 8004a4e:	f000 fc2b 	bl	80052a8 <pxPortInitialiseStack>
 8004a52:	4602      	mov	r2, r0
 8004a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a56:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a64:	bf00      	nop
 8004a66:	3720      	adds	r7, #32
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a74:	f000 fd0a 	bl	800548c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a78:	4b2a      	ldr	r3, [pc, #168]	@ (8004b24 <prvAddNewTaskToReadyList+0xb8>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	4a29      	ldr	r2, [pc, #164]	@ (8004b24 <prvAddNewTaskToReadyList+0xb8>)
 8004a80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a82:	4b29      	ldr	r3, [pc, #164]	@ (8004b28 <prvAddNewTaskToReadyList+0xbc>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d109      	bne.n	8004a9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a8a:	4a27      	ldr	r2, [pc, #156]	@ (8004b28 <prvAddNewTaskToReadyList+0xbc>)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a90:	4b24      	ldr	r3, [pc, #144]	@ (8004b24 <prvAddNewTaskToReadyList+0xb8>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d110      	bne.n	8004aba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a98:	f000 fac4 	bl	8005024 <prvInitialiseTaskLists>
 8004a9c:	e00d      	b.n	8004aba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a9e:	4b23      	ldr	r3, [pc, #140]	@ (8004b2c <prvAddNewTaskToReadyList+0xc0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d109      	bne.n	8004aba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004aa6:	4b20      	ldr	r3, [pc, #128]	@ (8004b28 <prvAddNewTaskToReadyList+0xbc>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d802      	bhi.n	8004aba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ab4:	4a1c      	ldr	r2, [pc, #112]	@ (8004b28 <prvAddNewTaskToReadyList+0xbc>)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004aba:	4b1d      	ldr	r3, [pc, #116]	@ (8004b30 <prvAddNewTaskToReadyList+0xc4>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8004b30 <prvAddNewTaskToReadyList+0xc4>)
 8004ac2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac8:	2201      	movs	r2, #1
 8004aca:	409a      	lsls	r2, r3
 8004acc:	4b19      	ldr	r3, [pc, #100]	@ (8004b34 <prvAddNewTaskToReadyList+0xc8>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	4a18      	ldr	r2, [pc, #96]	@ (8004b34 <prvAddNewTaskToReadyList+0xc8>)
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ada:	4613      	mov	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4a15      	ldr	r2, [pc, #84]	@ (8004b38 <prvAddNewTaskToReadyList+0xcc>)
 8004ae4:	441a      	add	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	3304      	adds	r3, #4
 8004aea:	4619      	mov	r1, r3
 8004aec:	4610      	mov	r0, r2
 8004aee:	f7ff fe0c 	bl	800470a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004af2:	f000 fcfb 	bl	80054ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004af6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b2c <prvAddNewTaskToReadyList+0xc0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00e      	beq.n	8004b1c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004afe:	4b0a      	ldr	r3, [pc, #40]	@ (8004b28 <prvAddNewTaskToReadyList+0xbc>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d207      	bcs.n	8004b1c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b3c <prvAddNewTaskToReadyList+0xd0>)
 8004b0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b1c:	bf00      	nop
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	200008d0 	.word	0x200008d0
 8004b28:	200007d0 	.word	0x200007d0
 8004b2c:	200008dc 	.word	0x200008dc
 8004b30:	200008ec 	.word	0x200008ec
 8004b34:	200008d8 	.word	0x200008d8
 8004b38:	200007d4 	.word	0x200007d4
 8004b3c:	e000ed04 	.word	0xe000ed04

08004b40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d018      	beq.n	8004b84 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b52:	4b14      	ldr	r3, [pc, #80]	@ (8004ba4 <vTaskDelay+0x64>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00b      	beq.n	8004b72 <vTaskDelay+0x32>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	60bb      	str	r3, [r7, #8]
}
 8004b6c:	bf00      	nop
 8004b6e:	bf00      	nop
 8004b70:	e7fd      	b.n	8004b6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b72:	f000 f87d 	bl	8004c70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b76:	2100      	movs	r1, #0
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 fb2f 	bl	80051dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b7e:	f000 f885 	bl	8004c8c <xTaskResumeAll>
 8004b82:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d107      	bne.n	8004b9a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004b8a:	4b07      	ldr	r3, [pc, #28]	@ (8004ba8 <vTaskDelay+0x68>)
 8004b8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b9a:	bf00      	nop
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	200008f8 	.word	0x200008f8
 8004ba8:	e000ed04 	.word	0xe000ed04

08004bac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	@ 0x28
 8004bb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004bba:	463a      	mov	r2, r7
 8004bbc:	1d39      	adds	r1, r7, #4
 8004bbe:	f107 0308 	add.w	r3, r7, #8
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fd f92c 	bl	8001e20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004bc8:	6839      	ldr	r1, [r7, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	9202      	str	r2, [sp, #8]
 8004bd0:	9301      	str	r3, [sp, #4]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	460a      	mov	r2, r1
 8004bda:	491f      	ldr	r1, [pc, #124]	@ (8004c58 <vTaskStartScheduler+0xac>)
 8004bdc:	481f      	ldr	r0, [pc, #124]	@ (8004c5c <vTaskStartScheduler+0xb0>)
 8004bde:	f7ff fe18 	bl	8004812 <xTaskCreateStatic>
 8004be2:	4603      	mov	r3, r0
 8004be4:	4a1e      	ldr	r2, [pc, #120]	@ (8004c60 <vTaskStartScheduler+0xb4>)
 8004be6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004be8:	4b1d      	ldr	r3, [pc, #116]	@ (8004c60 <vTaskStartScheduler+0xb4>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	e001      	b.n	8004bfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d116      	bne.n	8004c2e <vTaskStartScheduler+0x82>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	613b      	str	r3, [r7, #16]
}
 8004c12:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c14:	4b13      	ldr	r3, [pc, #76]	@ (8004c64 <vTaskStartScheduler+0xb8>)
 8004c16:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c1c:	4b12      	ldr	r3, [pc, #72]	@ (8004c68 <vTaskStartScheduler+0xbc>)
 8004c1e:	2201      	movs	r2, #1
 8004c20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c22:	4b12      	ldr	r3, [pc, #72]	@ (8004c6c <vTaskStartScheduler+0xc0>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c28:	f000 fbbe 	bl	80053a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c2c:	e00f      	b.n	8004c4e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c34:	d10b      	bne.n	8004c4e <vTaskStartScheduler+0xa2>
	__asm volatile
 8004c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3a:	f383 8811 	msr	BASEPRI, r3
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f3bf 8f4f 	dsb	sy
 8004c46:	60fb      	str	r3, [r7, #12]
}
 8004c48:	bf00      	nop
 8004c4a:	bf00      	nop
 8004c4c:	e7fd      	b.n	8004c4a <vTaskStartScheduler+0x9e>
}
 8004c4e:	bf00      	nop
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	08009630 	.word	0x08009630
 8004c5c:	08004ff5 	.word	0x08004ff5
 8004c60:	200008f4 	.word	0x200008f4
 8004c64:	200008f0 	.word	0x200008f0
 8004c68:	200008dc 	.word	0x200008dc
 8004c6c:	200008d4 	.word	0x200008d4

08004c70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c74:	4b04      	ldr	r3, [pc, #16]	@ (8004c88 <vTaskSuspendAll+0x18>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	4a03      	ldr	r2, [pc, #12]	@ (8004c88 <vTaskSuspendAll+0x18>)
 8004c7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c7e:	bf00      	nop
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bc80      	pop	{r7}
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	200008f8 	.word	0x200008f8

08004c8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c96:	2300      	movs	r3, #0
 8004c98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c9a:	4b42      	ldr	r3, [pc, #264]	@ (8004da4 <xTaskResumeAll+0x118>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10b      	bne.n	8004cba <xTaskResumeAll+0x2e>
	__asm volatile
 8004ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	603b      	str	r3, [r7, #0]
}
 8004cb4:	bf00      	nop
 8004cb6:	bf00      	nop
 8004cb8:	e7fd      	b.n	8004cb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004cba:	f000 fbe7 	bl	800548c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004cbe:	4b39      	ldr	r3, [pc, #228]	@ (8004da4 <xTaskResumeAll+0x118>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	4a37      	ldr	r2, [pc, #220]	@ (8004da4 <xTaskResumeAll+0x118>)
 8004cc6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cc8:	4b36      	ldr	r3, [pc, #216]	@ (8004da4 <xTaskResumeAll+0x118>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d161      	bne.n	8004d94 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cd0:	4b35      	ldr	r3, [pc, #212]	@ (8004da8 <xTaskResumeAll+0x11c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d05d      	beq.n	8004d94 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cd8:	e02e      	b.n	8004d38 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cda:	4b34      	ldr	r3, [pc, #208]	@ (8004dac <xTaskResumeAll+0x120>)
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3318      	adds	r3, #24
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff fd6a 	bl	80047c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	3304      	adds	r3, #4
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff fd65 	bl	80047c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	409a      	lsls	r2, r3
 8004cfe:	4b2c      	ldr	r3, [pc, #176]	@ (8004db0 <xTaskResumeAll+0x124>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	4a2a      	ldr	r2, [pc, #168]	@ (8004db0 <xTaskResumeAll+0x124>)
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4a27      	ldr	r2, [pc, #156]	@ (8004db4 <xTaskResumeAll+0x128>)
 8004d16:	441a      	add	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4610      	mov	r0, r2
 8004d20:	f7ff fcf3 	bl	800470a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d28:	4b23      	ldr	r3, [pc, #140]	@ (8004db8 <xTaskResumeAll+0x12c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d302      	bcc.n	8004d38 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004d32:	4b22      	ldr	r3, [pc, #136]	@ (8004dbc <xTaskResumeAll+0x130>)
 8004d34:	2201      	movs	r2, #1
 8004d36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d38:	4b1c      	ldr	r3, [pc, #112]	@ (8004dac <xTaskResumeAll+0x120>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1cc      	bne.n	8004cda <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d46:	f000 fa0b 	bl	8005160 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8004dc0 <xTaskResumeAll+0x134>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d010      	beq.n	8004d78 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d56:	f000 f837 	bl	8004dc8 <xTaskIncrementTick>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004d60:	4b16      	ldr	r3, [pc, #88]	@ (8004dbc <xTaskResumeAll+0x130>)
 8004d62:	2201      	movs	r2, #1
 8004d64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f1      	bne.n	8004d56 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004d72:	4b13      	ldr	r3, [pc, #76]	@ (8004dc0 <xTaskResumeAll+0x134>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d78:	4b10      	ldr	r3, [pc, #64]	@ (8004dbc <xTaskResumeAll+0x130>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d009      	beq.n	8004d94 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d80:	2301      	movs	r3, #1
 8004d82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d84:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc4 <xTaskResumeAll+0x138>)
 8004d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d94:	f000 fbaa 	bl	80054ec <vPortExitCritical>

	return xAlreadyYielded;
 8004d98:	68bb      	ldr	r3, [r7, #8]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	200008f8 	.word	0x200008f8
 8004da8:	200008d0 	.word	0x200008d0
 8004dac:	20000890 	.word	0x20000890
 8004db0:	200008d8 	.word	0x200008d8
 8004db4:	200007d4 	.word	0x200007d4
 8004db8:	200007d0 	.word	0x200007d0
 8004dbc:	200008e4 	.word	0x200008e4
 8004dc0:	200008e0 	.word	0x200008e0
 8004dc4:	e000ed04 	.word	0xe000ed04

08004dc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dd2:	4b4f      	ldr	r3, [pc, #316]	@ (8004f10 <xTaskIncrementTick+0x148>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f040 808f 	bne.w	8004efa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ddc:	4b4d      	ldr	r3, [pc, #308]	@ (8004f14 <xTaskIncrementTick+0x14c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3301      	adds	r3, #1
 8004de2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004de4:	4a4b      	ldr	r2, [pc, #300]	@ (8004f14 <xTaskIncrementTick+0x14c>)
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d121      	bne.n	8004e34 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004df0:	4b49      	ldr	r3, [pc, #292]	@ (8004f18 <xTaskIncrementTick+0x150>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00b      	beq.n	8004e12 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	603b      	str	r3, [r7, #0]
}
 8004e0c:	bf00      	nop
 8004e0e:	bf00      	nop
 8004e10:	e7fd      	b.n	8004e0e <xTaskIncrementTick+0x46>
 8004e12:	4b41      	ldr	r3, [pc, #260]	@ (8004f18 <xTaskIncrementTick+0x150>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	4b40      	ldr	r3, [pc, #256]	@ (8004f1c <xTaskIncrementTick+0x154>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a3e      	ldr	r2, [pc, #248]	@ (8004f18 <xTaskIncrementTick+0x150>)
 8004e1e:	6013      	str	r3, [r2, #0]
 8004e20:	4a3e      	ldr	r2, [pc, #248]	@ (8004f1c <xTaskIncrementTick+0x154>)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	4b3e      	ldr	r3, [pc, #248]	@ (8004f20 <xTaskIncrementTick+0x158>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	4a3c      	ldr	r2, [pc, #240]	@ (8004f20 <xTaskIncrementTick+0x158>)
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	f000 f996 	bl	8005160 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e34:	4b3b      	ldr	r3, [pc, #236]	@ (8004f24 <xTaskIncrementTick+0x15c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d348      	bcc.n	8004ed0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e3e:	4b36      	ldr	r3, [pc, #216]	@ (8004f18 <xTaskIncrementTick+0x150>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d104      	bne.n	8004e52 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e48:	4b36      	ldr	r3, [pc, #216]	@ (8004f24 <xTaskIncrementTick+0x15c>)
 8004e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e4e:	601a      	str	r2, [r3, #0]
					break;
 8004e50:	e03e      	b.n	8004ed0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e52:	4b31      	ldr	r3, [pc, #196]	@ (8004f18 <xTaskIncrementTick+0x150>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d203      	bcs.n	8004e72 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e6a:	4a2e      	ldr	r2, [pc, #184]	@ (8004f24 <xTaskIncrementTick+0x15c>)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e70:	e02e      	b.n	8004ed0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	3304      	adds	r3, #4
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff fca2 	bl	80047c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d004      	beq.n	8004e8e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	3318      	adds	r3, #24
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff fc99 	bl	80047c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e92:	2201      	movs	r2, #1
 8004e94:	409a      	lsls	r2, r3
 8004e96:	4b24      	ldr	r3, [pc, #144]	@ (8004f28 <xTaskIncrementTick+0x160>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	4a22      	ldr	r2, [pc, #136]	@ (8004f28 <xTaskIncrementTick+0x160>)
 8004e9e:	6013      	str	r3, [r2, #0]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4a1f      	ldr	r2, [pc, #124]	@ (8004f2c <xTaskIncrementTick+0x164>)
 8004eae:	441a      	add	r2, r3
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	f7ff fc27 	bl	800470a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f30 <xTaskIncrementTick+0x168>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d3b9      	bcc.n	8004e3e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ece:	e7b6      	b.n	8004e3e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ed0:	4b17      	ldr	r3, [pc, #92]	@ (8004f30 <xTaskIncrementTick+0x168>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed6:	4915      	ldr	r1, [pc, #84]	@ (8004f2c <xTaskIncrementTick+0x164>)
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d901      	bls.n	8004eec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004eec:	4b11      	ldr	r3, [pc, #68]	@ (8004f34 <xTaskIncrementTick+0x16c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d007      	beq.n	8004f04 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	e004      	b.n	8004f04 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004efa:	4b0f      	ldr	r3, [pc, #60]	@ (8004f38 <xTaskIncrementTick+0x170>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3301      	adds	r3, #1
 8004f00:	4a0d      	ldr	r2, [pc, #52]	@ (8004f38 <xTaskIncrementTick+0x170>)
 8004f02:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f04:	697b      	ldr	r3, [r7, #20]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	200008f8 	.word	0x200008f8
 8004f14:	200008d4 	.word	0x200008d4
 8004f18:	20000888 	.word	0x20000888
 8004f1c:	2000088c 	.word	0x2000088c
 8004f20:	200008e8 	.word	0x200008e8
 8004f24:	200008f0 	.word	0x200008f0
 8004f28:	200008d8 	.word	0x200008d8
 8004f2c:	200007d4 	.word	0x200007d4
 8004f30:	200007d0 	.word	0x200007d0
 8004f34:	200008e4 	.word	0x200008e4
 8004f38:	200008e0 	.word	0x200008e0

08004f3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f42:	4b27      	ldr	r3, [pc, #156]	@ (8004fe0 <vTaskSwitchContext+0xa4>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f4a:	4b26      	ldr	r3, [pc, #152]	@ (8004fe4 <vTaskSwitchContext+0xa8>)
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f50:	e040      	b.n	8004fd4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004f52:	4b24      	ldr	r3, [pc, #144]	@ (8004fe4 <vTaskSwitchContext+0xa8>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f58:	4b23      	ldr	r3, [pc, #140]	@ (8004fe8 <vTaskSwitchContext+0xac>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	fab3 f383 	clz	r3, r3
 8004f64:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004f66:	7afb      	ldrb	r3, [r7, #11]
 8004f68:	f1c3 031f 	rsb	r3, r3, #31
 8004f6c:	617b      	str	r3, [r7, #20]
 8004f6e:	491f      	ldr	r1, [pc, #124]	@ (8004fec <vTaskSwitchContext+0xb0>)
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	440b      	add	r3, r1
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10b      	bne.n	8004f9a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	607b      	str	r3, [r7, #4]
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop
 8004f98:	e7fd      	b.n	8004f96 <vTaskSwitchContext+0x5a>
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4a11      	ldr	r2, [pc, #68]	@ (8004fec <vTaskSwitchContext+0xb0>)
 8004fa6:	4413      	add	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	605a      	str	r2, [r3, #4]
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	3308      	adds	r3, #8
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d104      	bne.n	8004fca <vTaskSwitchContext+0x8e>
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	605a      	str	r2, [r3, #4]
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	4a07      	ldr	r2, [pc, #28]	@ (8004ff0 <vTaskSwitchContext+0xb4>)
 8004fd2:	6013      	str	r3, [r2, #0]
}
 8004fd4:	bf00      	nop
 8004fd6:	371c      	adds	r7, #28
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bc80      	pop	{r7}
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	200008f8 	.word	0x200008f8
 8004fe4:	200008e4 	.word	0x200008e4
 8004fe8:	200008d8 	.word	0x200008d8
 8004fec:	200007d4 	.word	0x200007d4
 8004ff0:	200007d0 	.word	0x200007d0

08004ff4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ffc:	f000 f852 	bl	80050a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005000:	4b06      	ldr	r3, [pc, #24]	@ (800501c <prvIdleTask+0x28>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d9f9      	bls.n	8004ffc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005008:	4b05      	ldr	r3, [pc, #20]	@ (8005020 <prvIdleTask+0x2c>)
 800500a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005018:	e7f0      	b.n	8004ffc <prvIdleTask+0x8>
 800501a:	bf00      	nop
 800501c:	200007d4 	.word	0x200007d4
 8005020:	e000ed04 	.word	0xe000ed04

08005024 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800502a:	2300      	movs	r3, #0
 800502c:	607b      	str	r3, [r7, #4]
 800502e:	e00c      	b.n	800504a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	4613      	mov	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4a12      	ldr	r2, [pc, #72]	@ (8005084 <prvInitialiseTaskLists+0x60>)
 800503c:	4413      	add	r3, r2
 800503e:	4618      	mov	r0, r3
 8005040:	f7ff fb38 	bl	80046b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3301      	adds	r3, #1
 8005048:	607b      	str	r3, [r7, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b06      	cmp	r3, #6
 800504e:	d9ef      	bls.n	8005030 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005050:	480d      	ldr	r0, [pc, #52]	@ (8005088 <prvInitialiseTaskLists+0x64>)
 8005052:	f7ff fb2f 	bl	80046b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005056:	480d      	ldr	r0, [pc, #52]	@ (800508c <prvInitialiseTaskLists+0x68>)
 8005058:	f7ff fb2c 	bl	80046b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800505c:	480c      	ldr	r0, [pc, #48]	@ (8005090 <prvInitialiseTaskLists+0x6c>)
 800505e:	f7ff fb29 	bl	80046b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005062:	480c      	ldr	r0, [pc, #48]	@ (8005094 <prvInitialiseTaskLists+0x70>)
 8005064:	f7ff fb26 	bl	80046b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005068:	480b      	ldr	r0, [pc, #44]	@ (8005098 <prvInitialiseTaskLists+0x74>)
 800506a:	f7ff fb23 	bl	80046b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800506e:	4b0b      	ldr	r3, [pc, #44]	@ (800509c <prvInitialiseTaskLists+0x78>)
 8005070:	4a05      	ldr	r2, [pc, #20]	@ (8005088 <prvInitialiseTaskLists+0x64>)
 8005072:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005074:	4b0a      	ldr	r3, [pc, #40]	@ (80050a0 <prvInitialiseTaskLists+0x7c>)
 8005076:	4a05      	ldr	r2, [pc, #20]	@ (800508c <prvInitialiseTaskLists+0x68>)
 8005078:	601a      	str	r2, [r3, #0]
}
 800507a:	bf00      	nop
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	200007d4 	.word	0x200007d4
 8005088:	20000860 	.word	0x20000860
 800508c:	20000874 	.word	0x20000874
 8005090:	20000890 	.word	0x20000890
 8005094:	200008a4 	.word	0x200008a4
 8005098:	200008bc 	.word	0x200008bc
 800509c:	20000888 	.word	0x20000888
 80050a0:	2000088c 	.word	0x2000088c

080050a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050aa:	e019      	b.n	80050e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050ac:	f000 f9ee 	bl	800548c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050b0:	4b10      	ldr	r3, [pc, #64]	@ (80050f4 <prvCheckTasksWaitingTermination+0x50>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3304      	adds	r3, #4
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff fb7f 	bl	80047c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80050c2:	4b0d      	ldr	r3, [pc, #52]	@ (80050f8 <prvCheckTasksWaitingTermination+0x54>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	4a0b      	ldr	r2, [pc, #44]	@ (80050f8 <prvCheckTasksWaitingTermination+0x54>)
 80050ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80050cc:	4b0b      	ldr	r3, [pc, #44]	@ (80050fc <prvCheckTasksWaitingTermination+0x58>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3b01      	subs	r3, #1
 80050d2:	4a0a      	ldr	r2, [pc, #40]	@ (80050fc <prvCheckTasksWaitingTermination+0x58>)
 80050d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80050d6:	f000 fa09 	bl	80054ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f810 	bl	8005100 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050e0:	4b06      	ldr	r3, [pc, #24]	@ (80050fc <prvCheckTasksWaitingTermination+0x58>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e1      	bne.n	80050ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80050e8:	bf00      	nop
 80050ea:	bf00      	nop
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	200008a4 	.word	0x200008a4
 80050f8:	200008d0 	.word	0x200008d0
 80050fc:	200008b8 	.word	0x200008b8

08005100 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800510e:	2b00      	cmp	r3, #0
 8005110:	d108      	bne.n	8005124 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005116:	4618      	mov	r0, r3
 8005118:	f000 fb48 	bl	80057ac <vPortFree>
				vPortFree( pxTCB );
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fb45 	bl	80057ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005122:	e019      	b.n	8005158 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800512a:	2b01      	cmp	r3, #1
 800512c:	d103      	bne.n	8005136 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fb3c 	bl	80057ac <vPortFree>
	}
 8005134:	e010      	b.n	8005158 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800513c:	2b02      	cmp	r3, #2
 800513e:	d00b      	beq.n	8005158 <prvDeleteTCB+0x58>
	__asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	60fb      	str	r3, [r7, #12]
}
 8005152:	bf00      	nop
 8005154:	bf00      	nop
 8005156:	e7fd      	b.n	8005154 <prvDeleteTCB+0x54>
	}
 8005158:	bf00      	nop
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005166:	4b0c      	ldr	r3, [pc, #48]	@ (8005198 <prvResetNextTaskUnblockTime+0x38>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d104      	bne.n	800517a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005170:	4b0a      	ldr	r3, [pc, #40]	@ (800519c <prvResetNextTaskUnblockTime+0x3c>)
 8005172:	f04f 32ff 	mov.w	r2, #4294967295
 8005176:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005178:	e008      	b.n	800518c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800517a:	4b07      	ldr	r3, [pc, #28]	@ (8005198 <prvResetNextTaskUnblockTime+0x38>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	4a04      	ldr	r2, [pc, #16]	@ (800519c <prvResetNextTaskUnblockTime+0x3c>)
 800518a:	6013      	str	r3, [r2, #0]
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	bc80      	pop	{r7}
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	20000888 	.word	0x20000888
 800519c:	200008f0 	.word	0x200008f0

080051a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80051a6:	4b0b      	ldr	r3, [pc, #44]	@ (80051d4 <xTaskGetSchedulerState+0x34>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d102      	bne.n	80051b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051ae:	2301      	movs	r3, #1
 80051b0:	607b      	str	r3, [r7, #4]
 80051b2:	e008      	b.n	80051c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051b4:	4b08      	ldr	r3, [pc, #32]	@ (80051d8 <xTaskGetSchedulerState+0x38>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d102      	bne.n	80051c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80051bc:	2302      	movs	r3, #2
 80051be:	607b      	str	r3, [r7, #4]
 80051c0:	e001      	b.n	80051c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80051c2:	2300      	movs	r3, #0
 80051c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80051c6:	687b      	ldr	r3, [r7, #4]
	}
 80051c8:	4618      	mov	r0, r3
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bc80      	pop	{r7}
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	200008dc 	.word	0x200008dc
 80051d8:	200008f8 	.word	0x200008f8

080051dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80051e6:	4b29      	ldr	r3, [pc, #164]	@ (800528c <prvAddCurrentTaskToDelayedList+0xb0>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051ec:	4b28      	ldr	r3, [pc, #160]	@ (8005290 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3304      	adds	r3, #4
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7ff fae4 	bl	80047c0 <uxListRemove>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10b      	bne.n	8005216 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80051fe:	4b24      	ldr	r3, [pc, #144]	@ (8005290 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005204:	2201      	movs	r2, #1
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	43da      	mvns	r2, r3
 800520c:	4b21      	ldr	r3, [pc, #132]	@ (8005294 <prvAddCurrentTaskToDelayedList+0xb8>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4013      	ands	r3, r2
 8005212:	4a20      	ldr	r2, [pc, #128]	@ (8005294 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005214:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521c:	d10a      	bne.n	8005234 <prvAddCurrentTaskToDelayedList+0x58>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d007      	beq.n	8005234 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005224:	4b1a      	ldr	r3, [pc, #104]	@ (8005290 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3304      	adds	r3, #4
 800522a:	4619      	mov	r1, r3
 800522c:	481a      	ldr	r0, [pc, #104]	@ (8005298 <prvAddCurrentTaskToDelayedList+0xbc>)
 800522e:	f7ff fa6c 	bl	800470a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005232:	e026      	b.n	8005282 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4413      	add	r3, r2
 800523a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800523c:	4b14      	ldr	r3, [pc, #80]	@ (8005290 <prvAddCurrentTaskToDelayedList+0xb4>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	429a      	cmp	r2, r3
 800524a:	d209      	bcs.n	8005260 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800524c:	4b13      	ldr	r3, [pc, #76]	@ (800529c <prvAddCurrentTaskToDelayedList+0xc0>)
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	4b0f      	ldr	r3, [pc, #60]	@ (8005290 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3304      	adds	r3, #4
 8005256:	4619      	mov	r1, r3
 8005258:	4610      	mov	r0, r2
 800525a:	f7ff fa79 	bl	8004750 <vListInsert>
}
 800525e:	e010      	b.n	8005282 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005260:	4b0f      	ldr	r3, [pc, #60]	@ (80052a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	4b0a      	ldr	r3, [pc, #40]	@ (8005290 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3304      	adds	r3, #4
 800526a:	4619      	mov	r1, r3
 800526c:	4610      	mov	r0, r2
 800526e:	f7ff fa6f 	bl	8004750 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005272:	4b0c      	ldr	r3, [pc, #48]	@ (80052a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	429a      	cmp	r2, r3
 800527a:	d202      	bcs.n	8005282 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800527c:	4a09      	ldr	r2, [pc, #36]	@ (80052a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	6013      	str	r3, [r2, #0]
}
 8005282:	bf00      	nop
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	200008d4 	.word	0x200008d4
 8005290:	200007d0 	.word	0x200007d0
 8005294:	200008d8 	.word	0x200008d8
 8005298:	200008bc 	.word	0x200008bc
 800529c:	2000088c 	.word	0x2000088c
 80052a0:	20000888 	.word	0x20000888
 80052a4:	200008f0 	.word	0x200008f0

080052a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	3b04      	subs	r3, #4
 80052b8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80052c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3b04      	subs	r3, #4
 80052c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f023 0201 	bic.w	r2, r3, #1
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	3b04      	subs	r3, #4
 80052d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052d8:	4a08      	ldr	r2, [pc, #32]	@ (80052fc <pxPortInitialiseStack+0x54>)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	3b14      	subs	r3, #20
 80052e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	3b20      	subs	r3, #32
 80052ee:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052f0:	68fb      	ldr	r3, [r7, #12]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bc80      	pop	{r7}
 80052fa:	4770      	bx	lr
 80052fc:	08005301 	.word	0x08005301

08005300 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005306:	2300      	movs	r3, #0
 8005308:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800530a:	4b12      	ldr	r3, [pc, #72]	@ (8005354 <prvTaskExitError+0x54>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005312:	d00b      	beq.n	800532c <prvTaskExitError+0x2c>
	__asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	60fb      	str	r3, [r7, #12]
}
 8005326:	bf00      	nop
 8005328:	bf00      	nop
 800532a:	e7fd      	b.n	8005328 <prvTaskExitError+0x28>
	__asm volatile
 800532c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	60bb      	str	r3, [r7, #8]
}
 800533e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005340:	bf00      	nop
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0fc      	beq.n	8005342 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005348:	bf00      	nop
 800534a:	bf00      	nop
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	bc80      	pop	{r7}
 8005352:	4770      	bx	lr
 8005354:	2000000c 	.word	0x2000000c
	...

08005360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005360:	4b07      	ldr	r3, [pc, #28]	@ (8005380 <pxCurrentTCBConst2>)
 8005362:	6819      	ldr	r1, [r3, #0]
 8005364:	6808      	ldr	r0, [r1, #0]
 8005366:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800536a:	f380 8809 	msr	PSP, r0
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f04f 0000 	mov.w	r0, #0
 8005376:	f380 8811 	msr	BASEPRI, r0
 800537a:	f04e 0e0d 	orr.w	lr, lr, #13
 800537e:	4770      	bx	lr

08005380 <pxCurrentTCBConst2>:
 8005380:	200007d0 	.word	0x200007d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005384:	bf00      	nop
 8005386:	bf00      	nop

08005388 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005388:	4806      	ldr	r0, [pc, #24]	@ (80053a4 <prvPortStartFirstTask+0x1c>)
 800538a:	6800      	ldr	r0, [r0, #0]
 800538c:	6800      	ldr	r0, [r0, #0]
 800538e:	f380 8808 	msr	MSP, r0
 8005392:	b662      	cpsie	i
 8005394:	b661      	cpsie	f
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	df00      	svc	0
 80053a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80053a2:	bf00      	nop
 80053a4:	e000ed08 	.word	0xe000ed08

080053a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053ae:	4b32      	ldr	r3, [pc, #200]	@ (8005478 <xPortStartScheduler+0xd0>)
 80053b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	22ff      	movs	r2, #255	@ 0xff
 80053be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80053c8:	78fb      	ldrb	r3, [r7, #3]
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	4b2a      	ldr	r3, [pc, #168]	@ (800547c <xPortStartScheduler+0xd4>)
 80053d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80053d6:	4b2a      	ldr	r3, [pc, #168]	@ (8005480 <xPortStartScheduler+0xd8>)
 80053d8:	2207      	movs	r2, #7
 80053da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053dc:	e009      	b.n	80053f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80053de:	4b28      	ldr	r3, [pc, #160]	@ (8005480 <xPortStartScheduler+0xd8>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	4a26      	ldr	r2, [pc, #152]	@ (8005480 <xPortStartScheduler+0xd8>)
 80053e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053e8:	78fb      	ldrb	r3, [r7, #3]
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053f2:	78fb      	ldrb	r3, [r7, #3]
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053fa:	2b80      	cmp	r3, #128	@ 0x80
 80053fc:	d0ef      	beq.n	80053de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053fe:	4b20      	ldr	r3, [pc, #128]	@ (8005480 <xPortStartScheduler+0xd8>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f1c3 0307 	rsb	r3, r3, #7
 8005406:	2b04      	cmp	r3, #4
 8005408:	d00b      	beq.n	8005422 <xPortStartScheduler+0x7a>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	60bb      	str	r3, [r7, #8]
}
 800541c:	bf00      	nop
 800541e:	bf00      	nop
 8005420:	e7fd      	b.n	800541e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005422:	4b17      	ldr	r3, [pc, #92]	@ (8005480 <xPortStartScheduler+0xd8>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	021b      	lsls	r3, r3, #8
 8005428:	4a15      	ldr	r2, [pc, #84]	@ (8005480 <xPortStartScheduler+0xd8>)
 800542a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800542c:	4b14      	ldr	r3, [pc, #80]	@ (8005480 <xPortStartScheduler+0xd8>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005434:	4a12      	ldr	r2, [pc, #72]	@ (8005480 <xPortStartScheduler+0xd8>)
 8005436:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	b2da      	uxtb	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005440:	4b10      	ldr	r3, [pc, #64]	@ (8005484 <xPortStartScheduler+0xdc>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a0f      	ldr	r2, [pc, #60]	@ (8005484 <xPortStartScheduler+0xdc>)
 8005446:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800544a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800544c:	4b0d      	ldr	r3, [pc, #52]	@ (8005484 <xPortStartScheduler+0xdc>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a0c      	ldr	r2, [pc, #48]	@ (8005484 <xPortStartScheduler+0xdc>)
 8005452:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005456:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005458:	f000 f8b8 	bl	80055cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800545c:	4b0a      	ldr	r3, [pc, #40]	@ (8005488 <xPortStartScheduler+0xe0>)
 800545e:	2200      	movs	r2, #0
 8005460:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005462:	f7ff ff91 	bl	8005388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005466:	f7ff fd69 	bl	8004f3c <vTaskSwitchContext>
	prvTaskExitError();
 800546a:	f7ff ff49 	bl	8005300 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	e000e400 	.word	0xe000e400
 800547c:	200008fc 	.word	0x200008fc
 8005480:	20000900 	.word	0x20000900
 8005484:	e000ed20 	.word	0xe000ed20
 8005488:	2000000c 	.word	0x2000000c

0800548c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	607b      	str	r3, [r7, #4]
}
 80054a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80054a6:	4b0f      	ldr	r3, [pc, #60]	@ (80054e4 <vPortEnterCritical+0x58>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3301      	adds	r3, #1
 80054ac:	4a0d      	ldr	r2, [pc, #52]	@ (80054e4 <vPortEnterCritical+0x58>)
 80054ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80054b0:	4b0c      	ldr	r3, [pc, #48]	@ (80054e4 <vPortEnterCritical+0x58>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d110      	bne.n	80054da <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80054b8:	4b0b      	ldr	r3, [pc, #44]	@ (80054e8 <vPortEnterCritical+0x5c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00b      	beq.n	80054da <vPortEnterCritical+0x4e>
	__asm volatile
 80054c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	603b      	str	r3, [r7, #0]
}
 80054d4:	bf00      	nop
 80054d6:	bf00      	nop
 80054d8:	e7fd      	b.n	80054d6 <vPortEnterCritical+0x4a>
	}
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	bc80      	pop	{r7}
 80054e2:	4770      	bx	lr
 80054e4:	2000000c 	.word	0x2000000c
 80054e8:	e000ed04 	.word	0xe000ed04

080054ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054f2:	4b12      	ldr	r3, [pc, #72]	@ (800553c <vPortExitCritical+0x50>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10b      	bne.n	8005512 <vPortExitCritical+0x26>
	__asm volatile
 80054fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	607b      	str	r3, [r7, #4]
}
 800550c:	bf00      	nop
 800550e:	bf00      	nop
 8005510:	e7fd      	b.n	800550e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005512:	4b0a      	ldr	r3, [pc, #40]	@ (800553c <vPortExitCritical+0x50>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3b01      	subs	r3, #1
 8005518:	4a08      	ldr	r2, [pc, #32]	@ (800553c <vPortExitCritical+0x50>)
 800551a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800551c:	4b07      	ldr	r3, [pc, #28]	@ (800553c <vPortExitCritical+0x50>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d105      	bne.n	8005530 <vPortExitCritical+0x44>
 8005524:	2300      	movs	r3, #0
 8005526:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800552e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	2000000c 	.word	0x2000000c

08005540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005540:	f3ef 8009 	mrs	r0, PSP
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	4b0d      	ldr	r3, [pc, #52]	@ (8005580 <pxCurrentTCBConst>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005550:	6010      	str	r0, [r2, #0]
 8005552:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005556:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800555a:	f380 8811 	msr	BASEPRI, r0
 800555e:	f7ff fced 	bl	8004f3c <vTaskSwitchContext>
 8005562:	f04f 0000 	mov.w	r0, #0
 8005566:	f380 8811 	msr	BASEPRI, r0
 800556a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800556e:	6819      	ldr	r1, [r3, #0]
 8005570:	6808      	ldr	r0, [r1, #0]
 8005572:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005576:	f380 8809 	msr	PSP, r0
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	4770      	bx	lr

08005580 <pxCurrentTCBConst>:
 8005580:	200007d0 	.word	0x200007d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop

08005588 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	607b      	str	r3, [r7, #4]
}
 80055a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80055a2:	f7ff fc11 	bl	8004dc8 <xTaskIncrementTick>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055ac:	4b06      	ldr	r3, [pc, #24]	@ (80055c8 <xPortSysTickHandler+0x40>)
 80055ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	2300      	movs	r3, #0
 80055b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	f383 8811 	msr	BASEPRI, r3
}
 80055be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80055c0:	bf00      	nop
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	e000ed04 	.word	0xe000ed04

080055cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055d0:	4b0a      	ldr	r3, [pc, #40]	@ (80055fc <vPortSetupTimerInterrupt+0x30>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005600 <vPortSetupTimerInterrupt+0x34>)
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055dc:	4b09      	ldr	r3, [pc, #36]	@ (8005604 <vPortSetupTimerInterrupt+0x38>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a09      	ldr	r2, [pc, #36]	@ (8005608 <vPortSetupTimerInterrupt+0x3c>)
 80055e2:	fba2 2303 	umull	r2, r3, r2, r3
 80055e6:	099b      	lsrs	r3, r3, #6
 80055e8:	4a08      	ldr	r2, [pc, #32]	@ (800560c <vPortSetupTimerInterrupt+0x40>)
 80055ea:	3b01      	subs	r3, #1
 80055ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055ee:	4b03      	ldr	r3, [pc, #12]	@ (80055fc <vPortSetupTimerInterrupt+0x30>)
 80055f0:	2207      	movs	r2, #7
 80055f2:	601a      	str	r2, [r3, #0]
}
 80055f4:	bf00      	nop
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bc80      	pop	{r7}
 80055fa:	4770      	bx	lr
 80055fc:	e000e010 	.word	0xe000e010
 8005600:	e000e018 	.word	0xe000e018
 8005604:	20000000 	.word	0x20000000
 8005608:	10624dd3 	.word	0x10624dd3
 800560c:	e000e014 	.word	0xe000e014

08005610 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b08a      	sub	sp, #40	@ 0x28
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005618:	2300      	movs	r3, #0
 800561a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800561c:	f7ff fb28 	bl	8004c70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005620:	4b5c      	ldr	r3, [pc, #368]	@ (8005794 <pvPortMalloc+0x184>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005628:	f000 f924 	bl	8005874 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800562c:	4b5a      	ldr	r3, [pc, #360]	@ (8005798 <pvPortMalloc+0x188>)
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4013      	ands	r3, r2
 8005634:	2b00      	cmp	r3, #0
 8005636:	f040 8095 	bne.w	8005764 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d01e      	beq.n	800567e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005640:	2208      	movs	r2, #8
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4413      	add	r3, r2
 8005646:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f003 0307 	and.w	r3, r3, #7
 800564e:	2b00      	cmp	r3, #0
 8005650:	d015      	beq.n	800567e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f023 0307 	bic.w	r3, r3, #7
 8005658:	3308      	adds	r3, #8
 800565a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f003 0307 	and.w	r3, r3, #7
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00b      	beq.n	800567e <pvPortMalloc+0x6e>
	__asm volatile
 8005666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800566a:	f383 8811 	msr	BASEPRI, r3
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	617b      	str	r3, [r7, #20]
}
 8005678:	bf00      	nop
 800567a:	bf00      	nop
 800567c:	e7fd      	b.n	800567a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d06f      	beq.n	8005764 <pvPortMalloc+0x154>
 8005684:	4b45      	ldr	r3, [pc, #276]	@ (800579c <pvPortMalloc+0x18c>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	429a      	cmp	r2, r3
 800568c:	d86a      	bhi.n	8005764 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800568e:	4b44      	ldr	r3, [pc, #272]	@ (80057a0 <pvPortMalloc+0x190>)
 8005690:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005692:	4b43      	ldr	r3, [pc, #268]	@ (80057a0 <pvPortMalloc+0x190>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005698:	e004      	b.n	80056a4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800569a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800569e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d903      	bls.n	80056b6 <pvPortMalloc+0xa6>
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1f1      	bne.n	800569a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80056b6:	4b37      	ldr	r3, [pc, #220]	@ (8005794 <pvPortMalloc+0x184>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056bc:	429a      	cmp	r2, r3
 80056be:	d051      	beq.n	8005764 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2208      	movs	r2, #8
 80056c6:	4413      	add	r3, r2
 80056c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	1ad2      	subs	r2, r2, r3
 80056da:	2308      	movs	r3, #8
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	429a      	cmp	r2, r3
 80056e0:	d920      	bls.n	8005724 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4413      	add	r3, r2
 80056e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	f003 0307 	and.w	r3, r3, #7
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00b      	beq.n	800570c <pvPortMalloc+0xfc>
	__asm volatile
 80056f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	613b      	str	r3, [r7, #16]
}
 8005706:	bf00      	nop
 8005708:	bf00      	nop
 800570a:	e7fd      	b.n	8005708 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800570c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	1ad2      	subs	r2, r2, r3
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800571e:	69b8      	ldr	r0, [r7, #24]
 8005720:	f000 f90a 	bl	8005938 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005724:	4b1d      	ldr	r3, [pc, #116]	@ (800579c <pvPortMalloc+0x18c>)
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	4a1b      	ldr	r2, [pc, #108]	@ (800579c <pvPortMalloc+0x18c>)
 8005730:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005732:	4b1a      	ldr	r3, [pc, #104]	@ (800579c <pvPortMalloc+0x18c>)
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	4b1b      	ldr	r3, [pc, #108]	@ (80057a4 <pvPortMalloc+0x194>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d203      	bcs.n	8005746 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800573e:	4b17      	ldr	r3, [pc, #92]	@ (800579c <pvPortMalloc+0x18c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a18      	ldr	r2, [pc, #96]	@ (80057a4 <pvPortMalloc+0x194>)
 8005744:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	4b13      	ldr	r3, [pc, #76]	@ (8005798 <pvPortMalloc+0x188>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	431a      	orrs	r2, r3
 8005750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005752:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005756:	2200      	movs	r2, #0
 8005758:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800575a:	4b13      	ldr	r3, [pc, #76]	@ (80057a8 <pvPortMalloc+0x198>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3301      	adds	r3, #1
 8005760:	4a11      	ldr	r2, [pc, #68]	@ (80057a8 <pvPortMalloc+0x198>)
 8005762:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005764:	f7ff fa92 	bl	8004c8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f003 0307 	and.w	r3, r3, #7
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00b      	beq.n	800578a <pvPortMalloc+0x17a>
	__asm volatile
 8005772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	60fb      	str	r3, [r7, #12]
}
 8005784:	bf00      	nop
 8005786:	bf00      	nop
 8005788:	e7fd      	b.n	8005786 <pvPortMalloc+0x176>
	return pvReturn;
 800578a:	69fb      	ldr	r3, [r7, #28]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3728      	adds	r7, #40	@ 0x28
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	2000150c 	.word	0x2000150c
 8005798:	20001520 	.word	0x20001520
 800579c:	20001510 	.word	0x20001510
 80057a0:	20001504 	.word	0x20001504
 80057a4:	20001514 	.word	0x20001514
 80057a8:	20001518 	.word	0x20001518

080057ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d04f      	beq.n	800585e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80057be:	2308      	movs	r3, #8
 80057c0:	425b      	negs	r3, r3
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	4413      	add	r3, r2
 80057c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	4b25      	ldr	r3, [pc, #148]	@ (8005868 <vPortFree+0xbc>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4013      	ands	r3, r2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10b      	bne.n	80057f2 <vPortFree+0x46>
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	60fb      	str	r3, [r7, #12]
}
 80057ec:	bf00      	nop
 80057ee:	bf00      	nop
 80057f0:	e7fd      	b.n	80057ee <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00b      	beq.n	8005812 <vPortFree+0x66>
	__asm volatile
 80057fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	60bb      	str	r3, [r7, #8]
}
 800580c:	bf00      	nop
 800580e:	bf00      	nop
 8005810:	e7fd      	b.n	800580e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	4b14      	ldr	r3, [pc, #80]	@ (8005868 <vPortFree+0xbc>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4013      	ands	r3, r2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01e      	beq.n	800585e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d11a      	bne.n	800585e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	4b0e      	ldr	r3, [pc, #56]	@ (8005868 <vPortFree+0xbc>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	43db      	mvns	r3, r3
 8005832:	401a      	ands	r2, r3
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005838:	f7ff fa1a 	bl	8004c70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	4b0a      	ldr	r3, [pc, #40]	@ (800586c <vPortFree+0xc0>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4413      	add	r3, r2
 8005846:	4a09      	ldr	r2, [pc, #36]	@ (800586c <vPortFree+0xc0>)
 8005848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800584a:	6938      	ldr	r0, [r7, #16]
 800584c:	f000 f874 	bl	8005938 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005850:	4b07      	ldr	r3, [pc, #28]	@ (8005870 <vPortFree+0xc4>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	3301      	adds	r3, #1
 8005856:	4a06      	ldr	r2, [pc, #24]	@ (8005870 <vPortFree+0xc4>)
 8005858:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800585a:	f7ff fa17 	bl	8004c8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800585e:	bf00      	nop
 8005860:	3718      	adds	r7, #24
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	20001520 	.word	0x20001520
 800586c:	20001510 	.word	0x20001510
 8005870:	2000151c 	.word	0x2000151c

08005874 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800587a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800587e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005880:	4b27      	ldr	r3, [pc, #156]	@ (8005920 <prvHeapInit+0xac>)
 8005882:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00c      	beq.n	80058a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	3307      	adds	r3, #7
 8005892:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0307 	bic.w	r3, r3, #7
 800589a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	4a1f      	ldr	r2, [pc, #124]	@ (8005920 <prvHeapInit+0xac>)
 80058a4:	4413      	add	r3, r2
 80058a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005924 <prvHeapInit+0xb0>)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80058b2:	4b1c      	ldr	r3, [pc, #112]	@ (8005924 <prvHeapInit+0xb0>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	4413      	add	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80058c0:	2208      	movs	r2, #8
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	1a9b      	subs	r3, r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0307 	bic.w	r3, r3, #7
 80058ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4a15      	ldr	r2, [pc, #84]	@ (8005928 <prvHeapInit+0xb4>)
 80058d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80058d6:	4b14      	ldr	r3, [pc, #80]	@ (8005928 <prvHeapInit+0xb4>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2200      	movs	r2, #0
 80058dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80058de:	4b12      	ldr	r3, [pc, #72]	@ (8005928 <prvHeapInit+0xb4>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2200      	movs	r2, #0
 80058e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	1ad2      	subs	r2, r2, r3
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80058f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005928 <prvHeapInit+0xb4>)
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	4a0a      	ldr	r2, [pc, #40]	@ (800592c <prvHeapInit+0xb8>)
 8005902:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	4a09      	ldr	r2, [pc, #36]	@ (8005930 <prvHeapInit+0xbc>)
 800590a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800590c:	4b09      	ldr	r3, [pc, #36]	@ (8005934 <prvHeapInit+0xc0>)
 800590e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005912:	601a      	str	r2, [r3, #0]
}
 8005914:	bf00      	nop
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	bc80      	pop	{r7}
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	20000904 	.word	0x20000904
 8005924:	20001504 	.word	0x20001504
 8005928:	2000150c 	.word	0x2000150c
 800592c:	20001514 	.word	0x20001514
 8005930:	20001510 	.word	0x20001510
 8005934:	20001520 	.word	0x20001520

08005938 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005940:	4b27      	ldr	r3, [pc, #156]	@ (80059e0 <prvInsertBlockIntoFreeList+0xa8>)
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	e002      	b.n	800594c <prvInsertBlockIntoFreeList+0x14>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	429a      	cmp	r2, r3
 8005954:	d8f7      	bhi.n	8005946 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	4413      	add	r3, r2
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	429a      	cmp	r2, r3
 8005966:	d108      	bne.n	800597a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	441a      	add	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	441a      	add	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d118      	bne.n	80059c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	4b14      	ldr	r3, [pc, #80]	@ (80059e4 <prvInsertBlockIntoFreeList+0xac>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	429a      	cmp	r2, r3
 8005998:	d00d      	beq.n	80059b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	441a      	add	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	e008      	b.n	80059c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059b6:	4b0b      	ldr	r3, [pc, #44]	@ (80059e4 <prvInsertBlockIntoFreeList+0xac>)
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	e003      	b.n	80059c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d002      	beq.n	80059d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059d6:	bf00      	nop
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr
 80059e0:	20001504 	.word	0x20001504
 80059e4:	2000150c 	.word	0x2000150c

080059e8 <__cvt>:
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059ee:	461d      	mov	r5, r3
 80059f0:	bfbb      	ittet	lt
 80059f2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80059f6:	461d      	movlt	r5, r3
 80059f8:	2300      	movge	r3, #0
 80059fa:	232d      	movlt	r3, #45	@ 0x2d
 80059fc:	b088      	sub	sp, #32
 80059fe:	4614      	mov	r4, r2
 8005a00:	bfb8      	it	lt
 8005a02:	4614      	movlt	r4, r2
 8005a04:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005a06:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005a08:	7013      	strb	r3, [r2, #0]
 8005a0a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005a0c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005a10:	f023 0820 	bic.w	r8, r3, #32
 8005a14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a18:	d005      	beq.n	8005a26 <__cvt+0x3e>
 8005a1a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005a1e:	d100      	bne.n	8005a22 <__cvt+0x3a>
 8005a20:	3601      	adds	r6, #1
 8005a22:	2302      	movs	r3, #2
 8005a24:	e000      	b.n	8005a28 <__cvt+0x40>
 8005a26:	2303      	movs	r3, #3
 8005a28:	aa07      	add	r2, sp, #28
 8005a2a:	9204      	str	r2, [sp, #16]
 8005a2c:	aa06      	add	r2, sp, #24
 8005a2e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005a32:	e9cd 3600 	strd	r3, r6, [sp]
 8005a36:	4622      	mov	r2, r4
 8005a38:	462b      	mov	r3, r5
 8005a3a:	f000 fe95 	bl	8006768 <_dtoa_r>
 8005a3e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005a42:	4607      	mov	r7, r0
 8005a44:	d119      	bne.n	8005a7a <__cvt+0x92>
 8005a46:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005a48:	07db      	lsls	r3, r3, #31
 8005a4a:	d50e      	bpl.n	8005a6a <__cvt+0x82>
 8005a4c:	eb00 0906 	add.w	r9, r0, r6
 8005a50:	2200      	movs	r2, #0
 8005a52:	2300      	movs	r3, #0
 8005a54:	4620      	mov	r0, r4
 8005a56:	4629      	mov	r1, r5
 8005a58:	f7fa ffa6 	bl	80009a8 <__aeabi_dcmpeq>
 8005a5c:	b108      	cbz	r0, 8005a62 <__cvt+0x7a>
 8005a5e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005a62:	2230      	movs	r2, #48	@ 0x30
 8005a64:	9b07      	ldr	r3, [sp, #28]
 8005a66:	454b      	cmp	r3, r9
 8005a68:	d31e      	bcc.n	8005aa8 <__cvt+0xc0>
 8005a6a:	4638      	mov	r0, r7
 8005a6c:	9b07      	ldr	r3, [sp, #28]
 8005a6e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005a70:	1bdb      	subs	r3, r3, r7
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	b008      	add	sp, #32
 8005a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a7a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a7e:	eb00 0906 	add.w	r9, r0, r6
 8005a82:	d1e5      	bne.n	8005a50 <__cvt+0x68>
 8005a84:	7803      	ldrb	r3, [r0, #0]
 8005a86:	2b30      	cmp	r3, #48	@ 0x30
 8005a88:	d10a      	bne.n	8005aa0 <__cvt+0xb8>
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	4620      	mov	r0, r4
 8005a90:	4629      	mov	r1, r5
 8005a92:	f7fa ff89 	bl	80009a8 <__aeabi_dcmpeq>
 8005a96:	b918      	cbnz	r0, 8005aa0 <__cvt+0xb8>
 8005a98:	f1c6 0601 	rsb	r6, r6, #1
 8005a9c:	f8ca 6000 	str.w	r6, [sl]
 8005aa0:	f8da 3000 	ldr.w	r3, [sl]
 8005aa4:	4499      	add	r9, r3
 8005aa6:	e7d3      	b.n	8005a50 <__cvt+0x68>
 8005aa8:	1c59      	adds	r1, r3, #1
 8005aaa:	9107      	str	r1, [sp, #28]
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	e7d9      	b.n	8005a64 <__cvt+0x7c>

08005ab0 <__exponent>:
 8005ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ab2:	2900      	cmp	r1, #0
 8005ab4:	bfb6      	itet	lt
 8005ab6:	232d      	movlt	r3, #45	@ 0x2d
 8005ab8:	232b      	movge	r3, #43	@ 0x2b
 8005aba:	4249      	neglt	r1, r1
 8005abc:	2909      	cmp	r1, #9
 8005abe:	7002      	strb	r2, [r0, #0]
 8005ac0:	7043      	strb	r3, [r0, #1]
 8005ac2:	dd29      	ble.n	8005b18 <__exponent+0x68>
 8005ac4:	f10d 0307 	add.w	r3, sp, #7
 8005ac8:	461d      	mov	r5, r3
 8005aca:	270a      	movs	r7, #10
 8005acc:	fbb1 f6f7 	udiv	r6, r1, r7
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	fb07 1416 	mls	r4, r7, r6, r1
 8005ad6:	3430      	adds	r4, #48	@ 0x30
 8005ad8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005adc:	460c      	mov	r4, r1
 8005ade:	2c63      	cmp	r4, #99	@ 0x63
 8005ae0:	4631      	mov	r1, r6
 8005ae2:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ae6:	dcf1      	bgt.n	8005acc <__exponent+0x1c>
 8005ae8:	3130      	adds	r1, #48	@ 0x30
 8005aea:	1e94      	subs	r4, r2, #2
 8005aec:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005af0:	4623      	mov	r3, r4
 8005af2:	1c41      	adds	r1, r0, #1
 8005af4:	42ab      	cmp	r3, r5
 8005af6:	d30a      	bcc.n	8005b0e <__exponent+0x5e>
 8005af8:	f10d 0309 	add.w	r3, sp, #9
 8005afc:	1a9b      	subs	r3, r3, r2
 8005afe:	42ac      	cmp	r4, r5
 8005b00:	bf88      	it	hi
 8005b02:	2300      	movhi	r3, #0
 8005b04:	3302      	adds	r3, #2
 8005b06:	4403      	add	r3, r0
 8005b08:	1a18      	subs	r0, r3, r0
 8005b0a:	b003      	add	sp, #12
 8005b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b0e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005b12:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005b16:	e7ed      	b.n	8005af4 <__exponent+0x44>
 8005b18:	2330      	movs	r3, #48	@ 0x30
 8005b1a:	3130      	adds	r1, #48	@ 0x30
 8005b1c:	7083      	strb	r3, [r0, #2]
 8005b1e:	70c1      	strb	r1, [r0, #3]
 8005b20:	1d03      	adds	r3, r0, #4
 8005b22:	e7f1      	b.n	8005b08 <__exponent+0x58>

08005b24 <_printf_float>:
 8005b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b28:	b091      	sub	sp, #68	@ 0x44
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005b30:	4616      	mov	r6, r2
 8005b32:	461f      	mov	r7, r3
 8005b34:	4605      	mov	r5, r0
 8005b36:	f000 fcfb 	bl	8006530 <_localeconv_r>
 8005b3a:	6803      	ldr	r3, [r0, #0]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	9308      	str	r3, [sp, #32]
 8005b40:	f7fa fb06 	bl	8000150 <strlen>
 8005b44:	2300      	movs	r3, #0
 8005b46:	930e      	str	r3, [sp, #56]	@ 0x38
 8005b48:	f8d8 3000 	ldr.w	r3, [r8]
 8005b4c:	9009      	str	r0, [sp, #36]	@ 0x24
 8005b4e:	3307      	adds	r3, #7
 8005b50:	f023 0307 	bic.w	r3, r3, #7
 8005b54:	f103 0208 	add.w	r2, r3, #8
 8005b58:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005b5c:	f8d4 b000 	ldr.w	fp, [r4]
 8005b60:	f8c8 2000 	str.w	r2, [r8]
 8005b64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005b6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b6e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005b72:	f04f 32ff 	mov.w	r2, #4294967295
 8005b76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005b7a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005b7e:	4b9c      	ldr	r3, [pc, #624]	@ (8005df0 <_printf_float+0x2cc>)
 8005b80:	f7fa ff44 	bl	8000a0c <__aeabi_dcmpun>
 8005b84:	bb70      	cbnz	r0, 8005be4 <_printf_float+0xc0>
 8005b86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8e:	4b98      	ldr	r3, [pc, #608]	@ (8005df0 <_printf_float+0x2cc>)
 8005b90:	f7fa ff1e 	bl	80009d0 <__aeabi_dcmple>
 8005b94:	bb30      	cbnz	r0, 8005be4 <_printf_float+0xc0>
 8005b96:	2200      	movs	r2, #0
 8005b98:	2300      	movs	r3, #0
 8005b9a:	4640      	mov	r0, r8
 8005b9c:	4649      	mov	r1, r9
 8005b9e:	f7fa ff0d 	bl	80009bc <__aeabi_dcmplt>
 8005ba2:	b110      	cbz	r0, 8005baa <_printf_float+0x86>
 8005ba4:	232d      	movs	r3, #45	@ 0x2d
 8005ba6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005baa:	4a92      	ldr	r2, [pc, #584]	@ (8005df4 <_printf_float+0x2d0>)
 8005bac:	4b92      	ldr	r3, [pc, #584]	@ (8005df8 <_printf_float+0x2d4>)
 8005bae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005bb2:	bf8c      	ite	hi
 8005bb4:	4690      	movhi	r8, r2
 8005bb6:	4698      	movls	r8, r3
 8005bb8:	2303      	movs	r3, #3
 8005bba:	f04f 0900 	mov.w	r9, #0
 8005bbe:	6123      	str	r3, [r4, #16]
 8005bc0:	f02b 0304 	bic.w	r3, fp, #4
 8005bc4:	6023      	str	r3, [r4, #0]
 8005bc6:	4633      	mov	r3, r6
 8005bc8:	4621      	mov	r1, r4
 8005bca:	4628      	mov	r0, r5
 8005bcc:	9700      	str	r7, [sp, #0]
 8005bce:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005bd0:	f000 f9d4 	bl	8005f7c <_printf_common>
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	f040 8090 	bne.w	8005cfa <_printf_float+0x1d6>
 8005bda:	f04f 30ff 	mov.w	r0, #4294967295
 8005bde:	b011      	add	sp, #68	@ 0x44
 8005be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be4:	4642      	mov	r2, r8
 8005be6:	464b      	mov	r3, r9
 8005be8:	4640      	mov	r0, r8
 8005bea:	4649      	mov	r1, r9
 8005bec:	f7fa ff0e 	bl	8000a0c <__aeabi_dcmpun>
 8005bf0:	b148      	cbz	r0, 8005c06 <_printf_float+0xe2>
 8005bf2:	464b      	mov	r3, r9
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	bfb8      	it	lt
 8005bf8:	232d      	movlt	r3, #45	@ 0x2d
 8005bfa:	4a80      	ldr	r2, [pc, #512]	@ (8005dfc <_printf_float+0x2d8>)
 8005bfc:	bfb8      	it	lt
 8005bfe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005c02:	4b7f      	ldr	r3, [pc, #508]	@ (8005e00 <_printf_float+0x2dc>)
 8005c04:	e7d3      	b.n	8005bae <_printf_float+0x8a>
 8005c06:	6863      	ldr	r3, [r4, #4]
 8005c08:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005c0c:	1c5a      	adds	r2, r3, #1
 8005c0e:	d13f      	bne.n	8005c90 <_printf_float+0x16c>
 8005c10:	2306      	movs	r3, #6
 8005c12:	6063      	str	r3, [r4, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005c1a:	6023      	str	r3, [r4, #0]
 8005c1c:	9206      	str	r2, [sp, #24]
 8005c1e:	aa0e      	add	r2, sp, #56	@ 0x38
 8005c20:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005c24:	aa0d      	add	r2, sp, #52	@ 0x34
 8005c26:	9203      	str	r2, [sp, #12]
 8005c28:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005c2c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005c30:	6863      	ldr	r3, [r4, #4]
 8005c32:	4642      	mov	r2, r8
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	4628      	mov	r0, r5
 8005c38:	464b      	mov	r3, r9
 8005c3a:	910a      	str	r1, [sp, #40]	@ 0x28
 8005c3c:	f7ff fed4 	bl	80059e8 <__cvt>
 8005c40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005c42:	4680      	mov	r8, r0
 8005c44:	2947      	cmp	r1, #71	@ 0x47
 8005c46:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005c48:	d128      	bne.n	8005c9c <_printf_float+0x178>
 8005c4a:	1cc8      	adds	r0, r1, #3
 8005c4c:	db02      	blt.n	8005c54 <_printf_float+0x130>
 8005c4e:	6863      	ldr	r3, [r4, #4]
 8005c50:	4299      	cmp	r1, r3
 8005c52:	dd40      	ble.n	8005cd6 <_printf_float+0x1b2>
 8005c54:	f1aa 0a02 	sub.w	sl, sl, #2
 8005c58:	fa5f fa8a 	uxtb.w	sl, sl
 8005c5c:	4652      	mov	r2, sl
 8005c5e:	3901      	subs	r1, #1
 8005c60:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005c64:	910d      	str	r1, [sp, #52]	@ 0x34
 8005c66:	f7ff ff23 	bl	8005ab0 <__exponent>
 8005c6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c6c:	4681      	mov	r9, r0
 8005c6e:	1813      	adds	r3, r2, r0
 8005c70:	2a01      	cmp	r2, #1
 8005c72:	6123      	str	r3, [r4, #16]
 8005c74:	dc02      	bgt.n	8005c7c <_printf_float+0x158>
 8005c76:	6822      	ldr	r2, [r4, #0]
 8005c78:	07d2      	lsls	r2, r2, #31
 8005c7a:	d501      	bpl.n	8005c80 <_printf_float+0x15c>
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	6123      	str	r3, [r4, #16]
 8005c80:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d09e      	beq.n	8005bc6 <_printf_float+0xa2>
 8005c88:	232d      	movs	r3, #45	@ 0x2d
 8005c8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c8e:	e79a      	b.n	8005bc6 <_printf_float+0xa2>
 8005c90:	2947      	cmp	r1, #71	@ 0x47
 8005c92:	d1bf      	bne.n	8005c14 <_printf_float+0xf0>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1bd      	bne.n	8005c14 <_printf_float+0xf0>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e7ba      	b.n	8005c12 <_printf_float+0xee>
 8005c9c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ca0:	d9dc      	bls.n	8005c5c <_printf_float+0x138>
 8005ca2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005ca6:	d118      	bne.n	8005cda <_printf_float+0x1b6>
 8005ca8:	2900      	cmp	r1, #0
 8005caa:	6863      	ldr	r3, [r4, #4]
 8005cac:	dd0b      	ble.n	8005cc6 <_printf_float+0x1a2>
 8005cae:	6121      	str	r1, [r4, #16]
 8005cb0:	b913      	cbnz	r3, 8005cb8 <_printf_float+0x194>
 8005cb2:	6822      	ldr	r2, [r4, #0]
 8005cb4:	07d0      	lsls	r0, r2, #31
 8005cb6:	d502      	bpl.n	8005cbe <_printf_float+0x19a>
 8005cb8:	3301      	adds	r3, #1
 8005cba:	440b      	add	r3, r1
 8005cbc:	6123      	str	r3, [r4, #16]
 8005cbe:	f04f 0900 	mov.w	r9, #0
 8005cc2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005cc4:	e7dc      	b.n	8005c80 <_printf_float+0x15c>
 8005cc6:	b913      	cbnz	r3, 8005cce <_printf_float+0x1aa>
 8005cc8:	6822      	ldr	r2, [r4, #0]
 8005cca:	07d2      	lsls	r2, r2, #31
 8005ccc:	d501      	bpl.n	8005cd2 <_printf_float+0x1ae>
 8005cce:	3302      	adds	r3, #2
 8005cd0:	e7f4      	b.n	8005cbc <_printf_float+0x198>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e7f2      	b.n	8005cbc <_printf_float+0x198>
 8005cd6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005cda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cdc:	4299      	cmp	r1, r3
 8005cde:	db05      	blt.n	8005cec <_printf_float+0x1c8>
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	6121      	str	r1, [r4, #16]
 8005ce4:	07d8      	lsls	r0, r3, #31
 8005ce6:	d5ea      	bpl.n	8005cbe <_printf_float+0x19a>
 8005ce8:	1c4b      	adds	r3, r1, #1
 8005cea:	e7e7      	b.n	8005cbc <_printf_float+0x198>
 8005cec:	2900      	cmp	r1, #0
 8005cee:	bfcc      	ite	gt
 8005cf0:	2201      	movgt	r2, #1
 8005cf2:	f1c1 0202 	rsble	r2, r1, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	e7e0      	b.n	8005cbc <_printf_float+0x198>
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	055a      	lsls	r2, r3, #21
 8005cfe:	d407      	bmi.n	8005d10 <_printf_float+0x1ec>
 8005d00:	6923      	ldr	r3, [r4, #16]
 8005d02:	4642      	mov	r2, r8
 8005d04:	4631      	mov	r1, r6
 8005d06:	4628      	mov	r0, r5
 8005d08:	47b8      	blx	r7
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	d12b      	bne.n	8005d66 <_printf_float+0x242>
 8005d0e:	e764      	b.n	8005bda <_printf_float+0xb6>
 8005d10:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d14:	f240 80dc 	bls.w	8005ed0 <_printf_float+0x3ac>
 8005d18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2300      	movs	r3, #0
 8005d20:	f7fa fe42 	bl	80009a8 <__aeabi_dcmpeq>
 8005d24:	2800      	cmp	r0, #0
 8005d26:	d033      	beq.n	8005d90 <_printf_float+0x26c>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	4631      	mov	r1, r6
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	4a35      	ldr	r2, [pc, #212]	@ (8005e04 <_printf_float+0x2e0>)
 8005d30:	47b8      	blx	r7
 8005d32:	3001      	adds	r0, #1
 8005d34:	f43f af51 	beq.w	8005bda <_printf_float+0xb6>
 8005d38:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005d3c:	4543      	cmp	r3, r8
 8005d3e:	db02      	blt.n	8005d46 <_printf_float+0x222>
 8005d40:	6823      	ldr	r3, [r4, #0]
 8005d42:	07d8      	lsls	r0, r3, #31
 8005d44:	d50f      	bpl.n	8005d66 <_printf_float+0x242>
 8005d46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d4a:	4631      	mov	r1, r6
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	47b8      	blx	r7
 8005d50:	3001      	adds	r0, #1
 8005d52:	f43f af42 	beq.w	8005bda <_printf_float+0xb6>
 8005d56:	f04f 0900 	mov.w	r9, #0
 8005d5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d5e:	f104 0a1a 	add.w	sl, r4, #26
 8005d62:	45c8      	cmp	r8, r9
 8005d64:	dc09      	bgt.n	8005d7a <_printf_float+0x256>
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	079b      	lsls	r3, r3, #30
 8005d6a:	f100 8102 	bmi.w	8005f72 <_printf_float+0x44e>
 8005d6e:	68e0      	ldr	r0, [r4, #12]
 8005d70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d72:	4298      	cmp	r0, r3
 8005d74:	bfb8      	it	lt
 8005d76:	4618      	movlt	r0, r3
 8005d78:	e731      	b.n	8005bde <_printf_float+0xba>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	4652      	mov	r2, sl
 8005d7e:	4631      	mov	r1, r6
 8005d80:	4628      	mov	r0, r5
 8005d82:	47b8      	blx	r7
 8005d84:	3001      	adds	r0, #1
 8005d86:	f43f af28 	beq.w	8005bda <_printf_float+0xb6>
 8005d8a:	f109 0901 	add.w	r9, r9, #1
 8005d8e:	e7e8      	b.n	8005d62 <_printf_float+0x23e>
 8005d90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	dc38      	bgt.n	8005e08 <_printf_float+0x2e4>
 8005d96:	2301      	movs	r3, #1
 8005d98:	4631      	mov	r1, r6
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	4a19      	ldr	r2, [pc, #100]	@ (8005e04 <_printf_float+0x2e0>)
 8005d9e:	47b8      	blx	r7
 8005da0:	3001      	adds	r0, #1
 8005da2:	f43f af1a 	beq.w	8005bda <_printf_float+0xb6>
 8005da6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005daa:	ea59 0303 	orrs.w	r3, r9, r3
 8005dae:	d102      	bne.n	8005db6 <_printf_float+0x292>
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	07d9      	lsls	r1, r3, #31
 8005db4:	d5d7      	bpl.n	8005d66 <_printf_float+0x242>
 8005db6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005dba:	4631      	mov	r1, r6
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	47b8      	blx	r7
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	f43f af0a 	beq.w	8005bda <_printf_float+0xb6>
 8005dc6:	f04f 0a00 	mov.w	sl, #0
 8005dca:	f104 0b1a 	add.w	fp, r4, #26
 8005dce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005dd0:	425b      	negs	r3, r3
 8005dd2:	4553      	cmp	r3, sl
 8005dd4:	dc01      	bgt.n	8005dda <_printf_float+0x2b6>
 8005dd6:	464b      	mov	r3, r9
 8005dd8:	e793      	b.n	8005d02 <_printf_float+0x1de>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	465a      	mov	r2, fp
 8005dde:	4631      	mov	r1, r6
 8005de0:	4628      	mov	r0, r5
 8005de2:	47b8      	blx	r7
 8005de4:	3001      	adds	r0, #1
 8005de6:	f43f aef8 	beq.w	8005bda <_printf_float+0xb6>
 8005dea:	f10a 0a01 	add.w	sl, sl, #1
 8005dee:	e7ee      	b.n	8005dce <_printf_float+0x2aa>
 8005df0:	7fefffff 	.word	0x7fefffff
 8005df4:	08009666 	.word	0x08009666
 8005df8:	08009662 	.word	0x08009662
 8005dfc:	0800966e 	.word	0x0800966e
 8005e00:	0800966a 	.word	0x0800966a
 8005e04:	08009672 	.word	0x08009672
 8005e08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e0a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005e0e:	4553      	cmp	r3, sl
 8005e10:	bfa8      	it	ge
 8005e12:	4653      	movge	r3, sl
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	4699      	mov	r9, r3
 8005e18:	dc36      	bgt.n	8005e88 <_printf_float+0x364>
 8005e1a:	f04f 0b00 	mov.w	fp, #0
 8005e1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e22:	f104 021a 	add.w	r2, r4, #26
 8005e26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e28:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e2a:	eba3 0309 	sub.w	r3, r3, r9
 8005e2e:	455b      	cmp	r3, fp
 8005e30:	dc31      	bgt.n	8005e96 <_printf_float+0x372>
 8005e32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e34:	459a      	cmp	sl, r3
 8005e36:	dc3a      	bgt.n	8005eae <_printf_float+0x38a>
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	07da      	lsls	r2, r3, #31
 8005e3c:	d437      	bmi.n	8005eae <_printf_float+0x38a>
 8005e3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e40:	ebaa 0903 	sub.w	r9, sl, r3
 8005e44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e46:	ebaa 0303 	sub.w	r3, sl, r3
 8005e4a:	4599      	cmp	r9, r3
 8005e4c:	bfa8      	it	ge
 8005e4e:	4699      	movge	r9, r3
 8005e50:	f1b9 0f00 	cmp.w	r9, #0
 8005e54:	dc33      	bgt.n	8005ebe <_printf_float+0x39a>
 8005e56:	f04f 0800 	mov.w	r8, #0
 8005e5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e5e:	f104 0b1a 	add.w	fp, r4, #26
 8005e62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e64:	ebaa 0303 	sub.w	r3, sl, r3
 8005e68:	eba3 0309 	sub.w	r3, r3, r9
 8005e6c:	4543      	cmp	r3, r8
 8005e6e:	f77f af7a 	ble.w	8005d66 <_printf_float+0x242>
 8005e72:	2301      	movs	r3, #1
 8005e74:	465a      	mov	r2, fp
 8005e76:	4631      	mov	r1, r6
 8005e78:	4628      	mov	r0, r5
 8005e7a:	47b8      	blx	r7
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	f43f aeac 	beq.w	8005bda <_printf_float+0xb6>
 8005e82:	f108 0801 	add.w	r8, r8, #1
 8005e86:	e7ec      	b.n	8005e62 <_printf_float+0x33e>
 8005e88:	4642      	mov	r2, r8
 8005e8a:	4631      	mov	r1, r6
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	47b8      	blx	r7
 8005e90:	3001      	adds	r0, #1
 8005e92:	d1c2      	bne.n	8005e1a <_printf_float+0x2f6>
 8005e94:	e6a1      	b.n	8005bda <_printf_float+0xb6>
 8005e96:	2301      	movs	r3, #1
 8005e98:	4631      	mov	r1, r6
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	920a      	str	r2, [sp, #40]	@ 0x28
 8005e9e:	47b8      	blx	r7
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	f43f ae9a 	beq.w	8005bda <_printf_float+0xb6>
 8005ea6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ea8:	f10b 0b01 	add.w	fp, fp, #1
 8005eac:	e7bb      	b.n	8005e26 <_printf_float+0x302>
 8005eae:	4631      	mov	r1, r6
 8005eb0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	47b8      	blx	r7
 8005eb8:	3001      	adds	r0, #1
 8005eba:	d1c0      	bne.n	8005e3e <_printf_float+0x31a>
 8005ebc:	e68d      	b.n	8005bda <_printf_float+0xb6>
 8005ebe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ec0:	464b      	mov	r3, r9
 8005ec2:	4631      	mov	r1, r6
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	4442      	add	r2, r8
 8005ec8:	47b8      	blx	r7
 8005eca:	3001      	adds	r0, #1
 8005ecc:	d1c3      	bne.n	8005e56 <_printf_float+0x332>
 8005ece:	e684      	b.n	8005bda <_printf_float+0xb6>
 8005ed0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005ed4:	f1ba 0f01 	cmp.w	sl, #1
 8005ed8:	dc01      	bgt.n	8005ede <_printf_float+0x3ba>
 8005eda:	07db      	lsls	r3, r3, #31
 8005edc:	d536      	bpl.n	8005f4c <_printf_float+0x428>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	4642      	mov	r2, r8
 8005ee2:	4631      	mov	r1, r6
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	47b8      	blx	r7
 8005ee8:	3001      	adds	r0, #1
 8005eea:	f43f ae76 	beq.w	8005bda <_printf_float+0xb6>
 8005eee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ef2:	4631      	mov	r1, r6
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	47b8      	blx	r7
 8005ef8:	3001      	adds	r0, #1
 8005efa:	f43f ae6e 	beq.w	8005bda <_printf_float+0xb6>
 8005efe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f02:	2200      	movs	r2, #0
 8005f04:	2300      	movs	r3, #0
 8005f06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f0a:	f7fa fd4d 	bl	80009a8 <__aeabi_dcmpeq>
 8005f0e:	b9c0      	cbnz	r0, 8005f42 <_printf_float+0x41e>
 8005f10:	4653      	mov	r3, sl
 8005f12:	f108 0201 	add.w	r2, r8, #1
 8005f16:	4631      	mov	r1, r6
 8005f18:	4628      	mov	r0, r5
 8005f1a:	47b8      	blx	r7
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	d10c      	bne.n	8005f3a <_printf_float+0x416>
 8005f20:	e65b      	b.n	8005bda <_printf_float+0xb6>
 8005f22:	2301      	movs	r3, #1
 8005f24:	465a      	mov	r2, fp
 8005f26:	4631      	mov	r1, r6
 8005f28:	4628      	mov	r0, r5
 8005f2a:	47b8      	blx	r7
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	f43f ae54 	beq.w	8005bda <_printf_float+0xb6>
 8005f32:	f108 0801 	add.w	r8, r8, #1
 8005f36:	45d0      	cmp	r8, sl
 8005f38:	dbf3      	blt.n	8005f22 <_printf_float+0x3fe>
 8005f3a:	464b      	mov	r3, r9
 8005f3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005f40:	e6e0      	b.n	8005d04 <_printf_float+0x1e0>
 8005f42:	f04f 0800 	mov.w	r8, #0
 8005f46:	f104 0b1a 	add.w	fp, r4, #26
 8005f4a:	e7f4      	b.n	8005f36 <_printf_float+0x412>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	4642      	mov	r2, r8
 8005f50:	e7e1      	b.n	8005f16 <_printf_float+0x3f2>
 8005f52:	2301      	movs	r3, #1
 8005f54:	464a      	mov	r2, r9
 8005f56:	4631      	mov	r1, r6
 8005f58:	4628      	mov	r0, r5
 8005f5a:	47b8      	blx	r7
 8005f5c:	3001      	adds	r0, #1
 8005f5e:	f43f ae3c 	beq.w	8005bda <_printf_float+0xb6>
 8005f62:	f108 0801 	add.w	r8, r8, #1
 8005f66:	68e3      	ldr	r3, [r4, #12]
 8005f68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005f6a:	1a5b      	subs	r3, r3, r1
 8005f6c:	4543      	cmp	r3, r8
 8005f6e:	dcf0      	bgt.n	8005f52 <_printf_float+0x42e>
 8005f70:	e6fd      	b.n	8005d6e <_printf_float+0x24a>
 8005f72:	f04f 0800 	mov.w	r8, #0
 8005f76:	f104 0919 	add.w	r9, r4, #25
 8005f7a:	e7f4      	b.n	8005f66 <_printf_float+0x442>

08005f7c <_printf_common>:
 8005f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f80:	4616      	mov	r6, r2
 8005f82:	4698      	mov	r8, r3
 8005f84:	688a      	ldr	r2, [r1, #8]
 8005f86:	690b      	ldr	r3, [r1, #16]
 8005f88:	4607      	mov	r7, r0
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	bfb8      	it	lt
 8005f8e:	4613      	movlt	r3, r2
 8005f90:	6033      	str	r3, [r6, #0]
 8005f92:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f96:	460c      	mov	r4, r1
 8005f98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f9c:	b10a      	cbz	r2, 8005fa2 <_printf_common+0x26>
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	6033      	str	r3, [r6, #0]
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	0699      	lsls	r1, r3, #26
 8005fa6:	bf42      	ittt	mi
 8005fa8:	6833      	ldrmi	r3, [r6, #0]
 8005faa:	3302      	addmi	r3, #2
 8005fac:	6033      	strmi	r3, [r6, #0]
 8005fae:	6825      	ldr	r5, [r4, #0]
 8005fb0:	f015 0506 	ands.w	r5, r5, #6
 8005fb4:	d106      	bne.n	8005fc4 <_printf_common+0x48>
 8005fb6:	f104 0a19 	add.w	sl, r4, #25
 8005fba:	68e3      	ldr	r3, [r4, #12]
 8005fbc:	6832      	ldr	r2, [r6, #0]
 8005fbe:	1a9b      	subs	r3, r3, r2
 8005fc0:	42ab      	cmp	r3, r5
 8005fc2:	dc2b      	bgt.n	800601c <_printf_common+0xa0>
 8005fc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005fc8:	6822      	ldr	r2, [r4, #0]
 8005fca:	3b00      	subs	r3, #0
 8005fcc:	bf18      	it	ne
 8005fce:	2301      	movne	r3, #1
 8005fd0:	0692      	lsls	r2, r2, #26
 8005fd2:	d430      	bmi.n	8006036 <_printf_common+0xba>
 8005fd4:	4641      	mov	r1, r8
 8005fd6:	4638      	mov	r0, r7
 8005fd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005fdc:	47c8      	blx	r9
 8005fde:	3001      	adds	r0, #1
 8005fe0:	d023      	beq.n	800602a <_printf_common+0xae>
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	6922      	ldr	r2, [r4, #16]
 8005fe6:	f003 0306 	and.w	r3, r3, #6
 8005fea:	2b04      	cmp	r3, #4
 8005fec:	bf14      	ite	ne
 8005fee:	2500      	movne	r5, #0
 8005ff0:	6833      	ldreq	r3, [r6, #0]
 8005ff2:	f04f 0600 	mov.w	r6, #0
 8005ff6:	bf08      	it	eq
 8005ff8:	68e5      	ldreq	r5, [r4, #12]
 8005ffa:	f104 041a 	add.w	r4, r4, #26
 8005ffe:	bf08      	it	eq
 8006000:	1aed      	subeq	r5, r5, r3
 8006002:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006006:	bf08      	it	eq
 8006008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800600c:	4293      	cmp	r3, r2
 800600e:	bfc4      	itt	gt
 8006010:	1a9b      	subgt	r3, r3, r2
 8006012:	18ed      	addgt	r5, r5, r3
 8006014:	42b5      	cmp	r5, r6
 8006016:	d11a      	bne.n	800604e <_printf_common+0xd2>
 8006018:	2000      	movs	r0, #0
 800601a:	e008      	b.n	800602e <_printf_common+0xb2>
 800601c:	2301      	movs	r3, #1
 800601e:	4652      	mov	r2, sl
 8006020:	4641      	mov	r1, r8
 8006022:	4638      	mov	r0, r7
 8006024:	47c8      	blx	r9
 8006026:	3001      	adds	r0, #1
 8006028:	d103      	bne.n	8006032 <_printf_common+0xb6>
 800602a:	f04f 30ff 	mov.w	r0, #4294967295
 800602e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006032:	3501      	adds	r5, #1
 8006034:	e7c1      	b.n	8005fba <_printf_common+0x3e>
 8006036:	2030      	movs	r0, #48	@ 0x30
 8006038:	18e1      	adds	r1, r4, r3
 800603a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006044:	4422      	add	r2, r4
 8006046:	3302      	adds	r3, #2
 8006048:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800604c:	e7c2      	b.n	8005fd4 <_printf_common+0x58>
 800604e:	2301      	movs	r3, #1
 8006050:	4622      	mov	r2, r4
 8006052:	4641      	mov	r1, r8
 8006054:	4638      	mov	r0, r7
 8006056:	47c8      	blx	r9
 8006058:	3001      	adds	r0, #1
 800605a:	d0e6      	beq.n	800602a <_printf_common+0xae>
 800605c:	3601      	adds	r6, #1
 800605e:	e7d9      	b.n	8006014 <_printf_common+0x98>

08006060 <_printf_i>:
 8006060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006064:	7e0f      	ldrb	r7, [r1, #24]
 8006066:	4691      	mov	r9, r2
 8006068:	2f78      	cmp	r7, #120	@ 0x78
 800606a:	4680      	mov	r8, r0
 800606c:	460c      	mov	r4, r1
 800606e:	469a      	mov	sl, r3
 8006070:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006072:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006076:	d807      	bhi.n	8006088 <_printf_i+0x28>
 8006078:	2f62      	cmp	r7, #98	@ 0x62
 800607a:	d80a      	bhi.n	8006092 <_printf_i+0x32>
 800607c:	2f00      	cmp	r7, #0
 800607e:	f000 80d1 	beq.w	8006224 <_printf_i+0x1c4>
 8006082:	2f58      	cmp	r7, #88	@ 0x58
 8006084:	f000 80b8 	beq.w	80061f8 <_printf_i+0x198>
 8006088:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800608c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006090:	e03a      	b.n	8006108 <_printf_i+0xa8>
 8006092:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006096:	2b15      	cmp	r3, #21
 8006098:	d8f6      	bhi.n	8006088 <_printf_i+0x28>
 800609a:	a101      	add	r1, pc, #4	@ (adr r1, 80060a0 <_printf_i+0x40>)
 800609c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060a0:	080060f9 	.word	0x080060f9
 80060a4:	0800610d 	.word	0x0800610d
 80060a8:	08006089 	.word	0x08006089
 80060ac:	08006089 	.word	0x08006089
 80060b0:	08006089 	.word	0x08006089
 80060b4:	08006089 	.word	0x08006089
 80060b8:	0800610d 	.word	0x0800610d
 80060bc:	08006089 	.word	0x08006089
 80060c0:	08006089 	.word	0x08006089
 80060c4:	08006089 	.word	0x08006089
 80060c8:	08006089 	.word	0x08006089
 80060cc:	0800620b 	.word	0x0800620b
 80060d0:	08006137 	.word	0x08006137
 80060d4:	080061c5 	.word	0x080061c5
 80060d8:	08006089 	.word	0x08006089
 80060dc:	08006089 	.word	0x08006089
 80060e0:	0800622d 	.word	0x0800622d
 80060e4:	08006089 	.word	0x08006089
 80060e8:	08006137 	.word	0x08006137
 80060ec:	08006089 	.word	0x08006089
 80060f0:	08006089 	.word	0x08006089
 80060f4:	080061cd 	.word	0x080061cd
 80060f8:	6833      	ldr	r3, [r6, #0]
 80060fa:	1d1a      	adds	r2, r3, #4
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6032      	str	r2, [r6, #0]
 8006100:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006104:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006108:	2301      	movs	r3, #1
 800610a:	e09c      	b.n	8006246 <_printf_i+0x1e6>
 800610c:	6833      	ldr	r3, [r6, #0]
 800610e:	6820      	ldr	r0, [r4, #0]
 8006110:	1d19      	adds	r1, r3, #4
 8006112:	6031      	str	r1, [r6, #0]
 8006114:	0606      	lsls	r6, r0, #24
 8006116:	d501      	bpl.n	800611c <_printf_i+0xbc>
 8006118:	681d      	ldr	r5, [r3, #0]
 800611a:	e003      	b.n	8006124 <_printf_i+0xc4>
 800611c:	0645      	lsls	r5, r0, #25
 800611e:	d5fb      	bpl.n	8006118 <_printf_i+0xb8>
 8006120:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006124:	2d00      	cmp	r5, #0
 8006126:	da03      	bge.n	8006130 <_printf_i+0xd0>
 8006128:	232d      	movs	r3, #45	@ 0x2d
 800612a:	426d      	negs	r5, r5
 800612c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006130:	230a      	movs	r3, #10
 8006132:	4858      	ldr	r0, [pc, #352]	@ (8006294 <_printf_i+0x234>)
 8006134:	e011      	b.n	800615a <_printf_i+0xfa>
 8006136:	6821      	ldr	r1, [r4, #0]
 8006138:	6833      	ldr	r3, [r6, #0]
 800613a:	0608      	lsls	r0, r1, #24
 800613c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006140:	d402      	bmi.n	8006148 <_printf_i+0xe8>
 8006142:	0649      	lsls	r1, r1, #25
 8006144:	bf48      	it	mi
 8006146:	b2ad      	uxthmi	r5, r5
 8006148:	2f6f      	cmp	r7, #111	@ 0x6f
 800614a:	6033      	str	r3, [r6, #0]
 800614c:	bf14      	ite	ne
 800614e:	230a      	movne	r3, #10
 8006150:	2308      	moveq	r3, #8
 8006152:	4850      	ldr	r0, [pc, #320]	@ (8006294 <_printf_i+0x234>)
 8006154:	2100      	movs	r1, #0
 8006156:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800615a:	6866      	ldr	r6, [r4, #4]
 800615c:	2e00      	cmp	r6, #0
 800615e:	60a6      	str	r6, [r4, #8]
 8006160:	db05      	blt.n	800616e <_printf_i+0x10e>
 8006162:	6821      	ldr	r1, [r4, #0]
 8006164:	432e      	orrs	r6, r5
 8006166:	f021 0104 	bic.w	r1, r1, #4
 800616a:	6021      	str	r1, [r4, #0]
 800616c:	d04b      	beq.n	8006206 <_printf_i+0x1a6>
 800616e:	4616      	mov	r6, r2
 8006170:	fbb5 f1f3 	udiv	r1, r5, r3
 8006174:	fb03 5711 	mls	r7, r3, r1, r5
 8006178:	5dc7      	ldrb	r7, [r0, r7]
 800617a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800617e:	462f      	mov	r7, r5
 8006180:	42bb      	cmp	r3, r7
 8006182:	460d      	mov	r5, r1
 8006184:	d9f4      	bls.n	8006170 <_printf_i+0x110>
 8006186:	2b08      	cmp	r3, #8
 8006188:	d10b      	bne.n	80061a2 <_printf_i+0x142>
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	07df      	lsls	r7, r3, #31
 800618e:	d508      	bpl.n	80061a2 <_printf_i+0x142>
 8006190:	6923      	ldr	r3, [r4, #16]
 8006192:	6861      	ldr	r1, [r4, #4]
 8006194:	4299      	cmp	r1, r3
 8006196:	bfde      	ittt	le
 8006198:	2330      	movle	r3, #48	@ 0x30
 800619a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800619e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061a2:	1b92      	subs	r2, r2, r6
 80061a4:	6122      	str	r2, [r4, #16]
 80061a6:	464b      	mov	r3, r9
 80061a8:	4621      	mov	r1, r4
 80061aa:	4640      	mov	r0, r8
 80061ac:	f8cd a000 	str.w	sl, [sp]
 80061b0:	aa03      	add	r2, sp, #12
 80061b2:	f7ff fee3 	bl	8005f7c <_printf_common>
 80061b6:	3001      	adds	r0, #1
 80061b8:	d14a      	bne.n	8006250 <_printf_i+0x1f0>
 80061ba:	f04f 30ff 	mov.w	r0, #4294967295
 80061be:	b004      	add	sp, #16
 80061c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	f043 0320 	orr.w	r3, r3, #32
 80061ca:	6023      	str	r3, [r4, #0]
 80061cc:	2778      	movs	r7, #120	@ 0x78
 80061ce:	4832      	ldr	r0, [pc, #200]	@ (8006298 <_printf_i+0x238>)
 80061d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	6831      	ldr	r1, [r6, #0]
 80061d8:	061f      	lsls	r7, r3, #24
 80061da:	f851 5b04 	ldr.w	r5, [r1], #4
 80061de:	d402      	bmi.n	80061e6 <_printf_i+0x186>
 80061e0:	065f      	lsls	r7, r3, #25
 80061e2:	bf48      	it	mi
 80061e4:	b2ad      	uxthmi	r5, r5
 80061e6:	6031      	str	r1, [r6, #0]
 80061e8:	07d9      	lsls	r1, r3, #31
 80061ea:	bf44      	itt	mi
 80061ec:	f043 0320 	orrmi.w	r3, r3, #32
 80061f0:	6023      	strmi	r3, [r4, #0]
 80061f2:	b11d      	cbz	r5, 80061fc <_printf_i+0x19c>
 80061f4:	2310      	movs	r3, #16
 80061f6:	e7ad      	b.n	8006154 <_printf_i+0xf4>
 80061f8:	4826      	ldr	r0, [pc, #152]	@ (8006294 <_printf_i+0x234>)
 80061fa:	e7e9      	b.n	80061d0 <_printf_i+0x170>
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	f023 0320 	bic.w	r3, r3, #32
 8006202:	6023      	str	r3, [r4, #0]
 8006204:	e7f6      	b.n	80061f4 <_printf_i+0x194>
 8006206:	4616      	mov	r6, r2
 8006208:	e7bd      	b.n	8006186 <_printf_i+0x126>
 800620a:	6833      	ldr	r3, [r6, #0]
 800620c:	6825      	ldr	r5, [r4, #0]
 800620e:	1d18      	adds	r0, r3, #4
 8006210:	6961      	ldr	r1, [r4, #20]
 8006212:	6030      	str	r0, [r6, #0]
 8006214:	062e      	lsls	r6, r5, #24
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	d501      	bpl.n	800621e <_printf_i+0x1be>
 800621a:	6019      	str	r1, [r3, #0]
 800621c:	e002      	b.n	8006224 <_printf_i+0x1c4>
 800621e:	0668      	lsls	r0, r5, #25
 8006220:	d5fb      	bpl.n	800621a <_printf_i+0x1ba>
 8006222:	8019      	strh	r1, [r3, #0]
 8006224:	2300      	movs	r3, #0
 8006226:	4616      	mov	r6, r2
 8006228:	6123      	str	r3, [r4, #16]
 800622a:	e7bc      	b.n	80061a6 <_printf_i+0x146>
 800622c:	6833      	ldr	r3, [r6, #0]
 800622e:	2100      	movs	r1, #0
 8006230:	1d1a      	adds	r2, r3, #4
 8006232:	6032      	str	r2, [r6, #0]
 8006234:	681e      	ldr	r6, [r3, #0]
 8006236:	6862      	ldr	r2, [r4, #4]
 8006238:	4630      	mov	r0, r6
 800623a:	f000 f9f0 	bl	800661e <memchr>
 800623e:	b108      	cbz	r0, 8006244 <_printf_i+0x1e4>
 8006240:	1b80      	subs	r0, r0, r6
 8006242:	6060      	str	r0, [r4, #4]
 8006244:	6863      	ldr	r3, [r4, #4]
 8006246:	6123      	str	r3, [r4, #16]
 8006248:	2300      	movs	r3, #0
 800624a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800624e:	e7aa      	b.n	80061a6 <_printf_i+0x146>
 8006250:	4632      	mov	r2, r6
 8006252:	4649      	mov	r1, r9
 8006254:	4640      	mov	r0, r8
 8006256:	6923      	ldr	r3, [r4, #16]
 8006258:	47d0      	blx	sl
 800625a:	3001      	adds	r0, #1
 800625c:	d0ad      	beq.n	80061ba <_printf_i+0x15a>
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	079b      	lsls	r3, r3, #30
 8006262:	d413      	bmi.n	800628c <_printf_i+0x22c>
 8006264:	68e0      	ldr	r0, [r4, #12]
 8006266:	9b03      	ldr	r3, [sp, #12]
 8006268:	4298      	cmp	r0, r3
 800626a:	bfb8      	it	lt
 800626c:	4618      	movlt	r0, r3
 800626e:	e7a6      	b.n	80061be <_printf_i+0x15e>
 8006270:	2301      	movs	r3, #1
 8006272:	4632      	mov	r2, r6
 8006274:	4649      	mov	r1, r9
 8006276:	4640      	mov	r0, r8
 8006278:	47d0      	blx	sl
 800627a:	3001      	adds	r0, #1
 800627c:	d09d      	beq.n	80061ba <_printf_i+0x15a>
 800627e:	3501      	adds	r5, #1
 8006280:	68e3      	ldr	r3, [r4, #12]
 8006282:	9903      	ldr	r1, [sp, #12]
 8006284:	1a5b      	subs	r3, r3, r1
 8006286:	42ab      	cmp	r3, r5
 8006288:	dcf2      	bgt.n	8006270 <_printf_i+0x210>
 800628a:	e7eb      	b.n	8006264 <_printf_i+0x204>
 800628c:	2500      	movs	r5, #0
 800628e:	f104 0619 	add.w	r6, r4, #25
 8006292:	e7f5      	b.n	8006280 <_printf_i+0x220>
 8006294:	08009674 	.word	0x08009674
 8006298:	08009685 	.word	0x08009685

0800629c <std>:
 800629c:	2300      	movs	r3, #0
 800629e:	b510      	push	{r4, lr}
 80062a0:	4604      	mov	r4, r0
 80062a2:	e9c0 3300 	strd	r3, r3, [r0]
 80062a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062aa:	6083      	str	r3, [r0, #8]
 80062ac:	8181      	strh	r1, [r0, #12]
 80062ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80062b0:	81c2      	strh	r2, [r0, #14]
 80062b2:	6183      	str	r3, [r0, #24]
 80062b4:	4619      	mov	r1, r3
 80062b6:	2208      	movs	r2, #8
 80062b8:	305c      	adds	r0, #92	@ 0x5c
 80062ba:	f000 f931 	bl	8006520 <memset>
 80062be:	4b0d      	ldr	r3, [pc, #52]	@ (80062f4 <std+0x58>)
 80062c0:	6224      	str	r4, [r4, #32]
 80062c2:	6263      	str	r3, [r4, #36]	@ 0x24
 80062c4:	4b0c      	ldr	r3, [pc, #48]	@ (80062f8 <std+0x5c>)
 80062c6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80062c8:	4b0c      	ldr	r3, [pc, #48]	@ (80062fc <std+0x60>)
 80062ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80062cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006300 <std+0x64>)
 80062ce:	6323      	str	r3, [r4, #48]	@ 0x30
 80062d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006304 <std+0x68>)
 80062d2:	429c      	cmp	r4, r3
 80062d4:	d006      	beq.n	80062e4 <std+0x48>
 80062d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80062da:	4294      	cmp	r4, r2
 80062dc:	d002      	beq.n	80062e4 <std+0x48>
 80062de:	33d0      	adds	r3, #208	@ 0xd0
 80062e0:	429c      	cmp	r4, r3
 80062e2:	d105      	bne.n	80062f0 <std+0x54>
 80062e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80062e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062ec:	f000 b994 	b.w	8006618 <__retarget_lock_init_recursive>
 80062f0:	bd10      	pop	{r4, pc}
 80062f2:	bf00      	nop
 80062f4:	08006421 	.word	0x08006421
 80062f8:	08006443 	.word	0x08006443
 80062fc:	0800647b 	.word	0x0800647b
 8006300:	0800649f 	.word	0x0800649f
 8006304:	20001524 	.word	0x20001524

08006308 <stdio_exit_handler>:
 8006308:	4a02      	ldr	r2, [pc, #8]	@ (8006314 <stdio_exit_handler+0xc>)
 800630a:	4903      	ldr	r1, [pc, #12]	@ (8006318 <stdio_exit_handler+0x10>)
 800630c:	4803      	ldr	r0, [pc, #12]	@ (800631c <stdio_exit_handler+0x14>)
 800630e:	f000 b869 	b.w	80063e4 <_fwalk_sglue>
 8006312:	bf00      	nop
 8006314:	20000010 	.word	0x20000010
 8006318:	08007fb1 	.word	0x08007fb1
 800631c:	20000020 	.word	0x20000020

08006320 <cleanup_stdio>:
 8006320:	6841      	ldr	r1, [r0, #4]
 8006322:	4b0c      	ldr	r3, [pc, #48]	@ (8006354 <cleanup_stdio+0x34>)
 8006324:	b510      	push	{r4, lr}
 8006326:	4299      	cmp	r1, r3
 8006328:	4604      	mov	r4, r0
 800632a:	d001      	beq.n	8006330 <cleanup_stdio+0x10>
 800632c:	f001 fe40 	bl	8007fb0 <_fflush_r>
 8006330:	68a1      	ldr	r1, [r4, #8]
 8006332:	4b09      	ldr	r3, [pc, #36]	@ (8006358 <cleanup_stdio+0x38>)
 8006334:	4299      	cmp	r1, r3
 8006336:	d002      	beq.n	800633e <cleanup_stdio+0x1e>
 8006338:	4620      	mov	r0, r4
 800633a:	f001 fe39 	bl	8007fb0 <_fflush_r>
 800633e:	68e1      	ldr	r1, [r4, #12]
 8006340:	4b06      	ldr	r3, [pc, #24]	@ (800635c <cleanup_stdio+0x3c>)
 8006342:	4299      	cmp	r1, r3
 8006344:	d004      	beq.n	8006350 <cleanup_stdio+0x30>
 8006346:	4620      	mov	r0, r4
 8006348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800634c:	f001 be30 	b.w	8007fb0 <_fflush_r>
 8006350:	bd10      	pop	{r4, pc}
 8006352:	bf00      	nop
 8006354:	20001524 	.word	0x20001524
 8006358:	2000158c 	.word	0x2000158c
 800635c:	200015f4 	.word	0x200015f4

08006360 <global_stdio_init.part.0>:
 8006360:	b510      	push	{r4, lr}
 8006362:	4b0b      	ldr	r3, [pc, #44]	@ (8006390 <global_stdio_init.part.0+0x30>)
 8006364:	4c0b      	ldr	r4, [pc, #44]	@ (8006394 <global_stdio_init.part.0+0x34>)
 8006366:	4a0c      	ldr	r2, [pc, #48]	@ (8006398 <global_stdio_init.part.0+0x38>)
 8006368:	4620      	mov	r0, r4
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	2104      	movs	r1, #4
 800636e:	2200      	movs	r2, #0
 8006370:	f7ff ff94 	bl	800629c <std>
 8006374:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006378:	2201      	movs	r2, #1
 800637a:	2109      	movs	r1, #9
 800637c:	f7ff ff8e 	bl	800629c <std>
 8006380:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006384:	2202      	movs	r2, #2
 8006386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800638a:	2112      	movs	r1, #18
 800638c:	f7ff bf86 	b.w	800629c <std>
 8006390:	2000165c 	.word	0x2000165c
 8006394:	20001524 	.word	0x20001524
 8006398:	08006309 	.word	0x08006309

0800639c <__sfp_lock_acquire>:
 800639c:	4801      	ldr	r0, [pc, #4]	@ (80063a4 <__sfp_lock_acquire+0x8>)
 800639e:	f000 b93c 	b.w	800661a <__retarget_lock_acquire_recursive>
 80063a2:	bf00      	nop
 80063a4:	20001665 	.word	0x20001665

080063a8 <__sfp_lock_release>:
 80063a8:	4801      	ldr	r0, [pc, #4]	@ (80063b0 <__sfp_lock_release+0x8>)
 80063aa:	f000 b937 	b.w	800661c <__retarget_lock_release_recursive>
 80063ae:	bf00      	nop
 80063b0:	20001665 	.word	0x20001665

080063b4 <__sinit>:
 80063b4:	b510      	push	{r4, lr}
 80063b6:	4604      	mov	r4, r0
 80063b8:	f7ff fff0 	bl	800639c <__sfp_lock_acquire>
 80063bc:	6a23      	ldr	r3, [r4, #32]
 80063be:	b11b      	cbz	r3, 80063c8 <__sinit+0x14>
 80063c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063c4:	f7ff bff0 	b.w	80063a8 <__sfp_lock_release>
 80063c8:	4b04      	ldr	r3, [pc, #16]	@ (80063dc <__sinit+0x28>)
 80063ca:	6223      	str	r3, [r4, #32]
 80063cc:	4b04      	ldr	r3, [pc, #16]	@ (80063e0 <__sinit+0x2c>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1f5      	bne.n	80063c0 <__sinit+0xc>
 80063d4:	f7ff ffc4 	bl	8006360 <global_stdio_init.part.0>
 80063d8:	e7f2      	b.n	80063c0 <__sinit+0xc>
 80063da:	bf00      	nop
 80063dc:	08006321 	.word	0x08006321
 80063e0:	2000165c 	.word	0x2000165c

080063e4 <_fwalk_sglue>:
 80063e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063e8:	4607      	mov	r7, r0
 80063ea:	4688      	mov	r8, r1
 80063ec:	4614      	mov	r4, r2
 80063ee:	2600      	movs	r6, #0
 80063f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063f4:	f1b9 0901 	subs.w	r9, r9, #1
 80063f8:	d505      	bpl.n	8006406 <_fwalk_sglue+0x22>
 80063fa:	6824      	ldr	r4, [r4, #0]
 80063fc:	2c00      	cmp	r4, #0
 80063fe:	d1f7      	bne.n	80063f0 <_fwalk_sglue+0xc>
 8006400:	4630      	mov	r0, r6
 8006402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006406:	89ab      	ldrh	r3, [r5, #12]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d907      	bls.n	800641c <_fwalk_sglue+0x38>
 800640c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006410:	3301      	adds	r3, #1
 8006412:	d003      	beq.n	800641c <_fwalk_sglue+0x38>
 8006414:	4629      	mov	r1, r5
 8006416:	4638      	mov	r0, r7
 8006418:	47c0      	blx	r8
 800641a:	4306      	orrs	r6, r0
 800641c:	3568      	adds	r5, #104	@ 0x68
 800641e:	e7e9      	b.n	80063f4 <_fwalk_sglue+0x10>

08006420 <__sread>:
 8006420:	b510      	push	{r4, lr}
 8006422:	460c      	mov	r4, r1
 8006424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006428:	f000 f8a8 	bl	800657c <_read_r>
 800642c:	2800      	cmp	r0, #0
 800642e:	bfab      	itete	ge
 8006430:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006432:	89a3      	ldrhlt	r3, [r4, #12]
 8006434:	181b      	addge	r3, r3, r0
 8006436:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800643a:	bfac      	ite	ge
 800643c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800643e:	81a3      	strhlt	r3, [r4, #12]
 8006440:	bd10      	pop	{r4, pc}

08006442 <__swrite>:
 8006442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006446:	461f      	mov	r7, r3
 8006448:	898b      	ldrh	r3, [r1, #12]
 800644a:	4605      	mov	r5, r0
 800644c:	05db      	lsls	r3, r3, #23
 800644e:	460c      	mov	r4, r1
 8006450:	4616      	mov	r6, r2
 8006452:	d505      	bpl.n	8006460 <__swrite+0x1e>
 8006454:	2302      	movs	r3, #2
 8006456:	2200      	movs	r2, #0
 8006458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800645c:	f000 f87c 	bl	8006558 <_lseek_r>
 8006460:	89a3      	ldrh	r3, [r4, #12]
 8006462:	4632      	mov	r2, r6
 8006464:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006468:	81a3      	strh	r3, [r4, #12]
 800646a:	4628      	mov	r0, r5
 800646c:	463b      	mov	r3, r7
 800646e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006476:	f000 b893 	b.w	80065a0 <_write_r>

0800647a <__sseek>:
 800647a:	b510      	push	{r4, lr}
 800647c:	460c      	mov	r4, r1
 800647e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006482:	f000 f869 	bl	8006558 <_lseek_r>
 8006486:	1c43      	adds	r3, r0, #1
 8006488:	89a3      	ldrh	r3, [r4, #12]
 800648a:	bf15      	itete	ne
 800648c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800648e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006492:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006496:	81a3      	strheq	r3, [r4, #12]
 8006498:	bf18      	it	ne
 800649a:	81a3      	strhne	r3, [r4, #12]
 800649c:	bd10      	pop	{r4, pc}

0800649e <__sclose>:
 800649e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a2:	f000 b849 	b.w	8006538 <_close_r>

080064a6 <_vsniprintf_r>:
 80064a6:	b530      	push	{r4, r5, lr}
 80064a8:	4614      	mov	r4, r2
 80064aa:	2c00      	cmp	r4, #0
 80064ac:	4605      	mov	r5, r0
 80064ae:	461a      	mov	r2, r3
 80064b0:	b09b      	sub	sp, #108	@ 0x6c
 80064b2:	da05      	bge.n	80064c0 <_vsniprintf_r+0x1a>
 80064b4:	238b      	movs	r3, #139	@ 0x8b
 80064b6:	6003      	str	r3, [r0, #0]
 80064b8:	f04f 30ff 	mov.w	r0, #4294967295
 80064bc:	b01b      	add	sp, #108	@ 0x6c
 80064be:	bd30      	pop	{r4, r5, pc}
 80064c0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80064c4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80064c8:	f04f 0300 	mov.w	r3, #0
 80064cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80064ce:	bf0c      	ite	eq
 80064d0:	4623      	moveq	r3, r4
 80064d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80064d6:	9302      	str	r3, [sp, #8]
 80064d8:	9305      	str	r3, [sp, #20]
 80064da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80064de:	9100      	str	r1, [sp, #0]
 80064e0:	9104      	str	r1, [sp, #16]
 80064e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80064e6:	4669      	mov	r1, sp
 80064e8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80064ea:	f001 fbe5 	bl	8007cb8 <_svfiprintf_r>
 80064ee:	1c43      	adds	r3, r0, #1
 80064f0:	bfbc      	itt	lt
 80064f2:	238b      	movlt	r3, #139	@ 0x8b
 80064f4:	602b      	strlt	r3, [r5, #0]
 80064f6:	2c00      	cmp	r4, #0
 80064f8:	d0e0      	beq.n	80064bc <_vsniprintf_r+0x16>
 80064fa:	2200      	movs	r2, #0
 80064fc:	9b00      	ldr	r3, [sp, #0]
 80064fe:	701a      	strb	r2, [r3, #0]
 8006500:	e7dc      	b.n	80064bc <_vsniprintf_r+0x16>
	...

08006504 <vsniprintf>:
 8006504:	b507      	push	{r0, r1, r2, lr}
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	4613      	mov	r3, r2
 800650a:	460a      	mov	r2, r1
 800650c:	4601      	mov	r1, r0
 800650e:	4803      	ldr	r0, [pc, #12]	@ (800651c <vsniprintf+0x18>)
 8006510:	6800      	ldr	r0, [r0, #0]
 8006512:	f7ff ffc8 	bl	80064a6 <_vsniprintf_r>
 8006516:	b003      	add	sp, #12
 8006518:	f85d fb04 	ldr.w	pc, [sp], #4
 800651c:	2000001c 	.word	0x2000001c

08006520 <memset>:
 8006520:	4603      	mov	r3, r0
 8006522:	4402      	add	r2, r0
 8006524:	4293      	cmp	r3, r2
 8006526:	d100      	bne.n	800652a <memset+0xa>
 8006528:	4770      	bx	lr
 800652a:	f803 1b01 	strb.w	r1, [r3], #1
 800652e:	e7f9      	b.n	8006524 <memset+0x4>

08006530 <_localeconv_r>:
 8006530:	4800      	ldr	r0, [pc, #0]	@ (8006534 <_localeconv_r+0x4>)
 8006532:	4770      	bx	lr
 8006534:	2000015c 	.word	0x2000015c

08006538 <_close_r>:
 8006538:	b538      	push	{r3, r4, r5, lr}
 800653a:	2300      	movs	r3, #0
 800653c:	4d05      	ldr	r5, [pc, #20]	@ (8006554 <_close_r+0x1c>)
 800653e:	4604      	mov	r4, r0
 8006540:	4608      	mov	r0, r1
 8006542:	602b      	str	r3, [r5, #0]
 8006544:	f7fc f8ed 	bl	8002722 <_close>
 8006548:	1c43      	adds	r3, r0, #1
 800654a:	d102      	bne.n	8006552 <_close_r+0x1a>
 800654c:	682b      	ldr	r3, [r5, #0]
 800654e:	b103      	cbz	r3, 8006552 <_close_r+0x1a>
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	bd38      	pop	{r3, r4, r5, pc}
 8006554:	20001660 	.word	0x20001660

08006558 <_lseek_r>:
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	4604      	mov	r4, r0
 800655c:	4608      	mov	r0, r1
 800655e:	4611      	mov	r1, r2
 8006560:	2200      	movs	r2, #0
 8006562:	4d05      	ldr	r5, [pc, #20]	@ (8006578 <_lseek_r+0x20>)
 8006564:	602a      	str	r2, [r5, #0]
 8006566:	461a      	mov	r2, r3
 8006568:	f7fc f8ff 	bl	800276a <_lseek>
 800656c:	1c43      	adds	r3, r0, #1
 800656e:	d102      	bne.n	8006576 <_lseek_r+0x1e>
 8006570:	682b      	ldr	r3, [r5, #0]
 8006572:	b103      	cbz	r3, 8006576 <_lseek_r+0x1e>
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	bd38      	pop	{r3, r4, r5, pc}
 8006578:	20001660 	.word	0x20001660

0800657c <_read_r>:
 800657c:	b538      	push	{r3, r4, r5, lr}
 800657e:	4604      	mov	r4, r0
 8006580:	4608      	mov	r0, r1
 8006582:	4611      	mov	r1, r2
 8006584:	2200      	movs	r2, #0
 8006586:	4d05      	ldr	r5, [pc, #20]	@ (800659c <_read_r+0x20>)
 8006588:	602a      	str	r2, [r5, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	f7fc f890 	bl	80026b0 <_read>
 8006590:	1c43      	adds	r3, r0, #1
 8006592:	d102      	bne.n	800659a <_read_r+0x1e>
 8006594:	682b      	ldr	r3, [r5, #0]
 8006596:	b103      	cbz	r3, 800659a <_read_r+0x1e>
 8006598:	6023      	str	r3, [r4, #0]
 800659a:	bd38      	pop	{r3, r4, r5, pc}
 800659c:	20001660 	.word	0x20001660

080065a0 <_write_r>:
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	4604      	mov	r4, r0
 80065a4:	4608      	mov	r0, r1
 80065a6:	4611      	mov	r1, r2
 80065a8:	2200      	movs	r2, #0
 80065aa:	4d05      	ldr	r5, [pc, #20]	@ (80065c0 <_write_r+0x20>)
 80065ac:	602a      	str	r2, [r5, #0]
 80065ae:	461a      	mov	r2, r3
 80065b0:	f7fc f89b 	bl	80026ea <_write>
 80065b4:	1c43      	adds	r3, r0, #1
 80065b6:	d102      	bne.n	80065be <_write_r+0x1e>
 80065b8:	682b      	ldr	r3, [r5, #0]
 80065ba:	b103      	cbz	r3, 80065be <_write_r+0x1e>
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	bd38      	pop	{r3, r4, r5, pc}
 80065c0:	20001660 	.word	0x20001660

080065c4 <__errno>:
 80065c4:	4b01      	ldr	r3, [pc, #4]	@ (80065cc <__errno+0x8>)
 80065c6:	6818      	ldr	r0, [r3, #0]
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	2000001c 	.word	0x2000001c

080065d0 <__libc_init_array>:
 80065d0:	b570      	push	{r4, r5, r6, lr}
 80065d2:	2600      	movs	r6, #0
 80065d4:	4d0c      	ldr	r5, [pc, #48]	@ (8006608 <__libc_init_array+0x38>)
 80065d6:	4c0d      	ldr	r4, [pc, #52]	@ (800660c <__libc_init_array+0x3c>)
 80065d8:	1b64      	subs	r4, r4, r5
 80065da:	10a4      	asrs	r4, r4, #2
 80065dc:	42a6      	cmp	r6, r4
 80065de:	d109      	bne.n	80065f4 <__libc_init_array+0x24>
 80065e0:	f002 f874 	bl	80086cc <_init>
 80065e4:	2600      	movs	r6, #0
 80065e6:	4d0a      	ldr	r5, [pc, #40]	@ (8006610 <__libc_init_array+0x40>)
 80065e8:	4c0a      	ldr	r4, [pc, #40]	@ (8006614 <__libc_init_array+0x44>)
 80065ea:	1b64      	subs	r4, r4, r5
 80065ec:	10a4      	asrs	r4, r4, #2
 80065ee:	42a6      	cmp	r6, r4
 80065f0:	d105      	bne.n	80065fe <__libc_init_array+0x2e>
 80065f2:	bd70      	pop	{r4, r5, r6, pc}
 80065f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065f8:	4798      	blx	r3
 80065fa:	3601      	adds	r6, #1
 80065fc:	e7ee      	b.n	80065dc <__libc_init_array+0xc>
 80065fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006602:	4798      	blx	r3
 8006604:	3601      	adds	r6, #1
 8006606:	e7f2      	b.n	80065ee <__libc_init_array+0x1e>
 8006608:	080099dc 	.word	0x080099dc
 800660c:	080099dc 	.word	0x080099dc
 8006610:	080099dc 	.word	0x080099dc
 8006614:	080099e0 	.word	0x080099e0

08006618 <__retarget_lock_init_recursive>:
 8006618:	4770      	bx	lr

0800661a <__retarget_lock_acquire_recursive>:
 800661a:	4770      	bx	lr

0800661c <__retarget_lock_release_recursive>:
 800661c:	4770      	bx	lr

0800661e <memchr>:
 800661e:	4603      	mov	r3, r0
 8006620:	b510      	push	{r4, lr}
 8006622:	b2c9      	uxtb	r1, r1
 8006624:	4402      	add	r2, r0
 8006626:	4293      	cmp	r3, r2
 8006628:	4618      	mov	r0, r3
 800662a:	d101      	bne.n	8006630 <memchr+0x12>
 800662c:	2000      	movs	r0, #0
 800662e:	e003      	b.n	8006638 <memchr+0x1a>
 8006630:	7804      	ldrb	r4, [r0, #0]
 8006632:	3301      	adds	r3, #1
 8006634:	428c      	cmp	r4, r1
 8006636:	d1f6      	bne.n	8006626 <memchr+0x8>
 8006638:	bd10      	pop	{r4, pc}

0800663a <memcpy>:
 800663a:	440a      	add	r2, r1
 800663c:	4291      	cmp	r1, r2
 800663e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006642:	d100      	bne.n	8006646 <memcpy+0xc>
 8006644:	4770      	bx	lr
 8006646:	b510      	push	{r4, lr}
 8006648:	f811 4b01 	ldrb.w	r4, [r1], #1
 800664c:	4291      	cmp	r1, r2
 800664e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006652:	d1f9      	bne.n	8006648 <memcpy+0xe>
 8006654:	bd10      	pop	{r4, pc}

08006656 <quorem>:
 8006656:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665a:	6903      	ldr	r3, [r0, #16]
 800665c:	690c      	ldr	r4, [r1, #16]
 800665e:	4607      	mov	r7, r0
 8006660:	42a3      	cmp	r3, r4
 8006662:	db7e      	blt.n	8006762 <quorem+0x10c>
 8006664:	3c01      	subs	r4, #1
 8006666:	00a3      	lsls	r3, r4, #2
 8006668:	f100 0514 	add.w	r5, r0, #20
 800666c:	f101 0814 	add.w	r8, r1, #20
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006676:	9301      	str	r3, [sp, #4]
 8006678:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800667c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006680:	3301      	adds	r3, #1
 8006682:	429a      	cmp	r2, r3
 8006684:	fbb2 f6f3 	udiv	r6, r2, r3
 8006688:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800668c:	d32e      	bcc.n	80066ec <quorem+0x96>
 800668e:	f04f 0a00 	mov.w	sl, #0
 8006692:	46c4      	mov	ip, r8
 8006694:	46ae      	mov	lr, r5
 8006696:	46d3      	mov	fp, sl
 8006698:	f85c 3b04 	ldr.w	r3, [ip], #4
 800669c:	b298      	uxth	r0, r3
 800669e:	fb06 a000 	mla	r0, r6, r0, sl
 80066a2:	0c1b      	lsrs	r3, r3, #16
 80066a4:	0c02      	lsrs	r2, r0, #16
 80066a6:	fb06 2303 	mla	r3, r6, r3, r2
 80066aa:	f8de 2000 	ldr.w	r2, [lr]
 80066ae:	b280      	uxth	r0, r0
 80066b0:	b292      	uxth	r2, r2
 80066b2:	1a12      	subs	r2, r2, r0
 80066b4:	445a      	add	r2, fp
 80066b6:	f8de 0000 	ldr.w	r0, [lr]
 80066ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066be:	b29b      	uxth	r3, r3
 80066c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80066c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80066c8:	b292      	uxth	r2, r2
 80066ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80066ce:	45e1      	cmp	r9, ip
 80066d0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80066d4:	f84e 2b04 	str.w	r2, [lr], #4
 80066d8:	d2de      	bcs.n	8006698 <quorem+0x42>
 80066da:	9b00      	ldr	r3, [sp, #0]
 80066dc:	58eb      	ldr	r3, [r5, r3]
 80066de:	b92b      	cbnz	r3, 80066ec <quorem+0x96>
 80066e0:	9b01      	ldr	r3, [sp, #4]
 80066e2:	3b04      	subs	r3, #4
 80066e4:	429d      	cmp	r5, r3
 80066e6:	461a      	mov	r2, r3
 80066e8:	d32f      	bcc.n	800674a <quorem+0xf4>
 80066ea:	613c      	str	r4, [r7, #16]
 80066ec:	4638      	mov	r0, r7
 80066ee:	f001 f97f 	bl	80079f0 <__mcmp>
 80066f2:	2800      	cmp	r0, #0
 80066f4:	db25      	blt.n	8006742 <quorem+0xec>
 80066f6:	4629      	mov	r1, r5
 80066f8:	2000      	movs	r0, #0
 80066fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80066fe:	f8d1 c000 	ldr.w	ip, [r1]
 8006702:	fa1f fe82 	uxth.w	lr, r2
 8006706:	fa1f f38c 	uxth.w	r3, ip
 800670a:	eba3 030e 	sub.w	r3, r3, lr
 800670e:	4403      	add	r3, r0
 8006710:	0c12      	lsrs	r2, r2, #16
 8006712:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006716:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800671a:	b29b      	uxth	r3, r3
 800671c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006720:	45c1      	cmp	r9, r8
 8006722:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006726:	f841 3b04 	str.w	r3, [r1], #4
 800672a:	d2e6      	bcs.n	80066fa <quorem+0xa4>
 800672c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006730:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006734:	b922      	cbnz	r2, 8006740 <quorem+0xea>
 8006736:	3b04      	subs	r3, #4
 8006738:	429d      	cmp	r5, r3
 800673a:	461a      	mov	r2, r3
 800673c:	d30b      	bcc.n	8006756 <quorem+0x100>
 800673e:	613c      	str	r4, [r7, #16]
 8006740:	3601      	adds	r6, #1
 8006742:	4630      	mov	r0, r6
 8006744:	b003      	add	sp, #12
 8006746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674a:	6812      	ldr	r2, [r2, #0]
 800674c:	3b04      	subs	r3, #4
 800674e:	2a00      	cmp	r2, #0
 8006750:	d1cb      	bne.n	80066ea <quorem+0x94>
 8006752:	3c01      	subs	r4, #1
 8006754:	e7c6      	b.n	80066e4 <quorem+0x8e>
 8006756:	6812      	ldr	r2, [r2, #0]
 8006758:	3b04      	subs	r3, #4
 800675a:	2a00      	cmp	r2, #0
 800675c:	d1ef      	bne.n	800673e <quorem+0xe8>
 800675e:	3c01      	subs	r4, #1
 8006760:	e7ea      	b.n	8006738 <quorem+0xe2>
 8006762:	2000      	movs	r0, #0
 8006764:	e7ee      	b.n	8006744 <quorem+0xee>
	...

08006768 <_dtoa_r>:
 8006768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800676c:	4614      	mov	r4, r2
 800676e:	461d      	mov	r5, r3
 8006770:	69c7      	ldr	r7, [r0, #28]
 8006772:	b097      	sub	sp, #92	@ 0x5c
 8006774:	4681      	mov	r9, r0
 8006776:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800677a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800677c:	b97f      	cbnz	r7, 800679e <_dtoa_r+0x36>
 800677e:	2010      	movs	r0, #16
 8006780:	f000 fe0e 	bl	80073a0 <malloc>
 8006784:	4602      	mov	r2, r0
 8006786:	f8c9 001c 	str.w	r0, [r9, #28]
 800678a:	b920      	cbnz	r0, 8006796 <_dtoa_r+0x2e>
 800678c:	21ef      	movs	r1, #239	@ 0xef
 800678e:	4bac      	ldr	r3, [pc, #688]	@ (8006a40 <_dtoa_r+0x2d8>)
 8006790:	48ac      	ldr	r0, [pc, #688]	@ (8006a44 <_dtoa_r+0x2dc>)
 8006792:	f001 fc5f 	bl	8008054 <__assert_func>
 8006796:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800679a:	6007      	str	r7, [r0, #0]
 800679c:	60c7      	str	r7, [r0, #12]
 800679e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80067a2:	6819      	ldr	r1, [r3, #0]
 80067a4:	b159      	cbz	r1, 80067be <_dtoa_r+0x56>
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	2301      	movs	r3, #1
 80067aa:	4093      	lsls	r3, r2
 80067ac:	604a      	str	r2, [r1, #4]
 80067ae:	608b      	str	r3, [r1, #8]
 80067b0:	4648      	mov	r0, r9
 80067b2:	f000 feeb 	bl	800758c <_Bfree>
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	1e2b      	subs	r3, r5, #0
 80067c0:	bfaf      	iteee	ge
 80067c2:	2300      	movge	r3, #0
 80067c4:	2201      	movlt	r2, #1
 80067c6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80067ca:	9307      	strlt	r3, [sp, #28]
 80067cc:	bfa8      	it	ge
 80067ce:	6033      	strge	r3, [r6, #0]
 80067d0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80067d4:	4b9c      	ldr	r3, [pc, #624]	@ (8006a48 <_dtoa_r+0x2e0>)
 80067d6:	bfb8      	it	lt
 80067d8:	6032      	strlt	r2, [r6, #0]
 80067da:	ea33 0308 	bics.w	r3, r3, r8
 80067de:	d112      	bne.n	8006806 <_dtoa_r+0x9e>
 80067e0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80067e4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80067ec:	4323      	orrs	r3, r4
 80067ee:	f000 855e 	beq.w	80072ae <_dtoa_r+0xb46>
 80067f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80067f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006a4c <_dtoa_r+0x2e4>
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 8560 	beq.w	80072be <_dtoa_r+0xb56>
 80067fe:	f10a 0303 	add.w	r3, sl, #3
 8006802:	f000 bd5a 	b.w	80072ba <_dtoa_r+0xb52>
 8006806:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800680a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800680e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006812:	2200      	movs	r2, #0
 8006814:	2300      	movs	r3, #0
 8006816:	f7fa f8c7 	bl	80009a8 <__aeabi_dcmpeq>
 800681a:	4607      	mov	r7, r0
 800681c:	b158      	cbz	r0, 8006836 <_dtoa_r+0xce>
 800681e:	2301      	movs	r3, #1
 8006820:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006822:	6013      	str	r3, [r2, #0]
 8006824:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006826:	b113      	cbz	r3, 800682e <_dtoa_r+0xc6>
 8006828:	4b89      	ldr	r3, [pc, #548]	@ (8006a50 <_dtoa_r+0x2e8>)
 800682a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800682c:	6013      	str	r3, [r2, #0]
 800682e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006a54 <_dtoa_r+0x2ec>
 8006832:	f000 bd44 	b.w	80072be <_dtoa_r+0xb56>
 8006836:	ab14      	add	r3, sp, #80	@ 0x50
 8006838:	9301      	str	r3, [sp, #4]
 800683a:	ab15      	add	r3, sp, #84	@ 0x54
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	4648      	mov	r0, r9
 8006840:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006844:	f001 f984 	bl	8007b50 <__d2b>
 8006848:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800684c:	9003      	str	r0, [sp, #12]
 800684e:	2e00      	cmp	r6, #0
 8006850:	d078      	beq.n	8006944 <_dtoa_r+0x1dc>
 8006852:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006856:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006858:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800685c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006860:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006864:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006868:	9712      	str	r7, [sp, #72]	@ 0x48
 800686a:	4619      	mov	r1, r3
 800686c:	2200      	movs	r2, #0
 800686e:	4b7a      	ldr	r3, [pc, #488]	@ (8006a58 <_dtoa_r+0x2f0>)
 8006870:	f7f9 fc7a 	bl	8000168 <__aeabi_dsub>
 8006874:	a36c      	add	r3, pc, #432	@ (adr r3, 8006a28 <_dtoa_r+0x2c0>)
 8006876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687a:	f7f9 fe2d 	bl	80004d8 <__aeabi_dmul>
 800687e:	a36c      	add	r3, pc, #432	@ (adr r3, 8006a30 <_dtoa_r+0x2c8>)
 8006880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006884:	f7f9 fc72 	bl	800016c <__adddf3>
 8006888:	4604      	mov	r4, r0
 800688a:	4630      	mov	r0, r6
 800688c:	460d      	mov	r5, r1
 800688e:	f7f9 fdb9 	bl	8000404 <__aeabi_i2d>
 8006892:	a369      	add	r3, pc, #420	@ (adr r3, 8006a38 <_dtoa_r+0x2d0>)
 8006894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006898:	f7f9 fe1e 	bl	80004d8 <__aeabi_dmul>
 800689c:	4602      	mov	r2, r0
 800689e:	460b      	mov	r3, r1
 80068a0:	4620      	mov	r0, r4
 80068a2:	4629      	mov	r1, r5
 80068a4:	f7f9 fc62 	bl	800016c <__adddf3>
 80068a8:	4604      	mov	r4, r0
 80068aa:	460d      	mov	r5, r1
 80068ac:	f7fa f8c4 	bl	8000a38 <__aeabi_d2iz>
 80068b0:	2200      	movs	r2, #0
 80068b2:	4607      	mov	r7, r0
 80068b4:	2300      	movs	r3, #0
 80068b6:	4620      	mov	r0, r4
 80068b8:	4629      	mov	r1, r5
 80068ba:	f7fa f87f 	bl	80009bc <__aeabi_dcmplt>
 80068be:	b140      	cbz	r0, 80068d2 <_dtoa_r+0x16a>
 80068c0:	4638      	mov	r0, r7
 80068c2:	f7f9 fd9f 	bl	8000404 <__aeabi_i2d>
 80068c6:	4622      	mov	r2, r4
 80068c8:	462b      	mov	r3, r5
 80068ca:	f7fa f86d 	bl	80009a8 <__aeabi_dcmpeq>
 80068ce:	b900      	cbnz	r0, 80068d2 <_dtoa_r+0x16a>
 80068d0:	3f01      	subs	r7, #1
 80068d2:	2f16      	cmp	r7, #22
 80068d4:	d854      	bhi.n	8006980 <_dtoa_r+0x218>
 80068d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068da:	4b60      	ldr	r3, [pc, #384]	@ (8006a5c <_dtoa_r+0x2f4>)
 80068dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80068e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e4:	f7fa f86a 	bl	80009bc <__aeabi_dcmplt>
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d04b      	beq.n	8006984 <_dtoa_r+0x21c>
 80068ec:	2300      	movs	r3, #0
 80068ee:	3f01      	subs	r7, #1
 80068f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80068f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80068f4:	1b9b      	subs	r3, r3, r6
 80068f6:	1e5a      	subs	r2, r3, #1
 80068f8:	bf49      	itett	mi
 80068fa:	f1c3 0301 	rsbmi	r3, r3, #1
 80068fe:	2300      	movpl	r3, #0
 8006900:	9304      	strmi	r3, [sp, #16]
 8006902:	2300      	movmi	r3, #0
 8006904:	9209      	str	r2, [sp, #36]	@ 0x24
 8006906:	bf54      	ite	pl
 8006908:	9304      	strpl	r3, [sp, #16]
 800690a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800690c:	2f00      	cmp	r7, #0
 800690e:	db3b      	blt.n	8006988 <_dtoa_r+0x220>
 8006910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006912:	970e      	str	r7, [sp, #56]	@ 0x38
 8006914:	443b      	add	r3, r7
 8006916:	9309      	str	r3, [sp, #36]	@ 0x24
 8006918:	2300      	movs	r3, #0
 800691a:	930a      	str	r3, [sp, #40]	@ 0x28
 800691c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800691e:	2b09      	cmp	r3, #9
 8006920:	d865      	bhi.n	80069ee <_dtoa_r+0x286>
 8006922:	2b05      	cmp	r3, #5
 8006924:	bfc4      	itt	gt
 8006926:	3b04      	subgt	r3, #4
 8006928:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800692a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800692c:	bfc8      	it	gt
 800692e:	2400      	movgt	r4, #0
 8006930:	f1a3 0302 	sub.w	r3, r3, #2
 8006934:	bfd8      	it	le
 8006936:	2401      	movle	r4, #1
 8006938:	2b03      	cmp	r3, #3
 800693a:	d864      	bhi.n	8006a06 <_dtoa_r+0x29e>
 800693c:	e8df f003 	tbb	[pc, r3]
 8006940:	2c385553 	.word	0x2c385553
 8006944:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006948:	441e      	add	r6, r3
 800694a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800694e:	2b20      	cmp	r3, #32
 8006950:	bfc1      	itttt	gt
 8006952:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006956:	fa08 f803 	lslgt.w	r8, r8, r3
 800695a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800695e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006962:	bfd6      	itet	le
 8006964:	f1c3 0320 	rsble	r3, r3, #32
 8006968:	ea48 0003 	orrgt.w	r0, r8, r3
 800696c:	fa04 f003 	lslle.w	r0, r4, r3
 8006970:	f7f9 fd38 	bl	80003e4 <__aeabi_ui2d>
 8006974:	2201      	movs	r2, #1
 8006976:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800697a:	3e01      	subs	r6, #1
 800697c:	9212      	str	r2, [sp, #72]	@ 0x48
 800697e:	e774      	b.n	800686a <_dtoa_r+0x102>
 8006980:	2301      	movs	r3, #1
 8006982:	e7b5      	b.n	80068f0 <_dtoa_r+0x188>
 8006984:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006986:	e7b4      	b.n	80068f2 <_dtoa_r+0x18a>
 8006988:	9b04      	ldr	r3, [sp, #16]
 800698a:	1bdb      	subs	r3, r3, r7
 800698c:	9304      	str	r3, [sp, #16]
 800698e:	427b      	negs	r3, r7
 8006990:	930a      	str	r3, [sp, #40]	@ 0x28
 8006992:	2300      	movs	r3, #0
 8006994:	930e      	str	r3, [sp, #56]	@ 0x38
 8006996:	e7c1      	b.n	800691c <_dtoa_r+0x1b4>
 8006998:	2301      	movs	r3, #1
 800699a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800699c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800699e:	eb07 0b03 	add.w	fp, r7, r3
 80069a2:	f10b 0301 	add.w	r3, fp, #1
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	9308      	str	r3, [sp, #32]
 80069aa:	bfb8      	it	lt
 80069ac:	2301      	movlt	r3, #1
 80069ae:	e006      	b.n	80069be <_dtoa_r+0x256>
 80069b0:	2301      	movs	r3, #1
 80069b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	dd28      	ble.n	8006a0c <_dtoa_r+0x2a4>
 80069ba:	469b      	mov	fp, r3
 80069bc:	9308      	str	r3, [sp, #32]
 80069be:	2100      	movs	r1, #0
 80069c0:	2204      	movs	r2, #4
 80069c2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80069c6:	f102 0514 	add.w	r5, r2, #20
 80069ca:	429d      	cmp	r5, r3
 80069cc:	d926      	bls.n	8006a1c <_dtoa_r+0x2b4>
 80069ce:	6041      	str	r1, [r0, #4]
 80069d0:	4648      	mov	r0, r9
 80069d2:	f000 fd9b 	bl	800750c <_Balloc>
 80069d6:	4682      	mov	sl, r0
 80069d8:	2800      	cmp	r0, #0
 80069da:	d143      	bne.n	8006a64 <_dtoa_r+0x2fc>
 80069dc:	4602      	mov	r2, r0
 80069de:	f240 11af 	movw	r1, #431	@ 0x1af
 80069e2:	4b1f      	ldr	r3, [pc, #124]	@ (8006a60 <_dtoa_r+0x2f8>)
 80069e4:	e6d4      	b.n	8006790 <_dtoa_r+0x28>
 80069e6:	2300      	movs	r3, #0
 80069e8:	e7e3      	b.n	80069b2 <_dtoa_r+0x24a>
 80069ea:	2300      	movs	r3, #0
 80069ec:	e7d5      	b.n	800699a <_dtoa_r+0x232>
 80069ee:	2401      	movs	r4, #1
 80069f0:	2300      	movs	r3, #0
 80069f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80069f4:	9320      	str	r3, [sp, #128]	@ 0x80
 80069f6:	f04f 3bff 	mov.w	fp, #4294967295
 80069fa:	2200      	movs	r2, #0
 80069fc:	2312      	movs	r3, #18
 80069fe:	f8cd b020 	str.w	fp, [sp, #32]
 8006a02:	9221      	str	r2, [sp, #132]	@ 0x84
 8006a04:	e7db      	b.n	80069be <_dtoa_r+0x256>
 8006a06:	2301      	movs	r3, #1
 8006a08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a0a:	e7f4      	b.n	80069f6 <_dtoa_r+0x28e>
 8006a0c:	f04f 0b01 	mov.w	fp, #1
 8006a10:	465b      	mov	r3, fp
 8006a12:	f8cd b020 	str.w	fp, [sp, #32]
 8006a16:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006a1a:	e7d0      	b.n	80069be <_dtoa_r+0x256>
 8006a1c:	3101      	adds	r1, #1
 8006a1e:	0052      	lsls	r2, r2, #1
 8006a20:	e7d1      	b.n	80069c6 <_dtoa_r+0x25e>
 8006a22:	bf00      	nop
 8006a24:	f3af 8000 	nop.w
 8006a28:	636f4361 	.word	0x636f4361
 8006a2c:	3fd287a7 	.word	0x3fd287a7
 8006a30:	8b60c8b3 	.word	0x8b60c8b3
 8006a34:	3fc68a28 	.word	0x3fc68a28
 8006a38:	509f79fb 	.word	0x509f79fb
 8006a3c:	3fd34413 	.word	0x3fd34413
 8006a40:	080096a3 	.word	0x080096a3
 8006a44:	080096ba 	.word	0x080096ba
 8006a48:	7ff00000 	.word	0x7ff00000
 8006a4c:	0800969f 	.word	0x0800969f
 8006a50:	08009673 	.word	0x08009673
 8006a54:	08009672 	.word	0x08009672
 8006a58:	3ff80000 	.word	0x3ff80000
 8006a5c:	08009808 	.word	0x08009808
 8006a60:	08009712 	.word	0x08009712
 8006a64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006a68:	6018      	str	r0, [r3, #0]
 8006a6a:	9b08      	ldr	r3, [sp, #32]
 8006a6c:	2b0e      	cmp	r3, #14
 8006a6e:	f200 80a1 	bhi.w	8006bb4 <_dtoa_r+0x44c>
 8006a72:	2c00      	cmp	r4, #0
 8006a74:	f000 809e 	beq.w	8006bb4 <_dtoa_r+0x44c>
 8006a78:	2f00      	cmp	r7, #0
 8006a7a:	dd33      	ble.n	8006ae4 <_dtoa_r+0x37c>
 8006a7c:	4b9c      	ldr	r3, [pc, #624]	@ (8006cf0 <_dtoa_r+0x588>)
 8006a7e:	f007 020f 	and.w	r2, r7, #15
 8006a82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a86:	05f8      	lsls	r0, r7, #23
 8006a88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a8c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006a90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006a94:	d516      	bpl.n	8006ac4 <_dtoa_r+0x35c>
 8006a96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a9a:	4b96      	ldr	r3, [pc, #600]	@ (8006cf4 <_dtoa_r+0x58c>)
 8006a9c:	2603      	movs	r6, #3
 8006a9e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006aa2:	f7f9 fe43 	bl	800072c <__aeabi_ddiv>
 8006aa6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006aaa:	f004 040f 	and.w	r4, r4, #15
 8006aae:	4d91      	ldr	r5, [pc, #580]	@ (8006cf4 <_dtoa_r+0x58c>)
 8006ab0:	b954      	cbnz	r4, 8006ac8 <_dtoa_r+0x360>
 8006ab2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ab6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006aba:	f7f9 fe37 	bl	800072c <__aeabi_ddiv>
 8006abe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ac2:	e028      	b.n	8006b16 <_dtoa_r+0x3ae>
 8006ac4:	2602      	movs	r6, #2
 8006ac6:	e7f2      	b.n	8006aae <_dtoa_r+0x346>
 8006ac8:	07e1      	lsls	r1, r4, #31
 8006aca:	d508      	bpl.n	8006ade <_dtoa_r+0x376>
 8006acc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ad0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ad4:	f7f9 fd00 	bl	80004d8 <__aeabi_dmul>
 8006ad8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006adc:	3601      	adds	r6, #1
 8006ade:	1064      	asrs	r4, r4, #1
 8006ae0:	3508      	adds	r5, #8
 8006ae2:	e7e5      	b.n	8006ab0 <_dtoa_r+0x348>
 8006ae4:	f000 80af 	beq.w	8006c46 <_dtoa_r+0x4de>
 8006ae8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006aec:	427c      	negs	r4, r7
 8006aee:	4b80      	ldr	r3, [pc, #512]	@ (8006cf0 <_dtoa_r+0x588>)
 8006af0:	f004 020f 	and.w	r2, r4, #15
 8006af4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afc:	f7f9 fcec 	bl	80004d8 <__aeabi_dmul>
 8006b00:	2602      	movs	r6, #2
 8006b02:	2300      	movs	r3, #0
 8006b04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b08:	4d7a      	ldr	r5, [pc, #488]	@ (8006cf4 <_dtoa_r+0x58c>)
 8006b0a:	1124      	asrs	r4, r4, #4
 8006b0c:	2c00      	cmp	r4, #0
 8006b0e:	f040 808f 	bne.w	8006c30 <_dtoa_r+0x4c8>
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1d3      	bne.n	8006abe <_dtoa_r+0x356>
 8006b16:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006b1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 8094 	beq.w	8006c4a <_dtoa_r+0x4e2>
 8006b22:	2200      	movs	r2, #0
 8006b24:	4620      	mov	r0, r4
 8006b26:	4629      	mov	r1, r5
 8006b28:	4b73      	ldr	r3, [pc, #460]	@ (8006cf8 <_dtoa_r+0x590>)
 8006b2a:	f7f9 ff47 	bl	80009bc <__aeabi_dcmplt>
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	f000 808b 	beq.w	8006c4a <_dtoa_r+0x4e2>
 8006b34:	9b08      	ldr	r3, [sp, #32]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f000 8087 	beq.w	8006c4a <_dtoa_r+0x4e2>
 8006b3c:	f1bb 0f00 	cmp.w	fp, #0
 8006b40:	dd34      	ble.n	8006bac <_dtoa_r+0x444>
 8006b42:	4620      	mov	r0, r4
 8006b44:	2200      	movs	r2, #0
 8006b46:	4629      	mov	r1, r5
 8006b48:	4b6c      	ldr	r3, [pc, #432]	@ (8006cfc <_dtoa_r+0x594>)
 8006b4a:	f7f9 fcc5 	bl	80004d8 <__aeabi_dmul>
 8006b4e:	465c      	mov	r4, fp
 8006b50:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b54:	f107 38ff 	add.w	r8, r7, #4294967295
 8006b58:	3601      	adds	r6, #1
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	f7f9 fc52 	bl	8000404 <__aeabi_i2d>
 8006b60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b64:	f7f9 fcb8 	bl	80004d8 <__aeabi_dmul>
 8006b68:	2200      	movs	r2, #0
 8006b6a:	4b65      	ldr	r3, [pc, #404]	@ (8006d00 <_dtoa_r+0x598>)
 8006b6c:	f7f9 fafe 	bl	800016c <__adddf3>
 8006b70:	4605      	mov	r5, r0
 8006b72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006b76:	2c00      	cmp	r4, #0
 8006b78:	d16a      	bne.n	8006c50 <_dtoa_r+0x4e8>
 8006b7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	4b60      	ldr	r3, [pc, #384]	@ (8006d04 <_dtoa_r+0x59c>)
 8006b82:	f7f9 faf1 	bl	8000168 <__aeabi_dsub>
 8006b86:	4602      	mov	r2, r0
 8006b88:	460b      	mov	r3, r1
 8006b8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b8e:	462a      	mov	r2, r5
 8006b90:	4633      	mov	r3, r6
 8006b92:	f7f9 ff31 	bl	80009f8 <__aeabi_dcmpgt>
 8006b96:	2800      	cmp	r0, #0
 8006b98:	f040 8298 	bne.w	80070cc <_dtoa_r+0x964>
 8006b9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ba0:	462a      	mov	r2, r5
 8006ba2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006ba6:	f7f9 ff09 	bl	80009bc <__aeabi_dcmplt>
 8006baa:	bb38      	cbnz	r0, 8006bfc <_dtoa_r+0x494>
 8006bac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006bb0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006bb4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f2c0 8157 	blt.w	8006e6a <_dtoa_r+0x702>
 8006bbc:	2f0e      	cmp	r7, #14
 8006bbe:	f300 8154 	bgt.w	8006e6a <_dtoa_r+0x702>
 8006bc2:	4b4b      	ldr	r3, [pc, #300]	@ (8006cf0 <_dtoa_r+0x588>)
 8006bc4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006bc8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006bcc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006bd0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f280 80e5 	bge.w	8006da2 <_dtoa_r+0x63a>
 8006bd8:	9b08      	ldr	r3, [sp, #32]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f300 80e1 	bgt.w	8006da2 <_dtoa_r+0x63a>
 8006be0:	d10c      	bne.n	8006bfc <_dtoa_r+0x494>
 8006be2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006be6:	2200      	movs	r2, #0
 8006be8:	4b46      	ldr	r3, [pc, #280]	@ (8006d04 <_dtoa_r+0x59c>)
 8006bea:	f7f9 fc75 	bl	80004d8 <__aeabi_dmul>
 8006bee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bf2:	f7f9 fef7 	bl	80009e4 <__aeabi_dcmpge>
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	f000 8266 	beq.w	80070c8 <_dtoa_r+0x960>
 8006bfc:	2400      	movs	r4, #0
 8006bfe:	4625      	mov	r5, r4
 8006c00:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c02:	4656      	mov	r6, sl
 8006c04:	ea6f 0803 	mvn.w	r8, r3
 8006c08:	2700      	movs	r7, #0
 8006c0a:	4621      	mov	r1, r4
 8006c0c:	4648      	mov	r0, r9
 8006c0e:	f000 fcbd 	bl	800758c <_Bfree>
 8006c12:	2d00      	cmp	r5, #0
 8006c14:	f000 80bd 	beq.w	8006d92 <_dtoa_r+0x62a>
 8006c18:	b12f      	cbz	r7, 8006c26 <_dtoa_r+0x4be>
 8006c1a:	42af      	cmp	r7, r5
 8006c1c:	d003      	beq.n	8006c26 <_dtoa_r+0x4be>
 8006c1e:	4639      	mov	r1, r7
 8006c20:	4648      	mov	r0, r9
 8006c22:	f000 fcb3 	bl	800758c <_Bfree>
 8006c26:	4629      	mov	r1, r5
 8006c28:	4648      	mov	r0, r9
 8006c2a:	f000 fcaf 	bl	800758c <_Bfree>
 8006c2e:	e0b0      	b.n	8006d92 <_dtoa_r+0x62a>
 8006c30:	07e2      	lsls	r2, r4, #31
 8006c32:	d505      	bpl.n	8006c40 <_dtoa_r+0x4d8>
 8006c34:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c38:	f7f9 fc4e 	bl	80004d8 <__aeabi_dmul>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	3601      	adds	r6, #1
 8006c40:	1064      	asrs	r4, r4, #1
 8006c42:	3508      	adds	r5, #8
 8006c44:	e762      	b.n	8006b0c <_dtoa_r+0x3a4>
 8006c46:	2602      	movs	r6, #2
 8006c48:	e765      	b.n	8006b16 <_dtoa_r+0x3ae>
 8006c4a:	46b8      	mov	r8, r7
 8006c4c:	9c08      	ldr	r4, [sp, #32]
 8006c4e:	e784      	b.n	8006b5a <_dtoa_r+0x3f2>
 8006c50:	4b27      	ldr	r3, [pc, #156]	@ (8006cf0 <_dtoa_r+0x588>)
 8006c52:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c5c:	4454      	add	r4, sl
 8006c5e:	2900      	cmp	r1, #0
 8006c60:	d054      	beq.n	8006d0c <_dtoa_r+0x5a4>
 8006c62:	2000      	movs	r0, #0
 8006c64:	4928      	ldr	r1, [pc, #160]	@ (8006d08 <_dtoa_r+0x5a0>)
 8006c66:	f7f9 fd61 	bl	800072c <__aeabi_ddiv>
 8006c6a:	4633      	mov	r3, r6
 8006c6c:	462a      	mov	r2, r5
 8006c6e:	f7f9 fa7b 	bl	8000168 <__aeabi_dsub>
 8006c72:	4656      	mov	r6, sl
 8006c74:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c7c:	f7f9 fedc 	bl	8000a38 <__aeabi_d2iz>
 8006c80:	4605      	mov	r5, r0
 8006c82:	f7f9 fbbf 	bl	8000404 <__aeabi_i2d>
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c8e:	f7f9 fa6b 	bl	8000168 <__aeabi_dsub>
 8006c92:	4602      	mov	r2, r0
 8006c94:	460b      	mov	r3, r1
 8006c96:	3530      	adds	r5, #48	@ 0x30
 8006c98:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006c9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ca0:	f806 5b01 	strb.w	r5, [r6], #1
 8006ca4:	f7f9 fe8a 	bl	80009bc <__aeabi_dcmplt>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	d172      	bne.n	8006d92 <_dtoa_r+0x62a>
 8006cac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	4911      	ldr	r1, [pc, #68]	@ (8006cf8 <_dtoa_r+0x590>)
 8006cb4:	f7f9 fa58 	bl	8000168 <__aeabi_dsub>
 8006cb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006cbc:	f7f9 fe7e 	bl	80009bc <__aeabi_dcmplt>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	f040 80b4 	bne.w	8006e2e <_dtoa_r+0x6c6>
 8006cc6:	42a6      	cmp	r6, r4
 8006cc8:	f43f af70 	beq.w	8006bac <_dtoa_r+0x444>
 8006ccc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8006cfc <_dtoa_r+0x594>)
 8006cd4:	f7f9 fc00 	bl	80004d8 <__aeabi_dmul>
 8006cd8:	2200      	movs	r2, #0
 8006cda:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006cde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ce2:	4b06      	ldr	r3, [pc, #24]	@ (8006cfc <_dtoa_r+0x594>)
 8006ce4:	f7f9 fbf8 	bl	80004d8 <__aeabi_dmul>
 8006ce8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006cec:	e7c4      	b.n	8006c78 <_dtoa_r+0x510>
 8006cee:	bf00      	nop
 8006cf0:	08009808 	.word	0x08009808
 8006cf4:	080097e0 	.word	0x080097e0
 8006cf8:	3ff00000 	.word	0x3ff00000
 8006cfc:	40240000 	.word	0x40240000
 8006d00:	401c0000 	.word	0x401c0000
 8006d04:	40140000 	.word	0x40140000
 8006d08:	3fe00000 	.word	0x3fe00000
 8006d0c:	4631      	mov	r1, r6
 8006d0e:	4628      	mov	r0, r5
 8006d10:	f7f9 fbe2 	bl	80004d8 <__aeabi_dmul>
 8006d14:	4656      	mov	r6, sl
 8006d16:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d1a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006d1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d20:	f7f9 fe8a 	bl	8000a38 <__aeabi_d2iz>
 8006d24:	4605      	mov	r5, r0
 8006d26:	f7f9 fb6d 	bl	8000404 <__aeabi_i2d>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d32:	f7f9 fa19 	bl	8000168 <__aeabi_dsub>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	3530      	adds	r5, #48	@ 0x30
 8006d3c:	f806 5b01 	strb.w	r5, [r6], #1
 8006d40:	42a6      	cmp	r6, r4
 8006d42:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d46:	f04f 0200 	mov.w	r2, #0
 8006d4a:	d124      	bne.n	8006d96 <_dtoa_r+0x62e>
 8006d4c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d50:	4bae      	ldr	r3, [pc, #696]	@ (800700c <_dtoa_r+0x8a4>)
 8006d52:	f7f9 fa0b 	bl	800016c <__adddf3>
 8006d56:	4602      	mov	r2, r0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d5e:	f7f9 fe4b 	bl	80009f8 <__aeabi_dcmpgt>
 8006d62:	2800      	cmp	r0, #0
 8006d64:	d163      	bne.n	8006e2e <_dtoa_r+0x6c6>
 8006d66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	49a7      	ldr	r1, [pc, #668]	@ (800700c <_dtoa_r+0x8a4>)
 8006d6e:	f7f9 f9fb 	bl	8000168 <__aeabi_dsub>
 8006d72:	4602      	mov	r2, r0
 8006d74:	460b      	mov	r3, r1
 8006d76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d7a:	f7f9 fe1f 	bl	80009bc <__aeabi_dcmplt>
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	f43f af14 	beq.w	8006bac <_dtoa_r+0x444>
 8006d84:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006d86:	1e73      	subs	r3, r6, #1
 8006d88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d8a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006d8e:	2b30      	cmp	r3, #48	@ 0x30
 8006d90:	d0f8      	beq.n	8006d84 <_dtoa_r+0x61c>
 8006d92:	4647      	mov	r7, r8
 8006d94:	e03b      	b.n	8006e0e <_dtoa_r+0x6a6>
 8006d96:	4b9e      	ldr	r3, [pc, #632]	@ (8007010 <_dtoa_r+0x8a8>)
 8006d98:	f7f9 fb9e 	bl	80004d8 <__aeabi_dmul>
 8006d9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006da0:	e7bc      	b.n	8006d1c <_dtoa_r+0x5b4>
 8006da2:	4656      	mov	r6, sl
 8006da4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006da8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dac:	4620      	mov	r0, r4
 8006dae:	4629      	mov	r1, r5
 8006db0:	f7f9 fcbc 	bl	800072c <__aeabi_ddiv>
 8006db4:	f7f9 fe40 	bl	8000a38 <__aeabi_d2iz>
 8006db8:	4680      	mov	r8, r0
 8006dba:	f7f9 fb23 	bl	8000404 <__aeabi_i2d>
 8006dbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dc2:	f7f9 fb89 	bl	80004d8 <__aeabi_dmul>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4620      	mov	r0, r4
 8006dcc:	4629      	mov	r1, r5
 8006dce:	f7f9 f9cb 	bl	8000168 <__aeabi_dsub>
 8006dd2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006dd6:	9d08      	ldr	r5, [sp, #32]
 8006dd8:	f806 4b01 	strb.w	r4, [r6], #1
 8006ddc:	eba6 040a 	sub.w	r4, r6, sl
 8006de0:	42a5      	cmp	r5, r4
 8006de2:	4602      	mov	r2, r0
 8006de4:	460b      	mov	r3, r1
 8006de6:	d133      	bne.n	8006e50 <_dtoa_r+0x6e8>
 8006de8:	f7f9 f9c0 	bl	800016c <__adddf3>
 8006dec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006df0:	4604      	mov	r4, r0
 8006df2:	460d      	mov	r5, r1
 8006df4:	f7f9 fe00 	bl	80009f8 <__aeabi_dcmpgt>
 8006df8:	b9c0      	cbnz	r0, 8006e2c <_dtoa_r+0x6c4>
 8006dfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dfe:	4620      	mov	r0, r4
 8006e00:	4629      	mov	r1, r5
 8006e02:	f7f9 fdd1 	bl	80009a8 <__aeabi_dcmpeq>
 8006e06:	b110      	cbz	r0, 8006e0e <_dtoa_r+0x6a6>
 8006e08:	f018 0f01 	tst.w	r8, #1
 8006e0c:	d10e      	bne.n	8006e2c <_dtoa_r+0x6c4>
 8006e0e:	4648      	mov	r0, r9
 8006e10:	9903      	ldr	r1, [sp, #12]
 8006e12:	f000 fbbb 	bl	800758c <_Bfree>
 8006e16:	2300      	movs	r3, #0
 8006e18:	7033      	strb	r3, [r6, #0]
 8006e1a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006e1c:	3701      	adds	r7, #1
 8006e1e:	601f      	str	r7, [r3, #0]
 8006e20:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 824b 	beq.w	80072be <_dtoa_r+0xb56>
 8006e28:	601e      	str	r6, [r3, #0]
 8006e2a:	e248      	b.n	80072be <_dtoa_r+0xb56>
 8006e2c:	46b8      	mov	r8, r7
 8006e2e:	4633      	mov	r3, r6
 8006e30:	461e      	mov	r6, r3
 8006e32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e36:	2a39      	cmp	r2, #57	@ 0x39
 8006e38:	d106      	bne.n	8006e48 <_dtoa_r+0x6e0>
 8006e3a:	459a      	cmp	sl, r3
 8006e3c:	d1f8      	bne.n	8006e30 <_dtoa_r+0x6c8>
 8006e3e:	2230      	movs	r2, #48	@ 0x30
 8006e40:	f108 0801 	add.w	r8, r8, #1
 8006e44:	f88a 2000 	strb.w	r2, [sl]
 8006e48:	781a      	ldrb	r2, [r3, #0]
 8006e4a:	3201      	adds	r2, #1
 8006e4c:	701a      	strb	r2, [r3, #0]
 8006e4e:	e7a0      	b.n	8006d92 <_dtoa_r+0x62a>
 8006e50:	2200      	movs	r2, #0
 8006e52:	4b6f      	ldr	r3, [pc, #444]	@ (8007010 <_dtoa_r+0x8a8>)
 8006e54:	f7f9 fb40 	bl	80004d8 <__aeabi_dmul>
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	4604      	mov	r4, r0
 8006e5e:	460d      	mov	r5, r1
 8006e60:	f7f9 fda2 	bl	80009a8 <__aeabi_dcmpeq>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	d09f      	beq.n	8006da8 <_dtoa_r+0x640>
 8006e68:	e7d1      	b.n	8006e0e <_dtoa_r+0x6a6>
 8006e6a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006e6c:	2a00      	cmp	r2, #0
 8006e6e:	f000 80ea 	beq.w	8007046 <_dtoa_r+0x8de>
 8006e72:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006e74:	2a01      	cmp	r2, #1
 8006e76:	f300 80cd 	bgt.w	8007014 <_dtoa_r+0x8ac>
 8006e7a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006e7c:	2a00      	cmp	r2, #0
 8006e7e:	f000 80c1 	beq.w	8007004 <_dtoa_r+0x89c>
 8006e82:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006e86:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006e88:	9e04      	ldr	r6, [sp, #16]
 8006e8a:	9a04      	ldr	r2, [sp, #16]
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	441a      	add	r2, r3
 8006e90:	9204      	str	r2, [sp, #16]
 8006e92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e94:	4648      	mov	r0, r9
 8006e96:	441a      	add	r2, r3
 8006e98:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e9a:	f000 fc2b 	bl	80076f4 <__i2b>
 8006e9e:	4605      	mov	r5, r0
 8006ea0:	b166      	cbz	r6, 8006ebc <_dtoa_r+0x754>
 8006ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	dd09      	ble.n	8006ebc <_dtoa_r+0x754>
 8006ea8:	42b3      	cmp	r3, r6
 8006eaa:	bfa8      	it	ge
 8006eac:	4633      	movge	r3, r6
 8006eae:	9a04      	ldr	r2, [sp, #16]
 8006eb0:	1af6      	subs	r6, r6, r3
 8006eb2:	1ad2      	subs	r2, r2, r3
 8006eb4:	9204      	str	r2, [sp, #16]
 8006eb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ebc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ebe:	b30b      	cbz	r3, 8006f04 <_dtoa_r+0x79c>
 8006ec0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f000 80c6 	beq.w	8007054 <_dtoa_r+0x8ec>
 8006ec8:	2c00      	cmp	r4, #0
 8006eca:	f000 80c0 	beq.w	800704e <_dtoa_r+0x8e6>
 8006ece:	4629      	mov	r1, r5
 8006ed0:	4622      	mov	r2, r4
 8006ed2:	4648      	mov	r0, r9
 8006ed4:	f000 fcc6 	bl	8007864 <__pow5mult>
 8006ed8:	9a03      	ldr	r2, [sp, #12]
 8006eda:	4601      	mov	r1, r0
 8006edc:	4605      	mov	r5, r0
 8006ede:	4648      	mov	r0, r9
 8006ee0:	f000 fc1e 	bl	8007720 <__multiply>
 8006ee4:	9903      	ldr	r1, [sp, #12]
 8006ee6:	4680      	mov	r8, r0
 8006ee8:	4648      	mov	r0, r9
 8006eea:	f000 fb4f 	bl	800758c <_Bfree>
 8006eee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ef0:	1b1b      	subs	r3, r3, r4
 8006ef2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ef4:	f000 80b1 	beq.w	800705a <_dtoa_r+0x8f2>
 8006ef8:	4641      	mov	r1, r8
 8006efa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006efc:	4648      	mov	r0, r9
 8006efe:	f000 fcb1 	bl	8007864 <__pow5mult>
 8006f02:	9003      	str	r0, [sp, #12]
 8006f04:	2101      	movs	r1, #1
 8006f06:	4648      	mov	r0, r9
 8006f08:	f000 fbf4 	bl	80076f4 <__i2b>
 8006f0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f0e:	4604      	mov	r4, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f000 81d8 	beq.w	80072c6 <_dtoa_r+0xb5e>
 8006f16:	461a      	mov	r2, r3
 8006f18:	4601      	mov	r1, r0
 8006f1a:	4648      	mov	r0, r9
 8006f1c:	f000 fca2 	bl	8007864 <__pow5mult>
 8006f20:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f22:	4604      	mov	r4, r0
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	f300 809f 	bgt.w	8007068 <_dtoa_r+0x900>
 8006f2a:	9b06      	ldr	r3, [sp, #24]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f040 8097 	bne.w	8007060 <_dtoa_r+0x8f8>
 8006f32:	9b07      	ldr	r3, [sp, #28]
 8006f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f040 8093 	bne.w	8007064 <_dtoa_r+0x8fc>
 8006f3e:	9b07      	ldr	r3, [sp, #28]
 8006f40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f44:	0d1b      	lsrs	r3, r3, #20
 8006f46:	051b      	lsls	r3, r3, #20
 8006f48:	b133      	cbz	r3, 8006f58 <_dtoa_r+0x7f0>
 8006f4a:	9b04      	ldr	r3, [sp, #16]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	9304      	str	r3, [sp, #16]
 8006f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f52:	3301      	adds	r3, #1
 8006f54:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f56:	2301      	movs	r3, #1
 8006f58:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 81b8 	beq.w	80072d2 <_dtoa_r+0xb6a>
 8006f62:	6923      	ldr	r3, [r4, #16]
 8006f64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f68:	6918      	ldr	r0, [r3, #16]
 8006f6a:	f000 fb77 	bl	800765c <__hi0bits>
 8006f6e:	f1c0 0020 	rsb	r0, r0, #32
 8006f72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f74:	4418      	add	r0, r3
 8006f76:	f010 001f 	ands.w	r0, r0, #31
 8006f7a:	f000 8082 	beq.w	8007082 <_dtoa_r+0x91a>
 8006f7e:	f1c0 0320 	rsb	r3, r0, #32
 8006f82:	2b04      	cmp	r3, #4
 8006f84:	dd73      	ble.n	800706e <_dtoa_r+0x906>
 8006f86:	9b04      	ldr	r3, [sp, #16]
 8006f88:	f1c0 001c 	rsb	r0, r0, #28
 8006f8c:	4403      	add	r3, r0
 8006f8e:	9304      	str	r3, [sp, #16]
 8006f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f92:	4406      	add	r6, r0
 8006f94:	4403      	add	r3, r0
 8006f96:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f98:	9b04      	ldr	r3, [sp, #16]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	dd05      	ble.n	8006faa <_dtoa_r+0x842>
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	4648      	mov	r0, r9
 8006fa2:	9903      	ldr	r1, [sp, #12]
 8006fa4:	f000 fcb8 	bl	8007918 <__lshift>
 8006fa8:	9003      	str	r0, [sp, #12]
 8006faa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	dd05      	ble.n	8006fbc <_dtoa_r+0x854>
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	4648      	mov	r0, r9
 8006fb6:	f000 fcaf 	bl	8007918 <__lshift>
 8006fba:	4604      	mov	r4, r0
 8006fbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d061      	beq.n	8007086 <_dtoa_r+0x91e>
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	9803      	ldr	r0, [sp, #12]
 8006fc6:	f000 fd13 	bl	80079f0 <__mcmp>
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	da5b      	bge.n	8007086 <_dtoa_r+0x91e>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	220a      	movs	r2, #10
 8006fd2:	4648      	mov	r0, r9
 8006fd4:	9903      	ldr	r1, [sp, #12]
 8006fd6:	f000 fafb 	bl	80075d0 <__multadd>
 8006fda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fdc:	f107 38ff 	add.w	r8, r7, #4294967295
 8006fe0:	9003      	str	r0, [sp, #12]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f000 8177 	beq.w	80072d6 <_dtoa_r+0xb6e>
 8006fe8:	4629      	mov	r1, r5
 8006fea:	2300      	movs	r3, #0
 8006fec:	220a      	movs	r2, #10
 8006fee:	4648      	mov	r0, r9
 8006ff0:	f000 faee 	bl	80075d0 <__multadd>
 8006ff4:	f1bb 0f00 	cmp.w	fp, #0
 8006ff8:	4605      	mov	r5, r0
 8006ffa:	dc6f      	bgt.n	80070dc <_dtoa_r+0x974>
 8006ffc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	dc49      	bgt.n	8007096 <_dtoa_r+0x92e>
 8007002:	e06b      	b.n	80070dc <_dtoa_r+0x974>
 8007004:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007006:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800700a:	e73c      	b.n	8006e86 <_dtoa_r+0x71e>
 800700c:	3fe00000 	.word	0x3fe00000
 8007010:	40240000 	.word	0x40240000
 8007014:	9b08      	ldr	r3, [sp, #32]
 8007016:	1e5c      	subs	r4, r3, #1
 8007018:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800701a:	42a3      	cmp	r3, r4
 800701c:	db09      	blt.n	8007032 <_dtoa_r+0x8ca>
 800701e:	1b1c      	subs	r4, r3, r4
 8007020:	9b08      	ldr	r3, [sp, #32]
 8007022:	2b00      	cmp	r3, #0
 8007024:	f6bf af30 	bge.w	8006e88 <_dtoa_r+0x720>
 8007028:	9b04      	ldr	r3, [sp, #16]
 800702a:	9a08      	ldr	r2, [sp, #32]
 800702c:	1a9e      	subs	r6, r3, r2
 800702e:	2300      	movs	r3, #0
 8007030:	e72b      	b.n	8006e8a <_dtoa_r+0x722>
 8007032:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007034:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007036:	1ae3      	subs	r3, r4, r3
 8007038:	441a      	add	r2, r3
 800703a:	940a      	str	r4, [sp, #40]	@ 0x28
 800703c:	9e04      	ldr	r6, [sp, #16]
 800703e:	2400      	movs	r4, #0
 8007040:	9b08      	ldr	r3, [sp, #32]
 8007042:	920e      	str	r2, [sp, #56]	@ 0x38
 8007044:	e721      	b.n	8006e8a <_dtoa_r+0x722>
 8007046:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007048:	9e04      	ldr	r6, [sp, #16]
 800704a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800704c:	e728      	b.n	8006ea0 <_dtoa_r+0x738>
 800704e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007052:	e751      	b.n	8006ef8 <_dtoa_r+0x790>
 8007054:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007056:	9903      	ldr	r1, [sp, #12]
 8007058:	e750      	b.n	8006efc <_dtoa_r+0x794>
 800705a:	f8cd 800c 	str.w	r8, [sp, #12]
 800705e:	e751      	b.n	8006f04 <_dtoa_r+0x79c>
 8007060:	2300      	movs	r3, #0
 8007062:	e779      	b.n	8006f58 <_dtoa_r+0x7f0>
 8007064:	9b06      	ldr	r3, [sp, #24]
 8007066:	e777      	b.n	8006f58 <_dtoa_r+0x7f0>
 8007068:	2300      	movs	r3, #0
 800706a:	930a      	str	r3, [sp, #40]	@ 0x28
 800706c:	e779      	b.n	8006f62 <_dtoa_r+0x7fa>
 800706e:	d093      	beq.n	8006f98 <_dtoa_r+0x830>
 8007070:	9a04      	ldr	r2, [sp, #16]
 8007072:	331c      	adds	r3, #28
 8007074:	441a      	add	r2, r3
 8007076:	9204      	str	r2, [sp, #16]
 8007078:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800707a:	441e      	add	r6, r3
 800707c:	441a      	add	r2, r3
 800707e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007080:	e78a      	b.n	8006f98 <_dtoa_r+0x830>
 8007082:	4603      	mov	r3, r0
 8007084:	e7f4      	b.n	8007070 <_dtoa_r+0x908>
 8007086:	9b08      	ldr	r3, [sp, #32]
 8007088:	46b8      	mov	r8, r7
 800708a:	2b00      	cmp	r3, #0
 800708c:	dc20      	bgt.n	80070d0 <_dtoa_r+0x968>
 800708e:	469b      	mov	fp, r3
 8007090:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007092:	2b02      	cmp	r3, #2
 8007094:	dd1e      	ble.n	80070d4 <_dtoa_r+0x96c>
 8007096:	f1bb 0f00 	cmp.w	fp, #0
 800709a:	f47f adb1 	bne.w	8006c00 <_dtoa_r+0x498>
 800709e:	4621      	mov	r1, r4
 80070a0:	465b      	mov	r3, fp
 80070a2:	2205      	movs	r2, #5
 80070a4:	4648      	mov	r0, r9
 80070a6:	f000 fa93 	bl	80075d0 <__multadd>
 80070aa:	4601      	mov	r1, r0
 80070ac:	4604      	mov	r4, r0
 80070ae:	9803      	ldr	r0, [sp, #12]
 80070b0:	f000 fc9e 	bl	80079f0 <__mcmp>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	f77f ada3 	ble.w	8006c00 <_dtoa_r+0x498>
 80070ba:	4656      	mov	r6, sl
 80070bc:	2331      	movs	r3, #49	@ 0x31
 80070be:	f108 0801 	add.w	r8, r8, #1
 80070c2:	f806 3b01 	strb.w	r3, [r6], #1
 80070c6:	e59f      	b.n	8006c08 <_dtoa_r+0x4a0>
 80070c8:	46b8      	mov	r8, r7
 80070ca:	9c08      	ldr	r4, [sp, #32]
 80070cc:	4625      	mov	r5, r4
 80070ce:	e7f4      	b.n	80070ba <_dtoa_r+0x952>
 80070d0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80070d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 8101 	beq.w	80072de <_dtoa_r+0xb76>
 80070dc:	2e00      	cmp	r6, #0
 80070de:	dd05      	ble.n	80070ec <_dtoa_r+0x984>
 80070e0:	4629      	mov	r1, r5
 80070e2:	4632      	mov	r2, r6
 80070e4:	4648      	mov	r0, r9
 80070e6:	f000 fc17 	bl	8007918 <__lshift>
 80070ea:	4605      	mov	r5, r0
 80070ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d05c      	beq.n	80071ac <_dtoa_r+0xa44>
 80070f2:	4648      	mov	r0, r9
 80070f4:	6869      	ldr	r1, [r5, #4]
 80070f6:	f000 fa09 	bl	800750c <_Balloc>
 80070fa:	4606      	mov	r6, r0
 80070fc:	b928      	cbnz	r0, 800710a <_dtoa_r+0x9a2>
 80070fe:	4602      	mov	r2, r0
 8007100:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007104:	4b80      	ldr	r3, [pc, #512]	@ (8007308 <_dtoa_r+0xba0>)
 8007106:	f7ff bb43 	b.w	8006790 <_dtoa_r+0x28>
 800710a:	692a      	ldr	r2, [r5, #16]
 800710c:	f105 010c 	add.w	r1, r5, #12
 8007110:	3202      	adds	r2, #2
 8007112:	0092      	lsls	r2, r2, #2
 8007114:	300c      	adds	r0, #12
 8007116:	f7ff fa90 	bl	800663a <memcpy>
 800711a:	2201      	movs	r2, #1
 800711c:	4631      	mov	r1, r6
 800711e:	4648      	mov	r0, r9
 8007120:	f000 fbfa 	bl	8007918 <__lshift>
 8007124:	462f      	mov	r7, r5
 8007126:	4605      	mov	r5, r0
 8007128:	f10a 0301 	add.w	r3, sl, #1
 800712c:	9304      	str	r3, [sp, #16]
 800712e:	eb0a 030b 	add.w	r3, sl, fp
 8007132:	930a      	str	r3, [sp, #40]	@ 0x28
 8007134:	9b06      	ldr	r3, [sp, #24]
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	9309      	str	r3, [sp, #36]	@ 0x24
 800713c:	9b04      	ldr	r3, [sp, #16]
 800713e:	4621      	mov	r1, r4
 8007140:	9803      	ldr	r0, [sp, #12]
 8007142:	f103 3bff 	add.w	fp, r3, #4294967295
 8007146:	f7ff fa86 	bl	8006656 <quorem>
 800714a:	4603      	mov	r3, r0
 800714c:	4639      	mov	r1, r7
 800714e:	3330      	adds	r3, #48	@ 0x30
 8007150:	9006      	str	r0, [sp, #24]
 8007152:	9803      	ldr	r0, [sp, #12]
 8007154:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007156:	f000 fc4b 	bl	80079f0 <__mcmp>
 800715a:	462a      	mov	r2, r5
 800715c:	9008      	str	r0, [sp, #32]
 800715e:	4621      	mov	r1, r4
 8007160:	4648      	mov	r0, r9
 8007162:	f000 fc61 	bl	8007a28 <__mdiff>
 8007166:	68c2      	ldr	r2, [r0, #12]
 8007168:	4606      	mov	r6, r0
 800716a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800716c:	bb02      	cbnz	r2, 80071b0 <_dtoa_r+0xa48>
 800716e:	4601      	mov	r1, r0
 8007170:	9803      	ldr	r0, [sp, #12]
 8007172:	f000 fc3d 	bl	80079f0 <__mcmp>
 8007176:	4602      	mov	r2, r0
 8007178:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800717a:	4631      	mov	r1, r6
 800717c:	4648      	mov	r0, r9
 800717e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8007182:	f000 fa03 	bl	800758c <_Bfree>
 8007186:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007188:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800718a:	9e04      	ldr	r6, [sp, #16]
 800718c:	ea42 0103 	orr.w	r1, r2, r3
 8007190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007192:	4319      	orrs	r1, r3
 8007194:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007196:	d10d      	bne.n	80071b4 <_dtoa_r+0xa4c>
 8007198:	2b39      	cmp	r3, #57	@ 0x39
 800719a:	d027      	beq.n	80071ec <_dtoa_r+0xa84>
 800719c:	9a08      	ldr	r2, [sp, #32]
 800719e:	2a00      	cmp	r2, #0
 80071a0:	dd01      	ble.n	80071a6 <_dtoa_r+0xa3e>
 80071a2:	9b06      	ldr	r3, [sp, #24]
 80071a4:	3331      	adds	r3, #49	@ 0x31
 80071a6:	f88b 3000 	strb.w	r3, [fp]
 80071aa:	e52e      	b.n	8006c0a <_dtoa_r+0x4a2>
 80071ac:	4628      	mov	r0, r5
 80071ae:	e7b9      	b.n	8007124 <_dtoa_r+0x9bc>
 80071b0:	2201      	movs	r2, #1
 80071b2:	e7e2      	b.n	800717a <_dtoa_r+0xa12>
 80071b4:	9908      	ldr	r1, [sp, #32]
 80071b6:	2900      	cmp	r1, #0
 80071b8:	db04      	blt.n	80071c4 <_dtoa_r+0xa5c>
 80071ba:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80071bc:	4301      	orrs	r1, r0
 80071be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071c0:	4301      	orrs	r1, r0
 80071c2:	d120      	bne.n	8007206 <_dtoa_r+0xa9e>
 80071c4:	2a00      	cmp	r2, #0
 80071c6:	ddee      	ble.n	80071a6 <_dtoa_r+0xa3e>
 80071c8:	2201      	movs	r2, #1
 80071ca:	9903      	ldr	r1, [sp, #12]
 80071cc:	4648      	mov	r0, r9
 80071ce:	9304      	str	r3, [sp, #16]
 80071d0:	f000 fba2 	bl	8007918 <__lshift>
 80071d4:	4621      	mov	r1, r4
 80071d6:	9003      	str	r0, [sp, #12]
 80071d8:	f000 fc0a 	bl	80079f0 <__mcmp>
 80071dc:	2800      	cmp	r0, #0
 80071de:	9b04      	ldr	r3, [sp, #16]
 80071e0:	dc02      	bgt.n	80071e8 <_dtoa_r+0xa80>
 80071e2:	d1e0      	bne.n	80071a6 <_dtoa_r+0xa3e>
 80071e4:	07da      	lsls	r2, r3, #31
 80071e6:	d5de      	bpl.n	80071a6 <_dtoa_r+0xa3e>
 80071e8:	2b39      	cmp	r3, #57	@ 0x39
 80071ea:	d1da      	bne.n	80071a2 <_dtoa_r+0xa3a>
 80071ec:	2339      	movs	r3, #57	@ 0x39
 80071ee:	f88b 3000 	strb.w	r3, [fp]
 80071f2:	4633      	mov	r3, r6
 80071f4:	461e      	mov	r6, r3
 80071f6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80071fa:	3b01      	subs	r3, #1
 80071fc:	2a39      	cmp	r2, #57	@ 0x39
 80071fe:	d04e      	beq.n	800729e <_dtoa_r+0xb36>
 8007200:	3201      	adds	r2, #1
 8007202:	701a      	strb	r2, [r3, #0]
 8007204:	e501      	b.n	8006c0a <_dtoa_r+0x4a2>
 8007206:	2a00      	cmp	r2, #0
 8007208:	dd03      	ble.n	8007212 <_dtoa_r+0xaaa>
 800720a:	2b39      	cmp	r3, #57	@ 0x39
 800720c:	d0ee      	beq.n	80071ec <_dtoa_r+0xa84>
 800720e:	3301      	adds	r3, #1
 8007210:	e7c9      	b.n	80071a6 <_dtoa_r+0xa3e>
 8007212:	9a04      	ldr	r2, [sp, #16]
 8007214:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007216:	f802 3c01 	strb.w	r3, [r2, #-1]
 800721a:	428a      	cmp	r2, r1
 800721c:	d028      	beq.n	8007270 <_dtoa_r+0xb08>
 800721e:	2300      	movs	r3, #0
 8007220:	220a      	movs	r2, #10
 8007222:	9903      	ldr	r1, [sp, #12]
 8007224:	4648      	mov	r0, r9
 8007226:	f000 f9d3 	bl	80075d0 <__multadd>
 800722a:	42af      	cmp	r7, r5
 800722c:	9003      	str	r0, [sp, #12]
 800722e:	f04f 0300 	mov.w	r3, #0
 8007232:	f04f 020a 	mov.w	r2, #10
 8007236:	4639      	mov	r1, r7
 8007238:	4648      	mov	r0, r9
 800723a:	d107      	bne.n	800724c <_dtoa_r+0xae4>
 800723c:	f000 f9c8 	bl	80075d0 <__multadd>
 8007240:	4607      	mov	r7, r0
 8007242:	4605      	mov	r5, r0
 8007244:	9b04      	ldr	r3, [sp, #16]
 8007246:	3301      	adds	r3, #1
 8007248:	9304      	str	r3, [sp, #16]
 800724a:	e777      	b.n	800713c <_dtoa_r+0x9d4>
 800724c:	f000 f9c0 	bl	80075d0 <__multadd>
 8007250:	4629      	mov	r1, r5
 8007252:	4607      	mov	r7, r0
 8007254:	2300      	movs	r3, #0
 8007256:	220a      	movs	r2, #10
 8007258:	4648      	mov	r0, r9
 800725a:	f000 f9b9 	bl	80075d0 <__multadd>
 800725e:	4605      	mov	r5, r0
 8007260:	e7f0      	b.n	8007244 <_dtoa_r+0xadc>
 8007262:	f1bb 0f00 	cmp.w	fp, #0
 8007266:	bfcc      	ite	gt
 8007268:	465e      	movgt	r6, fp
 800726a:	2601      	movle	r6, #1
 800726c:	2700      	movs	r7, #0
 800726e:	4456      	add	r6, sl
 8007270:	2201      	movs	r2, #1
 8007272:	9903      	ldr	r1, [sp, #12]
 8007274:	4648      	mov	r0, r9
 8007276:	9304      	str	r3, [sp, #16]
 8007278:	f000 fb4e 	bl	8007918 <__lshift>
 800727c:	4621      	mov	r1, r4
 800727e:	9003      	str	r0, [sp, #12]
 8007280:	f000 fbb6 	bl	80079f0 <__mcmp>
 8007284:	2800      	cmp	r0, #0
 8007286:	dcb4      	bgt.n	80071f2 <_dtoa_r+0xa8a>
 8007288:	d102      	bne.n	8007290 <_dtoa_r+0xb28>
 800728a:	9b04      	ldr	r3, [sp, #16]
 800728c:	07db      	lsls	r3, r3, #31
 800728e:	d4b0      	bmi.n	80071f2 <_dtoa_r+0xa8a>
 8007290:	4633      	mov	r3, r6
 8007292:	461e      	mov	r6, r3
 8007294:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007298:	2a30      	cmp	r2, #48	@ 0x30
 800729a:	d0fa      	beq.n	8007292 <_dtoa_r+0xb2a>
 800729c:	e4b5      	b.n	8006c0a <_dtoa_r+0x4a2>
 800729e:	459a      	cmp	sl, r3
 80072a0:	d1a8      	bne.n	80071f4 <_dtoa_r+0xa8c>
 80072a2:	2331      	movs	r3, #49	@ 0x31
 80072a4:	f108 0801 	add.w	r8, r8, #1
 80072a8:	f88a 3000 	strb.w	r3, [sl]
 80072ac:	e4ad      	b.n	8006c0a <_dtoa_r+0x4a2>
 80072ae:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80072b0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800730c <_dtoa_r+0xba4>
 80072b4:	b11b      	cbz	r3, 80072be <_dtoa_r+0xb56>
 80072b6:	f10a 0308 	add.w	r3, sl, #8
 80072ba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80072bc:	6013      	str	r3, [r2, #0]
 80072be:	4650      	mov	r0, sl
 80072c0:	b017      	add	sp, #92	@ 0x5c
 80072c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	f77f ae2e 	ble.w	8006f2a <_dtoa_r+0x7c2>
 80072ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80072d2:	2001      	movs	r0, #1
 80072d4:	e64d      	b.n	8006f72 <_dtoa_r+0x80a>
 80072d6:	f1bb 0f00 	cmp.w	fp, #0
 80072da:	f77f aed9 	ble.w	8007090 <_dtoa_r+0x928>
 80072de:	4656      	mov	r6, sl
 80072e0:	4621      	mov	r1, r4
 80072e2:	9803      	ldr	r0, [sp, #12]
 80072e4:	f7ff f9b7 	bl	8006656 <quorem>
 80072e8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80072ec:	f806 3b01 	strb.w	r3, [r6], #1
 80072f0:	eba6 020a 	sub.w	r2, r6, sl
 80072f4:	4593      	cmp	fp, r2
 80072f6:	ddb4      	ble.n	8007262 <_dtoa_r+0xafa>
 80072f8:	2300      	movs	r3, #0
 80072fa:	220a      	movs	r2, #10
 80072fc:	4648      	mov	r0, r9
 80072fe:	9903      	ldr	r1, [sp, #12]
 8007300:	f000 f966 	bl	80075d0 <__multadd>
 8007304:	9003      	str	r0, [sp, #12]
 8007306:	e7eb      	b.n	80072e0 <_dtoa_r+0xb78>
 8007308:	08009712 	.word	0x08009712
 800730c:	08009696 	.word	0x08009696

08007310 <_free_r>:
 8007310:	b538      	push	{r3, r4, r5, lr}
 8007312:	4605      	mov	r5, r0
 8007314:	2900      	cmp	r1, #0
 8007316:	d040      	beq.n	800739a <_free_r+0x8a>
 8007318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800731c:	1f0c      	subs	r4, r1, #4
 800731e:	2b00      	cmp	r3, #0
 8007320:	bfb8      	it	lt
 8007322:	18e4      	addlt	r4, r4, r3
 8007324:	f000 f8e6 	bl	80074f4 <__malloc_lock>
 8007328:	4a1c      	ldr	r2, [pc, #112]	@ (800739c <_free_r+0x8c>)
 800732a:	6813      	ldr	r3, [r2, #0]
 800732c:	b933      	cbnz	r3, 800733c <_free_r+0x2c>
 800732e:	6063      	str	r3, [r4, #4]
 8007330:	6014      	str	r4, [r2, #0]
 8007332:	4628      	mov	r0, r5
 8007334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007338:	f000 b8e2 	b.w	8007500 <__malloc_unlock>
 800733c:	42a3      	cmp	r3, r4
 800733e:	d908      	bls.n	8007352 <_free_r+0x42>
 8007340:	6820      	ldr	r0, [r4, #0]
 8007342:	1821      	adds	r1, r4, r0
 8007344:	428b      	cmp	r3, r1
 8007346:	bf01      	itttt	eq
 8007348:	6819      	ldreq	r1, [r3, #0]
 800734a:	685b      	ldreq	r3, [r3, #4]
 800734c:	1809      	addeq	r1, r1, r0
 800734e:	6021      	streq	r1, [r4, #0]
 8007350:	e7ed      	b.n	800732e <_free_r+0x1e>
 8007352:	461a      	mov	r2, r3
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	b10b      	cbz	r3, 800735c <_free_r+0x4c>
 8007358:	42a3      	cmp	r3, r4
 800735a:	d9fa      	bls.n	8007352 <_free_r+0x42>
 800735c:	6811      	ldr	r1, [r2, #0]
 800735e:	1850      	adds	r0, r2, r1
 8007360:	42a0      	cmp	r0, r4
 8007362:	d10b      	bne.n	800737c <_free_r+0x6c>
 8007364:	6820      	ldr	r0, [r4, #0]
 8007366:	4401      	add	r1, r0
 8007368:	1850      	adds	r0, r2, r1
 800736a:	4283      	cmp	r3, r0
 800736c:	6011      	str	r1, [r2, #0]
 800736e:	d1e0      	bne.n	8007332 <_free_r+0x22>
 8007370:	6818      	ldr	r0, [r3, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	4408      	add	r0, r1
 8007376:	6010      	str	r0, [r2, #0]
 8007378:	6053      	str	r3, [r2, #4]
 800737a:	e7da      	b.n	8007332 <_free_r+0x22>
 800737c:	d902      	bls.n	8007384 <_free_r+0x74>
 800737e:	230c      	movs	r3, #12
 8007380:	602b      	str	r3, [r5, #0]
 8007382:	e7d6      	b.n	8007332 <_free_r+0x22>
 8007384:	6820      	ldr	r0, [r4, #0]
 8007386:	1821      	adds	r1, r4, r0
 8007388:	428b      	cmp	r3, r1
 800738a:	bf01      	itttt	eq
 800738c:	6819      	ldreq	r1, [r3, #0]
 800738e:	685b      	ldreq	r3, [r3, #4]
 8007390:	1809      	addeq	r1, r1, r0
 8007392:	6021      	streq	r1, [r4, #0]
 8007394:	6063      	str	r3, [r4, #4]
 8007396:	6054      	str	r4, [r2, #4]
 8007398:	e7cb      	b.n	8007332 <_free_r+0x22>
 800739a:	bd38      	pop	{r3, r4, r5, pc}
 800739c:	2000166c 	.word	0x2000166c

080073a0 <malloc>:
 80073a0:	4b02      	ldr	r3, [pc, #8]	@ (80073ac <malloc+0xc>)
 80073a2:	4601      	mov	r1, r0
 80073a4:	6818      	ldr	r0, [r3, #0]
 80073a6:	f000 b825 	b.w	80073f4 <_malloc_r>
 80073aa:	bf00      	nop
 80073ac:	2000001c 	.word	0x2000001c

080073b0 <sbrk_aligned>:
 80073b0:	b570      	push	{r4, r5, r6, lr}
 80073b2:	4e0f      	ldr	r6, [pc, #60]	@ (80073f0 <sbrk_aligned+0x40>)
 80073b4:	460c      	mov	r4, r1
 80073b6:	6831      	ldr	r1, [r6, #0]
 80073b8:	4605      	mov	r5, r0
 80073ba:	b911      	cbnz	r1, 80073c2 <sbrk_aligned+0x12>
 80073bc:	f000 fe3a 	bl	8008034 <_sbrk_r>
 80073c0:	6030      	str	r0, [r6, #0]
 80073c2:	4621      	mov	r1, r4
 80073c4:	4628      	mov	r0, r5
 80073c6:	f000 fe35 	bl	8008034 <_sbrk_r>
 80073ca:	1c43      	adds	r3, r0, #1
 80073cc:	d103      	bne.n	80073d6 <sbrk_aligned+0x26>
 80073ce:	f04f 34ff 	mov.w	r4, #4294967295
 80073d2:	4620      	mov	r0, r4
 80073d4:	bd70      	pop	{r4, r5, r6, pc}
 80073d6:	1cc4      	adds	r4, r0, #3
 80073d8:	f024 0403 	bic.w	r4, r4, #3
 80073dc:	42a0      	cmp	r0, r4
 80073de:	d0f8      	beq.n	80073d2 <sbrk_aligned+0x22>
 80073e0:	1a21      	subs	r1, r4, r0
 80073e2:	4628      	mov	r0, r5
 80073e4:	f000 fe26 	bl	8008034 <_sbrk_r>
 80073e8:	3001      	adds	r0, #1
 80073ea:	d1f2      	bne.n	80073d2 <sbrk_aligned+0x22>
 80073ec:	e7ef      	b.n	80073ce <sbrk_aligned+0x1e>
 80073ee:	bf00      	nop
 80073f0:	20001668 	.word	0x20001668

080073f4 <_malloc_r>:
 80073f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073f8:	1ccd      	adds	r5, r1, #3
 80073fa:	f025 0503 	bic.w	r5, r5, #3
 80073fe:	3508      	adds	r5, #8
 8007400:	2d0c      	cmp	r5, #12
 8007402:	bf38      	it	cc
 8007404:	250c      	movcc	r5, #12
 8007406:	2d00      	cmp	r5, #0
 8007408:	4606      	mov	r6, r0
 800740a:	db01      	blt.n	8007410 <_malloc_r+0x1c>
 800740c:	42a9      	cmp	r1, r5
 800740e:	d904      	bls.n	800741a <_malloc_r+0x26>
 8007410:	230c      	movs	r3, #12
 8007412:	6033      	str	r3, [r6, #0]
 8007414:	2000      	movs	r0, #0
 8007416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800741a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074f0 <_malloc_r+0xfc>
 800741e:	f000 f869 	bl	80074f4 <__malloc_lock>
 8007422:	f8d8 3000 	ldr.w	r3, [r8]
 8007426:	461c      	mov	r4, r3
 8007428:	bb44      	cbnz	r4, 800747c <_malloc_r+0x88>
 800742a:	4629      	mov	r1, r5
 800742c:	4630      	mov	r0, r6
 800742e:	f7ff ffbf 	bl	80073b0 <sbrk_aligned>
 8007432:	1c43      	adds	r3, r0, #1
 8007434:	4604      	mov	r4, r0
 8007436:	d158      	bne.n	80074ea <_malloc_r+0xf6>
 8007438:	f8d8 4000 	ldr.w	r4, [r8]
 800743c:	4627      	mov	r7, r4
 800743e:	2f00      	cmp	r7, #0
 8007440:	d143      	bne.n	80074ca <_malloc_r+0xd6>
 8007442:	2c00      	cmp	r4, #0
 8007444:	d04b      	beq.n	80074de <_malloc_r+0xea>
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	4639      	mov	r1, r7
 800744a:	4630      	mov	r0, r6
 800744c:	eb04 0903 	add.w	r9, r4, r3
 8007450:	f000 fdf0 	bl	8008034 <_sbrk_r>
 8007454:	4581      	cmp	r9, r0
 8007456:	d142      	bne.n	80074de <_malloc_r+0xea>
 8007458:	6821      	ldr	r1, [r4, #0]
 800745a:	4630      	mov	r0, r6
 800745c:	1a6d      	subs	r5, r5, r1
 800745e:	4629      	mov	r1, r5
 8007460:	f7ff ffa6 	bl	80073b0 <sbrk_aligned>
 8007464:	3001      	adds	r0, #1
 8007466:	d03a      	beq.n	80074de <_malloc_r+0xea>
 8007468:	6823      	ldr	r3, [r4, #0]
 800746a:	442b      	add	r3, r5
 800746c:	6023      	str	r3, [r4, #0]
 800746e:	f8d8 3000 	ldr.w	r3, [r8]
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	bb62      	cbnz	r2, 80074d0 <_malloc_r+0xdc>
 8007476:	f8c8 7000 	str.w	r7, [r8]
 800747a:	e00f      	b.n	800749c <_malloc_r+0xa8>
 800747c:	6822      	ldr	r2, [r4, #0]
 800747e:	1b52      	subs	r2, r2, r5
 8007480:	d420      	bmi.n	80074c4 <_malloc_r+0xd0>
 8007482:	2a0b      	cmp	r2, #11
 8007484:	d917      	bls.n	80074b6 <_malloc_r+0xc2>
 8007486:	1961      	adds	r1, r4, r5
 8007488:	42a3      	cmp	r3, r4
 800748a:	6025      	str	r5, [r4, #0]
 800748c:	bf18      	it	ne
 800748e:	6059      	strne	r1, [r3, #4]
 8007490:	6863      	ldr	r3, [r4, #4]
 8007492:	bf08      	it	eq
 8007494:	f8c8 1000 	streq.w	r1, [r8]
 8007498:	5162      	str	r2, [r4, r5]
 800749a:	604b      	str	r3, [r1, #4]
 800749c:	4630      	mov	r0, r6
 800749e:	f000 f82f 	bl	8007500 <__malloc_unlock>
 80074a2:	f104 000b 	add.w	r0, r4, #11
 80074a6:	1d23      	adds	r3, r4, #4
 80074a8:	f020 0007 	bic.w	r0, r0, #7
 80074ac:	1ac2      	subs	r2, r0, r3
 80074ae:	bf1c      	itt	ne
 80074b0:	1a1b      	subne	r3, r3, r0
 80074b2:	50a3      	strne	r3, [r4, r2]
 80074b4:	e7af      	b.n	8007416 <_malloc_r+0x22>
 80074b6:	6862      	ldr	r2, [r4, #4]
 80074b8:	42a3      	cmp	r3, r4
 80074ba:	bf0c      	ite	eq
 80074bc:	f8c8 2000 	streq.w	r2, [r8]
 80074c0:	605a      	strne	r2, [r3, #4]
 80074c2:	e7eb      	b.n	800749c <_malloc_r+0xa8>
 80074c4:	4623      	mov	r3, r4
 80074c6:	6864      	ldr	r4, [r4, #4]
 80074c8:	e7ae      	b.n	8007428 <_malloc_r+0x34>
 80074ca:	463c      	mov	r4, r7
 80074cc:	687f      	ldr	r7, [r7, #4]
 80074ce:	e7b6      	b.n	800743e <_malloc_r+0x4a>
 80074d0:	461a      	mov	r2, r3
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	42a3      	cmp	r3, r4
 80074d6:	d1fb      	bne.n	80074d0 <_malloc_r+0xdc>
 80074d8:	2300      	movs	r3, #0
 80074da:	6053      	str	r3, [r2, #4]
 80074dc:	e7de      	b.n	800749c <_malloc_r+0xa8>
 80074de:	230c      	movs	r3, #12
 80074e0:	4630      	mov	r0, r6
 80074e2:	6033      	str	r3, [r6, #0]
 80074e4:	f000 f80c 	bl	8007500 <__malloc_unlock>
 80074e8:	e794      	b.n	8007414 <_malloc_r+0x20>
 80074ea:	6005      	str	r5, [r0, #0]
 80074ec:	e7d6      	b.n	800749c <_malloc_r+0xa8>
 80074ee:	bf00      	nop
 80074f0:	2000166c 	.word	0x2000166c

080074f4 <__malloc_lock>:
 80074f4:	4801      	ldr	r0, [pc, #4]	@ (80074fc <__malloc_lock+0x8>)
 80074f6:	f7ff b890 	b.w	800661a <__retarget_lock_acquire_recursive>
 80074fa:	bf00      	nop
 80074fc:	20001664 	.word	0x20001664

08007500 <__malloc_unlock>:
 8007500:	4801      	ldr	r0, [pc, #4]	@ (8007508 <__malloc_unlock+0x8>)
 8007502:	f7ff b88b 	b.w	800661c <__retarget_lock_release_recursive>
 8007506:	bf00      	nop
 8007508:	20001664 	.word	0x20001664

0800750c <_Balloc>:
 800750c:	b570      	push	{r4, r5, r6, lr}
 800750e:	69c6      	ldr	r6, [r0, #28]
 8007510:	4604      	mov	r4, r0
 8007512:	460d      	mov	r5, r1
 8007514:	b976      	cbnz	r6, 8007534 <_Balloc+0x28>
 8007516:	2010      	movs	r0, #16
 8007518:	f7ff ff42 	bl	80073a0 <malloc>
 800751c:	4602      	mov	r2, r0
 800751e:	61e0      	str	r0, [r4, #28]
 8007520:	b920      	cbnz	r0, 800752c <_Balloc+0x20>
 8007522:	216b      	movs	r1, #107	@ 0x6b
 8007524:	4b17      	ldr	r3, [pc, #92]	@ (8007584 <_Balloc+0x78>)
 8007526:	4818      	ldr	r0, [pc, #96]	@ (8007588 <_Balloc+0x7c>)
 8007528:	f000 fd94 	bl	8008054 <__assert_func>
 800752c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007530:	6006      	str	r6, [r0, #0]
 8007532:	60c6      	str	r6, [r0, #12]
 8007534:	69e6      	ldr	r6, [r4, #28]
 8007536:	68f3      	ldr	r3, [r6, #12]
 8007538:	b183      	cbz	r3, 800755c <_Balloc+0x50>
 800753a:	69e3      	ldr	r3, [r4, #28]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007542:	b9b8      	cbnz	r0, 8007574 <_Balloc+0x68>
 8007544:	2101      	movs	r1, #1
 8007546:	fa01 f605 	lsl.w	r6, r1, r5
 800754a:	1d72      	adds	r2, r6, #5
 800754c:	4620      	mov	r0, r4
 800754e:	0092      	lsls	r2, r2, #2
 8007550:	f000 fd9e 	bl	8008090 <_calloc_r>
 8007554:	b160      	cbz	r0, 8007570 <_Balloc+0x64>
 8007556:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800755a:	e00e      	b.n	800757a <_Balloc+0x6e>
 800755c:	2221      	movs	r2, #33	@ 0x21
 800755e:	2104      	movs	r1, #4
 8007560:	4620      	mov	r0, r4
 8007562:	f000 fd95 	bl	8008090 <_calloc_r>
 8007566:	69e3      	ldr	r3, [r4, #28]
 8007568:	60f0      	str	r0, [r6, #12]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e4      	bne.n	800753a <_Balloc+0x2e>
 8007570:	2000      	movs	r0, #0
 8007572:	bd70      	pop	{r4, r5, r6, pc}
 8007574:	6802      	ldr	r2, [r0, #0]
 8007576:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800757a:	2300      	movs	r3, #0
 800757c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007580:	e7f7      	b.n	8007572 <_Balloc+0x66>
 8007582:	bf00      	nop
 8007584:	080096a3 	.word	0x080096a3
 8007588:	08009723 	.word	0x08009723

0800758c <_Bfree>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	69c6      	ldr	r6, [r0, #28]
 8007590:	4605      	mov	r5, r0
 8007592:	460c      	mov	r4, r1
 8007594:	b976      	cbnz	r6, 80075b4 <_Bfree+0x28>
 8007596:	2010      	movs	r0, #16
 8007598:	f7ff ff02 	bl	80073a0 <malloc>
 800759c:	4602      	mov	r2, r0
 800759e:	61e8      	str	r0, [r5, #28]
 80075a0:	b920      	cbnz	r0, 80075ac <_Bfree+0x20>
 80075a2:	218f      	movs	r1, #143	@ 0x8f
 80075a4:	4b08      	ldr	r3, [pc, #32]	@ (80075c8 <_Bfree+0x3c>)
 80075a6:	4809      	ldr	r0, [pc, #36]	@ (80075cc <_Bfree+0x40>)
 80075a8:	f000 fd54 	bl	8008054 <__assert_func>
 80075ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075b0:	6006      	str	r6, [r0, #0]
 80075b2:	60c6      	str	r6, [r0, #12]
 80075b4:	b13c      	cbz	r4, 80075c6 <_Bfree+0x3a>
 80075b6:	69eb      	ldr	r3, [r5, #28]
 80075b8:	6862      	ldr	r2, [r4, #4]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075c0:	6021      	str	r1, [r4, #0]
 80075c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075c6:	bd70      	pop	{r4, r5, r6, pc}
 80075c8:	080096a3 	.word	0x080096a3
 80075cc:	08009723 	.word	0x08009723

080075d0 <__multadd>:
 80075d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d4:	4607      	mov	r7, r0
 80075d6:	460c      	mov	r4, r1
 80075d8:	461e      	mov	r6, r3
 80075da:	2000      	movs	r0, #0
 80075dc:	690d      	ldr	r5, [r1, #16]
 80075de:	f101 0c14 	add.w	ip, r1, #20
 80075e2:	f8dc 3000 	ldr.w	r3, [ip]
 80075e6:	3001      	adds	r0, #1
 80075e8:	b299      	uxth	r1, r3
 80075ea:	fb02 6101 	mla	r1, r2, r1, r6
 80075ee:	0c1e      	lsrs	r6, r3, #16
 80075f0:	0c0b      	lsrs	r3, r1, #16
 80075f2:	fb02 3306 	mla	r3, r2, r6, r3
 80075f6:	b289      	uxth	r1, r1
 80075f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80075fc:	4285      	cmp	r5, r0
 80075fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007602:	f84c 1b04 	str.w	r1, [ip], #4
 8007606:	dcec      	bgt.n	80075e2 <__multadd+0x12>
 8007608:	b30e      	cbz	r6, 800764e <__multadd+0x7e>
 800760a:	68a3      	ldr	r3, [r4, #8]
 800760c:	42ab      	cmp	r3, r5
 800760e:	dc19      	bgt.n	8007644 <__multadd+0x74>
 8007610:	6861      	ldr	r1, [r4, #4]
 8007612:	4638      	mov	r0, r7
 8007614:	3101      	adds	r1, #1
 8007616:	f7ff ff79 	bl	800750c <_Balloc>
 800761a:	4680      	mov	r8, r0
 800761c:	b928      	cbnz	r0, 800762a <__multadd+0x5a>
 800761e:	4602      	mov	r2, r0
 8007620:	21ba      	movs	r1, #186	@ 0xba
 8007622:	4b0c      	ldr	r3, [pc, #48]	@ (8007654 <__multadd+0x84>)
 8007624:	480c      	ldr	r0, [pc, #48]	@ (8007658 <__multadd+0x88>)
 8007626:	f000 fd15 	bl	8008054 <__assert_func>
 800762a:	6922      	ldr	r2, [r4, #16]
 800762c:	f104 010c 	add.w	r1, r4, #12
 8007630:	3202      	adds	r2, #2
 8007632:	0092      	lsls	r2, r2, #2
 8007634:	300c      	adds	r0, #12
 8007636:	f7ff f800 	bl	800663a <memcpy>
 800763a:	4621      	mov	r1, r4
 800763c:	4638      	mov	r0, r7
 800763e:	f7ff ffa5 	bl	800758c <_Bfree>
 8007642:	4644      	mov	r4, r8
 8007644:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007648:	3501      	adds	r5, #1
 800764a:	615e      	str	r6, [r3, #20]
 800764c:	6125      	str	r5, [r4, #16]
 800764e:	4620      	mov	r0, r4
 8007650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007654:	08009712 	.word	0x08009712
 8007658:	08009723 	.word	0x08009723

0800765c <__hi0bits>:
 800765c:	4603      	mov	r3, r0
 800765e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007662:	bf3a      	itte	cc
 8007664:	0403      	lslcc	r3, r0, #16
 8007666:	2010      	movcc	r0, #16
 8007668:	2000      	movcs	r0, #0
 800766a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800766e:	bf3c      	itt	cc
 8007670:	021b      	lslcc	r3, r3, #8
 8007672:	3008      	addcc	r0, #8
 8007674:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007678:	bf3c      	itt	cc
 800767a:	011b      	lslcc	r3, r3, #4
 800767c:	3004      	addcc	r0, #4
 800767e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007682:	bf3c      	itt	cc
 8007684:	009b      	lslcc	r3, r3, #2
 8007686:	3002      	addcc	r0, #2
 8007688:	2b00      	cmp	r3, #0
 800768a:	db05      	blt.n	8007698 <__hi0bits+0x3c>
 800768c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007690:	f100 0001 	add.w	r0, r0, #1
 8007694:	bf08      	it	eq
 8007696:	2020      	moveq	r0, #32
 8007698:	4770      	bx	lr

0800769a <__lo0bits>:
 800769a:	6803      	ldr	r3, [r0, #0]
 800769c:	4602      	mov	r2, r0
 800769e:	f013 0007 	ands.w	r0, r3, #7
 80076a2:	d00b      	beq.n	80076bc <__lo0bits+0x22>
 80076a4:	07d9      	lsls	r1, r3, #31
 80076a6:	d421      	bmi.n	80076ec <__lo0bits+0x52>
 80076a8:	0798      	lsls	r0, r3, #30
 80076aa:	bf49      	itett	mi
 80076ac:	085b      	lsrmi	r3, r3, #1
 80076ae:	089b      	lsrpl	r3, r3, #2
 80076b0:	2001      	movmi	r0, #1
 80076b2:	6013      	strmi	r3, [r2, #0]
 80076b4:	bf5c      	itt	pl
 80076b6:	2002      	movpl	r0, #2
 80076b8:	6013      	strpl	r3, [r2, #0]
 80076ba:	4770      	bx	lr
 80076bc:	b299      	uxth	r1, r3
 80076be:	b909      	cbnz	r1, 80076c4 <__lo0bits+0x2a>
 80076c0:	2010      	movs	r0, #16
 80076c2:	0c1b      	lsrs	r3, r3, #16
 80076c4:	b2d9      	uxtb	r1, r3
 80076c6:	b909      	cbnz	r1, 80076cc <__lo0bits+0x32>
 80076c8:	3008      	adds	r0, #8
 80076ca:	0a1b      	lsrs	r3, r3, #8
 80076cc:	0719      	lsls	r1, r3, #28
 80076ce:	bf04      	itt	eq
 80076d0:	091b      	lsreq	r3, r3, #4
 80076d2:	3004      	addeq	r0, #4
 80076d4:	0799      	lsls	r1, r3, #30
 80076d6:	bf04      	itt	eq
 80076d8:	089b      	lsreq	r3, r3, #2
 80076da:	3002      	addeq	r0, #2
 80076dc:	07d9      	lsls	r1, r3, #31
 80076de:	d403      	bmi.n	80076e8 <__lo0bits+0x4e>
 80076e0:	085b      	lsrs	r3, r3, #1
 80076e2:	f100 0001 	add.w	r0, r0, #1
 80076e6:	d003      	beq.n	80076f0 <__lo0bits+0x56>
 80076e8:	6013      	str	r3, [r2, #0]
 80076ea:	4770      	bx	lr
 80076ec:	2000      	movs	r0, #0
 80076ee:	4770      	bx	lr
 80076f0:	2020      	movs	r0, #32
 80076f2:	4770      	bx	lr

080076f4 <__i2b>:
 80076f4:	b510      	push	{r4, lr}
 80076f6:	460c      	mov	r4, r1
 80076f8:	2101      	movs	r1, #1
 80076fa:	f7ff ff07 	bl	800750c <_Balloc>
 80076fe:	4602      	mov	r2, r0
 8007700:	b928      	cbnz	r0, 800770e <__i2b+0x1a>
 8007702:	f240 1145 	movw	r1, #325	@ 0x145
 8007706:	4b04      	ldr	r3, [pc, #16]	@ (8007718 <__i2b+0x24>)
 8007708:	4804      	ldr	r0, [pc, #16]	@ (800771c <__i2b+0x28>)
 800770a:	f000 fca3 	bl	8008054 <__assert_func>
 800770e:	2301      	movs	r3, #1
 8007710:	6144      	str	r4, [r0, #20]
 8007712:	6103      	str	r3, [r0, #16]
 8007714:	bd10      	pop	{r4, pc}
 8007716:	bf00      	nop
 8007718:	08009712 	.word	0x08009712
 800771c:	08009723 	.word	0x08009723

08007720 <__multiply>:
 8007720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007724:	4617      	mov	r7, r2
 8007726:	690a      	ldr	r2, [r1, #16]
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	4689      	mov	r9, r1
 800772c:	429a      	cmp	r2, r3
 800772e:	bfa2      	ittt	ge
 8007730:	463b      	movge	r3, r7
 8007732:	460f      	movge	r7, r1
 8007734:	4699      	movge	r9, r3
 8007736:	693d      	ldr	r5, [r7, #16]
 8007738:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	6879      	ldr	r1, [r7, #4]
 8007740:	eb05 060a 	add.w	r6, r5, sl
 8007744:	42b3      	cmp	r3, r6
 8007746:	b085      	sub	sp, #20
 8007748:	bfb8      	it	lt
 800774a:	3101      	addlt	r1, #1
 800774c:	f7ff fede 	bl	800750c <_Balloc>
 8007750:	b930      	cbnz	r0, 8007760 <__multiply+0x40>
 8007752:	4602      	mov	r2, r0
 8007754:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007758:	4b40      	ldr	r3, [pc, #256]	@ (800785c <__multiply+0x13c>)
 800775a:	4841      	ldr	r0, [pc, #260]	@ (8007860 <__multiply+0x140>)
 800775c:	f000 fc7a 	bl	8008054 <__assert_func>
 8007760:	f100 0414 	add.w	r4, r0, #20
 8007764:	4623      	mov	r3, r4
 8007766:	2200      	movs	r2, #0
 8007768:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800776c:	4573      	cmp	r3, lr
 800776e:	d320      	bcc.n	80077b2 <__multiply+0x92>
 8007770:	f107 0814 	add.w	r8, r7, #20
 8007774:	f109 0114 	add.w	r1, r9, #20
 8007778:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800777c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007780:	9302      	str	r3, [sp, #8]
 8007782:	1beb      	subs	r3, r5, r7
 8007784:	3b15      	subs	r3, #21
 8007786:	f023 0303 	bic.w	r3, r3, #3
 800778a:	3304      	adds	r3, #4
 800778c:	3715      	adds	r7, #21
 800778e:	42bd      	cmp	r5, r7
 8007790:	bf38      	it	cc
 8007792:	2304      	movcc	r3, #4
 8007794:	9301      	str	r3, [sp, #4]
 8007796:	9b02      	ldr	r3, [sp, #8]
 8007798:	9103      	str	r1, [sp, #12]
 800779a:	428b      	cmp	r3, r1
 800779c:	d80c      	bhi.n	80077b8 <__multiply+0x98>
 800779e:	2e00      	cmp	r6, #0
 80077a0:	dd03      	ble.n	80077aa <__multiply+0x8a>
 80077a2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d055      	beq.n	8007856 <__multiply+0x136>
 80077aa:	6106      	str	r6, [r0, #16]
 80077ac:	b005      	add	sp, #20
 80077ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b2:	f843 2b04 	str.w	r2, [r3], #4
 80077b6:	e7d9      	b.n	800776c <__multiply+0x4c>
 80077b8:	f8b1 a000 	ldrh.w	sl, [r1]
 80077bc:	f1ba 0f00 	cmp.w	sl, #0
 80077c0:	d01f      	beq.n	8007802 <__multiply+0xe2>
 80077c2:	46c4      	mov	ip, r8
 80077c4:	46a1      	mov	r9, r4
 80077c6:	2700      	movs	r7, #0
 80077c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80077cc:	f8d9 3000 	ldr.w	r3, [r9]
 80077d0:	fa1f fb82 	uxth.w	fp, r2
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	fb0a 330b 	mla	r3, sl, fp, r3
 80077da:	443b      	add	r3, r7
 80077dc:	f8d9 7000 	ldr.w	r7, [r9]
 80077e0:	0c12      	lsrs	r2, r2, #16
 80077e2:	0c3f      	lsrs	r7, r7, #16
 80077e4:	fb0a 7202 	mla	r2, sl, r2, r7
 80077e8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077f2:	4565      	cmp	r5, ip
 80077f4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80077f8:	f849 3b04 	str.w	r3, [r9], #4
 80077fc:	d8e4      	bhi.n	80077c8 <__multiply+0xa8>
 80077fe:	9b01      	ldr	r3, [sp, #4]
 8007800:	50e7      	str	r7, [r4, r3]
 8007802:	9b03      	ldr	r3, [sp, #12]
 8007804:	3104      	adds	r1, #4
 8007806:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800780a:	f1b9 0f00 	cmp.w	r9, #0
 800780e:	d020      	beq.n	8007852 <__multiply+0x132>
 8007810:	4647      	mov	r7, r8
 8007812:	46a4      	mov	ip, r4
 8007814:	f04f 0a00 	mov.w	sl, #0
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	f8b7 b000 	ldrh.w	fp, [r7]
 800781e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007822:	b29b      	uxth	r3, r3
 8007824:	fb09 220b 	mla	r2, r9, fp, r2
 8007828:	4452      	add	r2, sl
 800782a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800782e:	f84c 3b04 	str.w	r3, [ip], #4
 8007832:	f857 3b04 	ldr.w	r3, [r7], #4
 8007836:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800783a:	f8bc 3000 	ldrh.w	r3, [ip]
 800783e:	42bd      	cmp	r5, r7
 8007840:	fb09 330a 	mla	r3, r9, sl, r3
 8007844:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007848:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800784c:	d8e5      	bhi.n	800781a <__multiply+0xfa>
 800784e:	9a01      	ldr	r2, [sp, #4]
 8007850:	50a3      	str	r3, [r4, r2]
 8007852:	3404      	adds	r4, #4
 8007854:	e79f      	b.n	8007796 <__multiply+0x76>
 8007856:	3e01      	subs	r6, #1
 8007858:	e7a1      	b.n	800779e <__multiply+0x7e>
 800785a:	bf00      	nop
 800785c:	08009712 	.word	0x08009712
 8007860:	08009723 	.word	0x08009723

08007864 <__pow5mult>:
 8007864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007868:	4615      	mov	r5, r2
 800786a:	f012 0203 	ands.w	r2, r2, #3
 800786e:	4607      	mov	r7, r0
 8007870:	460e      	mov	r6, r1
 8007872:	d007      	beq.n	8007884 <__pow5mult+0x20>
 8007874:	4c25      	ldr	r4, [pc, #148]	@ (800790c <__pow5mult+0xa8>)
 8007876:	3a01      	subs	r2, #1
 8007878:	2300      	movs	r3, #0
 800787a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800787e:	f7ff fea7 	bl	80075d0 <__multadd>
 8007882:	4606      	mov	r6, r0
 8007884:	10ad      	asrs	r5, r5, #2
 8007886:	d03d      	beq.n	8007904 <__pow5mult+0xa0>
 8007888:	69fc      	ldr	r4, [r7, #28]
 800788a:	b97c      	cbnz	r4, 80078ac <__pow5mult+0x48>
 800788c:	2010      	movs	r0, #16
 800788e:	f7ff fd87 	bl	80073a0 <malloc>
 8007892:	4602      	mov	r2, r0
 8007894:	61f8      	str	r0, [r7, #28]
 8007896:	b928      	cbnz	r0, 80078a4 <__pow5mult+0x40>
 8007898:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800789c:	4b1c      	ldr	r3, [pc, #112]	@ (8007910 <__pow5mult+0xac>)
 800789e:	481d      	ldr	r0, [pc, #116]	@ (8007914 <__pow5mult+0xb0>)
 80078a0:	f000 fbd8 	bl	8008054 <__assert_func>
 80078a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078a8:	6004      	str	r4, [r0, #0]
 80078aa:	60c4      	str	r4, [r0, #12]
 80078ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80078b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078b4:	b94c      	cbnz	r4, 80078ca <__pow5mult+0x66>
 80078b6:	f240 2171 	movw	r1, #625	@ 0x271
 80078ba:	4638      	mov	r0, r7
 80078bc:	f7ff ff1a 	bl	80076f4 <__i2b>
 80078c0:	2300      	movs	r3, #0
 80078c2:	4604      	mov	r4, r0
 80078c4:	f8c8 0008 	str.w	r0, [r8, #8]
 80078c8:	6003      	str	r3, [r0, #0]
 80078ca:	f04f 0900 	mov.w	r9, #0
 80078ce:	07eb      	lsls	r3, r5, #31
 80078d0:	d50a      	bpl.n	80078e8 <__pow5mult+0x84>
 80078d2:	4631      	mov	r1, r6
 80078d4:	4622      	mov	r2, r4
 80078d6:	4638      	mov	r0, r7
 80078d8:	f7ff ff22 	bl	8007720 <__multiply>
 80078dc:	4680      	mov	r8, r0
 80078de:	4631      	mov	r1, r6
 80078e0:	4638      	mov	r0, r7
 80078e2:	f7ff fe53 	bl	800758c <_Bfree>
 80078e6:	4646      	mov	r6, r8
 80078e8:	106d      	asrs	r5, r5, #1
 80078ea:	d00b      	beq.n	8007904 <__pow5mult+0xa0>
 80078ec:	6820      	ldr	r0, [r4, #0]
 80078ee:	b938      	cbnz	r0, 8007900 <__pow5mult+0x9c>
 80078f0:	4622      	mov	r2, r4
 80078f2:	4621      	mov	r1, r4
 80078f4:	4638      	mov	r0, r7
 80078f6:	f7ff ff13 	bl	8007720 <__multiply>
 80078fa:	6020      	str	r0, [r4, #0]
 80078fc:	f8c0 9000 	str.w	r9, [r0]
 8007900:	4604      	mov	r4, r0
 8007902:	e7e4      	b.n	80078ce <__pow5mult+0x6a>
 8007904:	4630      	mov	r0, r6
 8007906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800790a:	bf00      	nop
 800790c:	080097d4 	.word	0x080097d4
 8007910:	080096a3 	.word	0x080096a3
 8007914:	08009723 	.word	0x08009723

08007918 <__lshift>:
 8007918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800791c:	460c      	mov	r4, r1
 800791e:	4607      	mov	r7, r0
 8007920:	4691      	mov	r9, r2
 8007922:	6923      	ldr	r3, [r4, #16]
 8007924:	6849      	ldr	r1, [r1, #4]
 8007926:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800792a:	68a3      	ldr	r3, [r4, #8]
 800792c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007930:	f108 0601 	add.w	r6, r8, #1
 8007934:	42b3      	cmp	r3, r6
 8007936:	db0b      	blt.n	8007950 <__lshift+0x38>
 8007938:	4638      	mov	r0, r7
 800793a:	f7ff fde7 	bl	800750c <_Balloc>
 800793e:	4605      	mov	r5, r0
 8007940:	b948      	cbnz	r0, 8007956 <__lshift+0x3e>
 8007942:	4602      	mov	r2, r0
 8007944:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007948:	4b27      	ldr	r3, [pc, #156]	@ (80079e8 <__lshift+0xd0>)
 800794a:	4828      	ldr	r0, [pc, #160]	@ (80079ec <__lshift+0xd4>)
 800794c:	f000 fb82 	bl	8008054 <__assert_func>
 8007950:	3101      	adds	r1, #1
 8007952:	005b      	lsls	r3, r3, #1
 8007954:	e7ee      	b.n	8007934 <__lshift+0x1c>
 8007956:	2300      	movs	r3, #0
 8007958:	f100 0114 	add.w	r1, r0, #20
 800795c:	f100 0210 	add.w	r2, r0, #16
 8007960:	4618      	mov	r0, r3
 8007962:	4553      	cmp	r3, sl
 8007964:	db33      	blt.n	80079ce <__lshift+0xb6>
 8007966:	6920      	ldr	r0, [r4, #16]
 8007968:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800796c:	f104 0314 	add.w	r3, r4, #20
 8007970:	f019 091f 	ands.w	r9, r9, #31
 8007974:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007978:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800797c:	d02b      	beq.n	80079d6 <__lshift+0xbe>
 800797e:	468a      	mov	sl, r1
 8007980:	2200      	movs	r2, #0
 8007982:	f1c9 0e20 	rsb	lr, r9, #32
 8007986:	6818      	ldr	r0, [r3, #0]
 8007988:	fa00 f009 	lsl.w	r0, r0, r9
 800798c:	4310      	orrs	r0, r2
 800798e:	f84a 0b04 	str.w	r0, [sl], #4
 8007992:	f853 2b04 	ldr.w	r2, [r3], #4
 8007996:	459c      	cmp	ip, r3
 8007998:	fa22 f20e 	lsr.w	r2, r2, lr
 800799c:	d8f3      	bhi.n	8007986 <__lshift+0x6e>
 800799e:	ebac 0304 	sub.w	r3, ip, r4
 80079a2:	3b15      	subs	r3, #21
 80079a4:	f023 0303 	bic.w	r3, r3, #3
 80079a8:	3304      	adds	r3, #4
 80079aa:	f104 0015 	add.w	r0, r4, #21
 80079ae:	4560      	cmp	r0, ip
 80079b0:	bf88      	it	hi
 80079b2:	2304      	movhi	r3, #4
 80079b4:	50ca      	str	r2, [r1, r3]
 80079b6:	b10a      	cbz	r2, 80079bc <__lshift+0xa4>
 80079b8:	f108 0602 	add.w	r6, r8, #2
 80079bc:	3e01      	subs	r6, #1
 80079be:	4638      	mov	r0, r7
 80079c0:	4621      	mov	r1, r4
 80079c2:	612e      	str	r6, [r5, #16]
 80079c4:	f7ff fde2 	bl	800758c <_Bfree>
 80079c8:	4628      	mov	r0, r5
 80079ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80079d2:	3301      	adds	r3, #1
 80079d4:	e7c5      	b.n	8007962 <__lshift+0x4a>
 80079d6:	3904      	subs	r1, #4
 80079d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80079dc:	459c      	cmp	ip, r3
 80079de:	f841 2f04 	str.w	r2, [r1, #4]!
 80079e2:	d8f9      	bhi.n	80079d8 <__lshift+0xc0>
 80079e4:	e7ea      	b.n	80079bc <__lshift+0xa4>
 80079e6:	bf00      	nop
 80079e8:	08009712 	.word	0x08009712
 80079ec:	08009723 	.word	0x08009723

080079f0 <__mcmp>:
 80079f0:	4603      	mov	r3, r0
 80079f2:	690a      	ldr	r2, [r1, #16]
 80079f4:	6900      	ldr	r0, [r0, #16]
 80079f6:	b530      	push	{r4, r5, lr}
 80079f8:	1a80      	subs	r0, r0, r2
 80079fa:	d10e      	bne.n	8007a1a <__mcmp+0x2a>
 80079fc:	3314      	adds	r3, #20
 80079fe:	3114      	adds	r1, #20
 8007a00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007a04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007a08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a10:	4295      	cmp	r5, r2
 8007a12:	d003      	beq.n	8007a1c <__mcmp+0x2c>
 8007a14:	d205      	bcs.n	8007a22 <__mcmp+0x32>
 8007a16:	f04f 30ff 	mov.w	r0, #4294967295
 8007a1a:	bd30      	pop	{r4, r5, pc}
 8007a1c:	42a3      	cmp	r3, r4
 8007a1e:	d3f3      	bcc.n	8007a08 <__mcmp+0x18>
 8007a20:	e7fb      	b.n	8007a1a <__mcmp+0x2a>
 8007a22:	2001      	movs	r0, #1
 8007a24:	e7f9      	b.n	8007a1a <__mcmp+0x2a>
	...

08007a28 <__mdiff>:
 8007a28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a2c:	4689      	mov	r9, r1
 8007a2e:	4606      	mov	r6, r0
 8007a30:	4611      	mov	r1, r2
 8007a32:	4648      	mov	r0, r9
 8007a34:	4614      	mov	r4, r2
 8007a36:	f7ff ffdb 	bl	80079f0 <__mcmp>
 8007a3a:	1e05      	subs	r5, r0, #0
 8007a3c:	d112      	bne.n	8007a64 <__mdiff+0x3c>
 8007a3e:	4629      	mov	r1, r5
 8007a40:	4630      	mov	r0, r6
 8007a42:	f7ff fd63 	bl	800750c <_Balloc>
 8007a46:	4602      	mov	r2, r0
 8007a48:	b928      	cbnz	r0, 8007a56 <__mdiff+0x2e>
 8007a4a:	f240 2137 	movw	r1, #567	@ 0x237
 8007a4e:	4b3e      	ldr	r3, [pc, #248]	@ (8007b48 <__mdiff+0x120>)
 8007a50:	483e      	ldr	r0, [pc, #248]	@ (8007b4c <__mdiff+0x124>)
 8007a52:	f000 faff 	bl	8008054 <__assert_func>
 8007a56:	2301      	movs	r3, #1
 8007a58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	b003      	add	sp, #12
 8007a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a64:	bfbc      	itt	lt
 8007a66:	464b      	movlt	r3, r9
 8007a68:	46a1      	movlt	r9, r4
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007a70:	bfba      	itte	lt
 8007a72:	461c      	movlt	r4, r3
 8007a74:	2501      	movlt	r5, #1
 8007a76:	2500      	movge	r5, #0
 8007a78:	f7ff fd48 	bl	800750c <_Balloc>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	b918      	cbnz	r0, 8007a88 <__mdiff+0x60>
 8007a80:	f240 2145 	movw	r1, #581	@ 0x245
 8007a84:	4b30      	ldr	r3, [pc, #192]	@ (8007b48 <__mdiff+0x120>)
 8007a86:	e7e3      	b.n	8007a50 <__mdiff+0x28>
 8007a88:	f100 0b14 	add.w	fp, r0, #20
 8007a8c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007a90:	f109 0310 	add.w	r3, r9, #16
 8007a94:	60c5      	str	r5, [r0, #12]
 8007a96:	f04f 0c00 	mov.w	ip, #0
 8007a9a:	f109 0514 	add.w	r5, r9, #20
 8007a9e:	46d9      	mov	r9, fp
 8007aa0:	6926      	ldr	r6, [r4, #16]
 8007aa2:	f104 0e14 	add.w	lr, r4, #20
 8007aa6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007aaa:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007aae:	9301      	str	r3, [sp, #4]
 8007ab0:	9b01      	ldr	r3, [sp, #4]
 8007ab2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007ab6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007aba:	b281      	uxth	r1, r0
 8007abc:	9301      	str	r3, [sp, #4]
 8007abe:	fa1f f38a 	uxth.w	r3, sl
 8007ac2:	1a5b      	subs	r3, r3, r1
 8007ac4:	0c00      	lsrs	r0, r0, #16
 8007ac6:	4463      	add	r3, ip
 8007ac8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007acc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007ad6:	4576      	cmp	r6, lr
 8007ad8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007adc:	f849 3b04 	str.w	r3, [r9], #4
 8007ae0:	d8e6      	bhi.n	8007ab0 <__mdiff+0x88>
 8007ae2:	1b33      	subs	r3, r6, r4
 8007ae4:	3b15      	subs	r3, #21
 8007ae6:	f023 0303 	bic.w	r3, r3, #3
 8007aea:	3415      	adds	r4, #21
 8007aec:	3304      	adds	r3, #4
 8007aee:	42a6      	cmp	r6, r4
 8007af0:	bf38      	it	cc
 8007af2:	2304      	movcc	r3, #4
 8007af4:	441d      	add	r5, r3
 8007af6:	445b      	add	r3, fp
 8007af8:	461e      	mov	r6, r3
 8007afa:	462c      	mov	r4, r5
 8007afc:	4544      	cmp	r4, r8
 8007afe:	d30e      	bcc.n	8007b1e <__mdiff+0xf6>
 8007b00:	f108 0103 	add.w	r1, r8, #3
 8007b04:	1b49      	subs	r1, r1, r5
 8007b06:	f021 0103 	bic.w	r1, r1, #3
 8007b0a:	3d03      	subs	r5, #3
 8007b0c:	45a8      	cmp	r8, r5
 8007b0e:	bf38      	it	cc
 8007b10:	2100      	movcc	r1, #0
 8007b12:	440b      	add	r3, r1
 8007b14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b18:	b199      	cbz	r1, 8007b42 <__mdiff+0x11a>
 8007b1a:	6117      	str	r7, [r2, #16]
 8007b1c:	e79e      	b.n	8007a5c <__mdiff+0x34>
 8007b1e:	46e6      	mov	lr, ip
 8007b20:	f854 1b04 	ldr.w	r1, [r4], #4
 8007b24:	fa1f fc81 	uxth.w	ip, r1
 8007b28:	44f4      	add	ip, lr
 8007b2a:	0c08      	lsrs	r0, r1, #16
 8007b2c:	4471      	add	r1, lr
 8007b2e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007b32:	b289      	uxth	r1, r1
 8007b34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007b38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b3c:	f846 1b04 	str.w	r1, [r6], #4
 8007b40:	e7dc      	b.n	8007afc <__mdiff+0xd4>
 8007b42:	3f01      	subs	r7, #1
 8007b44:	e7e6      	b.n	8007b14 <__mdiff+0xec>
 8007b46:	bf00      	nop
 8007b48:	08009712 	.word	0x08009712
 8007b4c:	08009723 	.word	0x08009723

08007b50 <__d2b>:
 8007b50:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007b54:	2101      	movs	r1, #1
 8007b56:	4690      	mov	r8, r2
 8007b58:	4699      	mov	r9, r3
 8007b5a:	9e08      	ldr	r6, [sp, #32]
 8007b5c:	f7ff fcd6 	bl	800750c <_Balloc>
 8007b60:	4604      	mov	r4, r0
 8007b62:	b930      	cbnz	r0, 8007b72 <__d2b+0x22>
 8007b64:	4602      	mov	r2, r0
 8007b66:	f240 310f 	movw	r1, #783	@ 0x30f
 8007b6a:	4b23      	ldr	r3, [pc, #140]	@ (8007bf8 <__d2b+0xa8>)
 8007b6c:	4823      	ldr	r0, [pc, #140]	@ (8007bfc <__d2b+0xac>)
 8007b6e:	f000 fa71 	bl	8008054 <__assert_func>
 8007b72:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007b76:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b7a:	b10d      	cbz	r5, 8007b80 <__d2b+0x30>
 8007b7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b80:	9301      	str	r3, [sp, #4]
 8007b82:	f1b8 0300 	subs.w	r3, r8, #0
 8007b86:	d024      	beq.n	8007bd2 <__d2b+0x82>
 8007b88:	4668      	mov	r0, sp
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	f7ff fd85 	bl	800769a <__lo0bits>
 8007b90:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b94:	b1d8      	cbz	r0, 8007bce <__d2b+0x7e>
 8007b96:	f1c0 0320 	rsb	r3, r0, #32
 8007b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b9e:	430b      	orrs	r3, r1
 8007ba0:	40c2      	lsrs	r2, r0
 8007ba2:	6163      	str	r3, [r4, #20]
 8007ba4:	9201      	str	r2, [sp, #4]
 8007ba6:	9b01      	ldr	r3, [sp, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	bf0c      	ite	eq
 8007bac:	2201      	moveq	r2, #1
 8007bae:	2202      	movne	r2, #2
 8007bb0:	61a3      	str	r3, [r4, #24]
 8007bb2:	6122      	str	r2, [r4, #16]
 8007bb4:	b1ad      	cbz	r5, 8007be2 <__d2b+0x92>
 8007bb6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007bba:	4405      	add	r5, r0
 8007bbc:	6035      	str	r5, [r6, #0]
 8007bbe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bc4:	6018      	str	r0, [r3, #0]
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	b002      	add	sp, #8
 8007bca:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007bce:	6161      	str	r1, [r4, #20]
 8007bd0:	e7e9      	b.n	8007ba6 <__d2b+0x56>
 8007bd2:	a801      	add	r0, sp, #4
 8007bd4:	f7ff fd61 	bl	800769a <__lo0bits>
 8007bd8:	9b01      	ldr	r3, [sp, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	6163      	str	r3, [r4, #20]
 8007bde:	3020      	adds	r0, #32
 8007be0:	e7e7      	b.n	8007bb2 <__d2b+0x62>
 8007be2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007be6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007bea:	6030      	str	r0, [r6, #0]
 8007bec:	6918      	ldr	r0, [r3, #16]
 8007bee:	f7ff fd35 	bl	800765c <__hi0bits>
 8007bf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007bf6:	e7e4      	b.n	8007bc2 <__d2b+0x72>
 8007bf8:	08009712 	.word	0x08009712
 8007bfc:	08009723 	.word	0x08009723

08007c00 <__ssputs_r>:
 8007c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c04:	461f      	mov	r7, r3
 8007c06:	688e      	ldr	r6, [r1, #8]
 8007c08:	4682      	mov	sl, r0
 8007c0a:	42be      	cmp	r6, r7
 8007c0c:	460c      	mov	r4, r1
 8007c0e:	4690      	mov	r8, r2
 8007c10:	680b      	ldr	r3, [r1, #0]
 8007c12:	d82d      	bhi.n	8007c70 <__ssputs_r+0x70>
 8007c14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007c1c:	d026      	beq.n	8007c6c <__ssputs_r+0x6c>
 8007c1e:	6965      	ldr	r5, [r4, #20]
 8007c20:	6909      	ldr	r1, [r1, #16]
 8007c22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c26:	eba3 0901 	sub.w	r9, r3, r1
 8007c2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c2e:	1c7b      	adds	r3, r7, #1
 8007c30:	444b      	add	r3, r9
 8007c32:	106d      	asrs	r5, r5, #1
 8007c34:	429d      	cmp	r5, r3
 8007c36:	bf38      	it	cc
 8007c38:	461d      	movcc	r5, r3
 8007c3a:	0553      	lsls	r3, r2, #21
 8007c3c:	d527      	bpl.n	8007c8e <__ssputs_r+0x8e>
 8007c3e:	4629      	mov	r1, r5
 8007c40:	f7ff fbd8 	bl	80073f4 <_malloc_r>
 8007c44:	4606      	mov	r6, r0
 8007c46:	b360      	cbz	r0, 8007ca2 <__ssputs_r+0xa2>
 8007c48:	464a      	mov	r2, r9
 8007c4a:	6921      	ldr	r1, [r4, #16]
 8007c4c:	f7fe fcf5 	bl	800663a <memcpy>
 8007c50:	89a3      	ldrh	r3, [r4, #12]
 8007c52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c5a:	81a3      	strh	r3, [r4, #12]
 8007c5c:	6126      	str	r6, [r4, #16]
 8007c5e:	444e      	add	r6, r9
 8007c60:	6026      	str	r6, [r4, #0]
 8007c62:	463e      	mov	r6, r7
 8007c64:	6165      	str	r5, [r4, #20]
 8007c66:	eba5 0509 	sub.w	r5, r5, r9
 8007c6a:	60a5      	str	r5, [r4, #8]
 8007c6c:	42be      	cmp	r6, r7
 8007c6e:	d900      	bls.n	8007c72 <__ssputs_r+0x72>
 8007c70:	463e      	mov	r6, r7
 8007c72:	4632      	mov	r2, r6
 8007c74:	4641      	mov	r1, r8
 8007c76:	6820      	ldr	r0, [r4, #0]
 8007c78:	f000 f9c2 	bl	8008000 <memmove>
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	68a3      	ldr	r3, [r4, #8]
 8007c80:	1b9b      	subs	r3, r3, r6
 8007c82:	60a3      	str	r3, [r4, #8]
 8007c84:	6823      	ldr	r3, [r4, #0]
 8007c86:	4433      	add	r3, r6
 8007c88:	6023      	str	r3, [r4, #0]
 8007c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c8e:	462a      	mov	r2, r5
 8007c90:	f000 fa24 	bl	80080dc <_realloc_r>
 8007c94:	4606      	mov	r6, r0
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d1e0      	bne.n	8007c5c <__ssputs_r+0x5c>
 8007c9a:	4650      	mov	r0, sl
 8007c9c:	6921      	ldr	r1, [r4, #16]
 8007c9e:	f7ff fb37 	bl	8007310 <_free_r>
 8007ca2:	230c      	movs	r3, #12
 8007ca4:	f8ca 3000 	str.w	r3, [sl]
 8007ca8:	89a3      	ldrh	r3, [r4, #12]
 8007caa:	f04f 30ff 	mov.w	r0, #4294967295
 8007cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cb2:	81a3      	strh	r3, [r4, #12]
 8007cb4:	e7e9      	b.n	8007c8a <__ssputs_r+0x8a>
	...

08007cb8 <_svfiprintf_r>:
 8007cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cbc:	4698      	mov	r8, r3
 8007cbe:	898b      	ldrh	r3, [r1, #12]
 8007cc0:	4607      	mov	r7, r0
 8007cc2:	061b      	lsls	r3, r3, #24
 8007cc4:	460d      	mov	r5, r1
 8007cc6:	4614      	mov	r4, r2
 8007cc8:	b09d      	sub	sp, #116	@ 0x74
 8007cca:	d510      	bpl.n	8007cee <_svfiprintf_r+0x36>
 8007ccc:	690b      	ldr	r3, [r1, #16]
 8007cce:	b973      	cbnz	r3, 8007cee <_svfiprintf_r+0x36>
 8007cd0:	2140      	movs	r1, #64	@ 0x40
 8007cd2:	f7ff fb8f 	bl	80073f4 <_malloc_r>
 8007cd6:	6028      	str	r0, [r5, #0]
 8007cd8:	6128      	str	r0, [r5, #16]
 8007cda:	b930      	cbnz	r0, 8007cea <_svfiprintf_r+0x32>
 8007cdc:	230c      	movs	r3, #12
 8007cde:	603b      	str	r3, [r7, #0]
 8007ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce4:	b01d      	add	sp, #116	@ 0x74
 8007ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cea:	2340      	movs	r3, #64	@ 0x40
 8007cec:	616b      	str	r3, [r5, #20]
 8007cee:	2300      	movs	r3, #0
 8007cf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cf2:	2320      	movs	r3, #32
 8007cf4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007cf8:	2330      	movs	r3, #48	@ 0x30
 8007cfa:	f04f 0901 	mov.w	r9, #1
 8007cfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d02:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007e9c <_svfiprintf_r+0x1e4>
 8007d06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d0a:	4623      	mov	r3, r4
 8007d0c:	469a      	mov	sl, r3
 8007d0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d12:	b10a      	cbz	r2, 8007d18 <_svfiprintf_r+0x60>
 8007d14:	2a25      	cmp	r2, #37	@ 0x25
 8007d16:	d1f9      	bne.n	8007d0c <_svfiprintf_r+0x54>
 8007d18:	ebba 0b04 	subs.w	fp, sl, r4
 8007d1c:	d00b      	beq.n	8007d36 <_svfiprintf_r+0x7e>
 8007d1e:	465b      	mov	r3, fp
 8007d20:	4622      	mov	r2, r4
 8007d22:	4629      	mov	r1, r5
 8007d24:	4638      	mov	r0, r7
 8007d26:	f7ff ff6b 	bl	8007c00 <__ssputs_r>
 8007d2a:	3001      	adds	r0, #1
 8007d2c:	f000 80a7 	beq.w	8007e7e <_svfiprintf_r+0x1c6>
 8007d30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d32:	445a      	add	r2, fp
 8007d34:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d36:	f89a 3000 	ldrb.w	r3, [sl]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f000 809f 	beq.w	8007e7e <_svfiprintf_r+0x1c6>
 8007d40:	2300      	movs	r3, #0
 8007d42:	f04f 32ff 	mov.w	r2, #4294967295
 8007d46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d4a:	f10a 0a01 	add.w	sl, sl, #1
 8007d4e:	9304      	str	r3, [sp, #16]
 8007d50:	9307      	str	r3, [sp, #28]
 8007d52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d56:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d58:	4654      	mov	r4, sl
 8007d5a:	2205      	movs	r2, #5
 8007d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d60:	484e      	ldr	r0, [pc, #312]	@ (8007e9c <_svfiprintf_r+0x1e4>)
 8007d62:	f7fe fc5c 	bl	800661e <memchr>
 8007d66:	9a04      	ldr	r2, [sp, #16]
 8007d68:	b9d8      	cbnz	r0, 8007da2 <_svfiprintf_r+0xea>
 8007d6a:	06d0      	lsls	r0, r2, #27
 8007d6c:	bf44      	itt	mi
 8007d6e:	2320      	movmi	r3, #32
 8007d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d74:	0711      	lsls	r1, r2, #28
 8007d76:	bf44      	itt	mi
 8007d78:	232b      	movmi	r3, #43	@ 0x2b
 8007d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8007d82:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d84:	d015      	beq.n	8007db2 <_svfiprintf_r+0xfa>
 8007d86:	4654      	mov	r4, sl
 8007d88:	2000      	movs	r0, #0
 8007d8a:	f04f 0c0a 	mov.w	ip, #10
 8007d8e:	9a07      	ldr	r2, [sp, #28]
 8007d90:	4621      	mov	r1, r4
 8007d92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d96:	3b30      	subs	r3, #48	@ 0x30
 8007d98:	2b09      	cmp	r3, #9
 8007d9a:	d94b      	bls.n	8007e34 <_svfiprintf_r+0x17c>
 8007d9c:	b1b0      	cbz	r0, 8007dcc <_svfiprintf_r+0x114>
 8007d9e:	9207      	str	r2, [sp, #28]
 8007da0:	e014      	b.n	8007dcc <_svfiprintf_r+0x114>
 8007da2:	eba0 0308 	sub.w	r3, r0, r8
 8007da6:	fa09 f303 	lsl.w	r3, r9, r3
 8007daa:	4313      	orrs	r3, r2
 8007dac:	46a2      	mov	sl, r4
 8007dae:	9304      	str	r3, [sp, #16]
 8007db0:	e7d2      	b.n	8007d58 <_svfiprintf_r+0xa0>
 8007db2:	9b03      	ldr	r3, [sp, #12]
 8007db4:	1d19      	adds	r1, r3, #4
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	9103      	str	r1, [sp, #12]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	bfbb      	ittet	lt
 8007dbe:	425b      	neglt	r3, r3
 8007dc0:	f042 0202 	orrlt.w	r2, r2, #2
 8007dc4:	9307      	strge	r3, [sp, #28]
 8007dc6:	9307      	strlt	r3, [sp, #28]
 8007dc8:	bfb8      	it	lt
 8007dca:	9204      	strlt	r2, [sp, #16]
 8007dcc:	7823      	ldrb	r3, [r4, #0]
 8007dce:	2b2e      	cmp	r3, #46	@ 0x2e
 8007dd0:	d10a      	bne.n	8007de8 <_svfiprintf_r+0x130>
 8007dd2:	7863      	ldrb	r3, [r4, #1]
 8007dd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007dd6:	d132      	bne.n	8007e3e <_svfiprintf_r+0x186>
 8007dd8:	9b03      	ldr	r3, [sp, #12]
 8007dda:	3402      	adds	r4, #2
 8007ddc:	1d1a      	adds	r2, r3, #4
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	9203      	str	r2, [sp, #12]
 8007de2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007de6:	9305      	str	r3, [sp, #20]
 8007de8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007ea0 <_svfiprintf_r+0x1e8>
 8007dec:	2203      	movs	r2, #3
 8007dee:	4650      	mov	r0, sl
 8007df0:	7821      	ldrb	r1, [r4, #0]
 8007df2:	f7fe fc14 	bl	800661e <memchr>
 8007df6:	b138      	cbz	r0, 8007e08 <_svfiprintf_r+0x150>
 8007df8:	2240      	movs	r2, #64	@ 0x40
 8007dfa:	9b04      	ldr	r3, [sp, #16]
 8007dfc:	eba0 000a 	sub.w	r0, r0, sl
 8007e00:	4082      	lsls	r2, r0
 8007e02:	4313      	orrs	r3, r2
 8007e04:	3401      	adds	r4, #1
 8007e06:	9304      	str	r3, [sp, #16]
 8007e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e0c:	2206      	movs	r2, #6
 8007e0e:	4825      	ldr	r0, [pc, #148]	@ (8007ea4 <_svfiprintf_r+0x1ec>)
 8007e10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e14:	f7fe fc03 	bl	800661e <memchr>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	d036      	beq.n	8007e8a <_svfiprintf_r+0x1d2>
 8007e1c:	4b22      	ldr	r3, [pc, #136]	@ (8007ea8 <_svfiprintf_r+0x1f0>)
 8007e1e:	bb1b      	cbnz	r3, 8007e68 <_svfiprintf_r+0x1b0>
 8007e20:	9b03      	ldr	r3, [sp, #12]
 8007e22:	3307      	adds	r3, #7
 8007e24:	f023 0307 	bic.w	r3, r3, #7
 8007e28:	3308      	adds	r3, #8
 8007e2a:	9303      	str	r3, [sp, #12]
 8007e2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e2e:	4433      	add	r3, r6
 8007e30:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e32:	e76a      	b.n	8007d0a <_svfiprintf_r+0x52>
 8007e34:	460c      	mov	r4, r1
 8007e36:	2001      	movs	r0, #1
 8007e38:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e3c:	e7a8      	b.n	8007d90 <_svfiprintf_r+0xd8>
 8007e3e:	2300      	movs	r3, #0
 8007e40:	f04f 0c0a 	mov.w	ip, #10
 8007e44:	4619      	mov	r1, r3
 8007e46:	3401      	adds	r4, #1
 8007e48:	9305      	str	r3, [sp, #20]
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e50:	3a30      	subs	r2, #48	@ 0x30
 8007e52:	2a09      	cmp	r2, #9
 8007e54:	d903      	bls.n	8007e5e <_svfiprintf_r+0x1a6>
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d0c6      	beq.n	8007de8 <_svfiprintf_r+0x130>
 8007e5a:	9105      	str	r1, [sp, #20]
 8007e5c:	e7c4      	b.n	8007de8 <_svfiprintf_r+0x130>
 8007e5e:	4604      	mov	r4, r0
 8007e60:	2301      	movs	r3, #1
 8007e62:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e66:	e7f0      	b.n	8007e4a <_svfiprintf_r+0x192>
 8007e68:	ab03      	add	r3, sp, #12
 8007e6a:	9300      	str	r3, [sp, #0]
 8007e6c:	462a      	mov	r2, r5
 8007e6e:	4638      	mov	r0, r7
 8007e70:	4b0e      	ldr	r3, [pc, #56]	@ (8007eac <_svfiprintf_r+0x1f4>)
 8007e72:	a904      	add	r1, sp, #16
 8007e74:	f7fd fe56 	bl	8005b24 <_printf_float>
 8007e78:	1c42      	adds	r2, r0, #1
 8007e7a:	4606      	mov	r6, r0
 8007e7c:	d1d6      	bne.n	8007e2c <_svfiprintf_r+0x174>
 8007e7e:	89ab      	ldrh	r3, [r5, #12]
 8007e80:	065b      	lsls	r3, r3, #25
 8007e82:	f53f af2d 	bmi.w	8007ce0 <_svfiprintf_r+0x28>
 8007e86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e88:	e72c      	b.n	8007ce4 <_svfiprintf_r+0x2c>
 8007e8a:	ab03      	add	r3, sp, #12
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	462a      	mov	r2, r5
 8007e90:	4638      	mov	r0, r7
 8007e92:	4b06      	ldr	r3, [pc, #24]	@ (8007eac <_svfiprintf_r+0x1f4>)
 8007e94:	a904      	add	r1, sp, #16
 8007e96:	f7fe f8e3 	bl	8006060 <_printf_i>
 8007e9a:	e7ed      	b.n	8007e78 <_svfiprintf_r+0x1c0>
 8007e9c:	0800977c 	.word	0x0800977c
 8007ea0:	08009782 	.word	0x08009782
 8007ea4:	08009786 	.word	0x08009786
 8007ea8:	08005b25 	.word	0x08005b25
 8007eac:	08007c01 	.word	0x08007c01

08007eb0 <__sflush_r>:
 8007eb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb6:	0716      	lsls	r6, r2, #28
 8007eb8:	4605      	mov	r5, r0
 8007eba:	460c      	mov	r4, r1
 8007ebc:	d454      	bmi.n	8007f68 <__sflush_r+0xb8>
 8007ebe:	684b      	ldr	r3, [r1, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	dc02      	bgt.n	8007eca <__sflush_r+0x1a>
 8007ec4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	dd48      	ble.n	8007f5c <__sflush_r+0xac>
 8007eca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ecc:	2e00      	cmp	r6, #0
 8007ece:	d045      	beq.n	8007f5c <__sflush_r+0xac>
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ed6:	682f      	ldr	r7, [r5, #0]
 8007ed8:	6a21      	ldr	r1, [r4, #32]
 8007eda:	602b      	str	r3, [r5, #0]
 8007edc:	d030      	beq.n	8007f40 <__sflush_r+0x90>
 8007ede:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ee0:	89a3      	ldrh	r3, [r4, #12]
 8007ee2:	0759      	lsls	r1, r3, #29
 8007ee4:	d505      	bpl.n	8007ef2 <__sflush_r+0x42>
 8007ee6:	6863      	ldr	r3, [r4, #4]
 8007ee8:	1ad2      	subs	r2, r2, r3
 8007eea:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007eec:	b10b      	cbz	r3, 8007ef2 <__sflush_r+0x42>
 8007eee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ef0:	1ad2      	subs	r2, r2, r3
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ef8:	6a21      	ldr	r1, [r4, #32]
 8007efa:	47b0      	blx	r6
 8007efc:	1c43      	adds	r3, r0, #1
 8007efe:	89a3      	ldrh	r3, [r4, #12]
 8007f00:	d106      	bne.n	8007f10 <__sflush_r+0x60>
 8007f02:	6829      	ldr	r1, [r5, #0]
 8007f04:	291d      	cmp	r1, #29
 8007f06:	d82b      	bhi.n	8007f60 <__sflush_r+0xb0>
 8007f08:	4a28      	ldr	r2, [pc, #160]	@ (8007fac <__sflush_r+0xfc>)
 8007f0a:	40ca      	lsrs	r2, r1
 8007f0c:	07d6      	lsls	r6, r2, #31
 8007f0e:	d527      	bpl.n	8007f60 <__sflush_r+0xb0>
 8007f10:	2200      	movs	r2, #0
 8007f12:	6062      	str	r2, [r4, #4]
 8007f14:	6922      	ldr	r2, [r4, #16]
 8007f16:	04d9      	lsls	r1, r3, #19
 8007f18:	6022      	str	r2, [r4, #0]
 8007f1a:	d504      	bpl.n	8007f26 <__sflush_r+0x76>
 8007f1c:	1c42      	adds	r2, r0, #1
 8007f1e:	d101      	bne.n	8007f24 <__sflush_r+0x74>
 8007f20:	682b      	ldr	r3, [r5, #0]
 8007f22:	b903      	cbnz	r3, 8007f26 <__sflush_r+0x76>
 8007f24:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f26:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f28:	602f      	str	r7, [r5, #0]
 8007f2a:	b1b9      	cbz	r1, 8007f5c <__sflush_r+0xac>
 8007f2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f30:	4299      	cmp	r1, r3
 8007f32:	d002      	beq.n	8007f3a <__sflush_r+0x8a>
 8007f34:	4628      	mov	r0, r5
 8007f36:	f7ff f9eb 	bl	8007310 <_free_r>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f3e:	e00d      	b.n	8007f5c <__sflush_r+0xac>
 8007f40:	2301      	movs	r3, #1
 8007f42:	4628      	mov	r0, r5
 8007f44:	47b0      	blx	r6
 8007f46:	4602      	mov	r2, r0
 8007f48:	1c50      	adds	r0, r2, #1
 8007f4a:	d1c9      	bne.n	8007ee0 <__sflush_r+0x30>
 8007f4c:	682b      	ldr	r3, [r5, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d0c6      	beq.n	8007ee0 <__sflush_r+0x30>
 8007f52:	2b1d      	cmp	r3, #29
 8007f54:	d001      	beq.n	8007f5a <__sflush_r+0xaa>
 8007f56:	2b16      	cmp	r3, #22
 8007f58:	d11d      	bne.n	8007f96 <__sflush_r+0xe6>
 8007f5a:	602f      	str	r7, [r5, #0]
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	e021      	b.n	8007fa4 <__sflush_r+0xf4>
 8007f60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f64:	b21b      	sxth	r3, r3
 8007f66:	e01a      	b.n	8007f9e <__sflush_r+0xee>
 8007f68:	690f      	ldr	r7, [r1, #16]
 8007f6a:	2f00      	cmp	r7, #0
 8007f6c:	d0f6      	beq.n	8007f5c <__sflush_r+0xac>
 8007f6e:	0793      	lsls	r3, r2, #30
 8007f70:	bf18      	it	ne
 8007f72:	2300      	movne	r3, #0
 8007f74:	680e      	ldr	r6, [r1, #0]
 8007f76:	bf08      	it	eq
 8007f78:	694b      	ldreq	r3, [r1, #20]
 8007f7a:	1bf6      	subs	r6, r6, r7
 8007f7c:	600f      	str	r7, [r1, #0]
 8007f7e:	608b      	str	r3, [r1, #8]
 8007f80:	2e00      	cmp	r6, #0
 8007f82:	ddeb      	ble.n	8007f5c <__sflush_r+0xac>
 8007f84:	4633      	mov	r3, r6
 8007f86:	463a      	mov	r2, r7
 8007f88:	4628      	mov	r0, r5
 8007f8a:	6a21      	ldr	r1, [r4, #32]
 8007f8c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007f90:	47e0      	blx	ip
 8007f92:	2800      	cmp	r0, #0
 8007f94:	dc07      	bgt.n	8007fa6 <__sflush_r+0xf6>
 8007f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa2:	81a3      	strh	r3, [r4, #12]
 8007fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fa6:	4407      	add	r7, r0
 8007fa8:	1a36      	subs	r6, r6, r0
 8007faa:	e7e9      	b.n	8007f80 <__sflush_r+0xd0>
 8007fac:	20400001 	.word	0x20400001

08007fb0 <_fflush_r>:
 8007fb0:	b538      	push	{r3, r4, r5, lr}
 8007fb2:	690b      	ldr	r3, [r1, #16]
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	b913      	cbnz	r3, 8007fc0 <_fflush_r+0x10>
 8007fba:	2500      	movs	r5, #0
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	bd38      	pop	{r3, r4, r5, pc}
 8007fc0:	b118      	cbz	r0, 8007fca <_fflush_r+0x1a>
 8007fc2:	6a03      	ldr	r3, [r0, #32]
 8007fc4:	b90b      	cbnz	r3, 8007fca <_fflush_r+0x1a>
 8007fc6:	f7fe f9f5 	bl	80063b4 <__sinit>
 8007fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0f3      	beq.n	8007fba <_fflush_r+0xa>
 8007fd2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007fd4:	07d0      	lsls	r0, r2, #31
 8007fd6:	d404      	bmi.n	8007fe2 <_fflush_r+0x32>
 8007fd8:	0599      	lsls	r1, r3, #22
 8007fda:	d402      	bmi.n	8007fe2 <_fflush_r+0x32>
 8007fdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fde:	f7fe fb1c 	bl	800661a <__retarget_lock_acquire_recursive>
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	f7ff ff63 	bl	8007eb0 <__sflush_r>
 8007fea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007fec:	4605      	mov	r5, r0
 8007fee:	07da      	lsls	r2, r3, #31
 8007ff0:	d4e4      	bmi.n	8007fbc <_fflush_r+0xc>
 8007ff2:	89a3      	ldrh	r3, [r4, #12]
 8007ff4:	059b      	lsls	r3, r3, #22
 8007ff6:	d4e1      	bmi.n	8007fbc <_fflush_r+0xc>
 8007ff8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ffa:	f7fe fb0f 	bl	800661c <__retarget_lock_release_recursive>
 8007ffe:	e7dd      	b.n	8007fbc <_fflush_r+0xc>

08008000 <memmove>:
 8008000:	4288      	cmp	r0, r1
 8008002:	b510      	push	{r4, lr}
 8008004:	eb01 0402 	add.w	r4, r1, r2
 8008008:	d902      	bls.n	8008010 <memmove+0x10>
 800800a:	4284      	cmp	r4, r0
 800800c:	4623      	mov	r3, r4
 800800e:	d807      	bhi.n	8008020 <memmove+0x20>
 8008010:	1e43      	subs	r3, r0, #1
 8008012:	42a1      	cmp	r1, r4
 8008014:	d008      	beq.n	8008028 <memmove+0x28>
 8008016:	f811 2b01 	ldrb.w	r2, [r1], #1
 800801a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800801e:	e7f8      	b.n	8008012 <memmove+0x12>
 8008020:	4601      	mov	r1, r0
 8008022:	4402      	add	r2, r0
 8008024:	428a      	cmp	r2, r1
 8008026:	d100      	bne.n	800802a <memmove+0x2a>
 8008028:	bd10      	pop	{r4, pc}
 800802a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800802e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008032:	e7f7      	b.n	8008024 <memmove+0x24>

08008034 <_sbrk_r>:
 8008034:	b538      	push	{r3, r4, r5, lr}
 8008036:	2300      	movs	r3, #0
 8008038:	4d05      	ldr	r5, [pc, #20]	@ (8008050 <_sbrk_r+0x1c>)
 800803a:	4604      	mov	r4, r0
 800803c:	4608      	mov	r0, r1
 800803e:	602b      	str	r3, [r5, #0]
 8008040:	f7fa fba0 	bl	8002784 <_sbrk>
 8008044:	1c43      	adds	r3, r0, #1
 8008046:	d102      	bne.n	800804e <_sbrk_r+0x1a>
 8008048:	682b      	ldr	r3, [r5, #0]
 800804a:	b103      	cbz	r3, 800804e <_sbrk_r+0x1a>
 800804c:	6023      	str	r3, [r4, #0]
 800804e:	bd38      	pop	{r3, r4, r5, pc}
 8008050:	20001660 	.word	0x20001660

08008054 <__assert_func>:
 8008054:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008056:	4614      	mov	r4, r2
 8008058:	461a      	mov	r2, r3
 800805a:	4b09      	ldr	r3, [pc, #36]	@ (8008080 <__assert_func+0x2c>)
 800805c:	4605      	mov	r5, r0
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68d8      	ldr	r0, [r3, #12]
 8008062:	b14c      	cbz	r4, 8008078 <__assert_func+0x24>
 8008064:	4b07      	ldr	r3, [pc, #28]	@ (8008084 <__assert_func+0x30>)
 8008066:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800806a:	9100      	str	r1, [sp, #0]
 800806c:	462b      	mov	r3, r5
 800806e:	4906      	ldr	r1, [pc, #24]	@ (8008088 <__assert_func+0x34>)
 8008070:	f000 f870 	bl	8008154 <fiprintf>
 8008074:	f000 f880 	bl	8008178 <abort>
 8008078:	4b04      	ldr	r3, [pc, #16]	@ (800808c <__assert_func+0x38>)
 800807a:	461c      	mov	r4, r3
 800807c:	e7f3      	b.n	8008066 <__assert_func+0x12>
 800807e:	bf00      	nop
 8008080:	2000001c 	.word	0x2000001c
 8008084:	08009797 	.word	0x08009797
 8008088:	080097a4 	.word	0x080097a4
 800808c:	080097d2 	.word	0x080097d2

08008090 <_calloc_r>:
 8008090:	b570      	push	{r4, r5, r6, lr}
 8008092:	fba1 5402 	umull	r5, r4, r1, r2
 8008096:	b934      	cbnz	r4, 80080a6 <_calloc_r+0x16>
 8008098:	4629      	mov	r1, r5
 800809a:	f7ff f9ab 	bl	80073f4 <_malloc_r>
 800809e:	4606      	mov	r6, r0
 80080a0:	b928      	cbnz	r0, 80080ae <_calloc_r+0x1e>
 80080a2:	4630      	mov	r0, r6
 80080a4:	bd70      	pop	{r4, r5, r6, pc}
 80080a6:	220c      	movs	r2, #12
 80080a8:	2600      	movs	r6, #0
 80080aa:	6002      	str	r2, [r0, #0]
 80080ac:	e7f9      	b.n	80080a2 <_calloc_r+0x12>
 80080ae:	462a      	mov	r2, r5
 80080b0:	4621      	mov	r1, r4
 80080b2:	f7fe fa35 	bl	8006520 <memset>
 80080b6:	e7f4      	b.n	80080a2 <_calloc_r+0x12>

080080b8 <__ascii_mbtowc>:
 80080b8:	b082      	sub	sp, #8
 80080ba:	b901      	cbnz	r1, 80080be <__ascii_mbtowc+0x6>
 80080bc:	a901      	add	r1, sp, #4
 80080be:	b142      	cbz	r2, 80080d2 <__ascii_mbtowc+0x1a>
 80080c0:	b14b      	cbz	r3, 80080d6 <__ascii_mbtowc+0x1e>
 80080c2:	7813      	ldrb	r3, [r2, #0]
 80080c4:	600b      	str	r3, [r1, #0]
 80080c6:	7812      	ldrb	r2, [r2, #0]
 80080c8:	1e10      	subs	r0, r2, #0
 80080ca:	bf18      	it	ne
 80080cc:	2001      	movne	r0, #1
 80080ce:	b002      	add	sp, #8
 80080d0:	4770      	bx	lr
 80080d2:	4610      	mov	r0, r2
 80080d4:	e7fb      	b.n	80080ce <__ascii_mbtowc+0x16>
 80080d6:	f06f 0001 	mvn.w	r0, #1
 80080da:	e7f8      	b.n	80080ce <__ascii_mbtowc+0x16>

080080dc <_realloc_r>:
 80080dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080e0:	4607      	mov	r7, r0
 80080e2:	4614      	mov	r4, r2
 80080e4:	460d      	mov	r5, r1
 80080e6:	b921      	cbnz	r1, 80080f2 <_realloc_r+0x16>
 80080e8:	4611      	mov	r1, r2
 80080ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080ee:	f7ff b981 	b.w	80073f4 <_malloc_r>
 80080f2:	b92a      	cbnz	r2, 8008100 <_realloc_r+0x24>
 80080f4:	f7ff f90c 	bl	8007310 <_free_r>
 80080f8:	4625      	mov	r5, r4
 80080fa:	4628      	mov	r0, r5
 80080fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008100:	f000 f841 	bl	8008186 <_malloc_usable_size_r>
 8008104:	4284      	cmp	r4, r0
 8008106:	4606      	mov	r6, r0
 8008108:	d802      	bhi.n	8008110 <_realloc_r+0x34>
 800810a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800810e:	d8f4      	bhi.n	80080fa <_realloc_r+0x1e>
 8008110:	4621      	mov	r1, r4
 8008112:	4638      	mov	r0, r7
 8008114:	f7ff f96e 	bl	80073f4 <_malloc_r>
 8008118:	4680      	mov	r8, r0
 800811a:	b908      	cbnz	r0, 8008120 <_realloc_r+0x44>
 800811c:	4645      	mov	r5, r8
 800811e:	e7ec      	b.n	80080fa <_realloc_r+0x1e>
 8008120:	42b4      	cmp	r4, r6
 8008122:	4622      	mov	r2, r4
 8008124:	4629      	mov	r1, r5
 8008126:	bf28      	it	cs
 8008128:	4632      	movcs	r2, r6
 800812a:	f7fe fa86 	bl	800663a <memcpy>
 800812e:	4629      	mov	r1, r5
 8008130:	4638      	mov	r0, r7
 8008132:	f7ff f8ed 	bl	8007310 <_free_r>
 8008136:	e7f1      	b.n	800811c <_realloc_r+0x40>

08008138 <__ascii_wctomb>:
 8008138:	4603      	mov	r3, r0
 800813a:	4608      	mov	r0, r1
 800813c:	b141      	cbz	r1, 8008150 <__ascii_wctomb+0x18>
 800813e:	2aff      	cmp	r2, #255	@ 0xff
 8008140:	d904      	bls.n	800814c <__ascii_wctomb+0x14>
 8008142:	228a      	movs	r2, #138	@ 0x8a
 8008144:	f04f 30ff 	mov.w	r0, #4294967295
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	4770      	bx	lr
 800814c:	2001      	movs	r0, #1
 800814e:	700a      	strb	r2, [r1, #0]
 8008150:	4770      	bx	lr
	...

08008154 <fiprintf>:
 8008154:	b40e      	push	{r1, r2, r3}
 8008156:	b503      	push	{r0, r1, lr}
 8008158:	4601      	mov	r1, r0
 800815a:	ab03      	add	r3, sp, #12
 800815c:	4805      	ldr	r0, [pc, #20]	@ (8008174 <fiprintf+0x20>)
 800815e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008162:	6800      	ldr	r0, [r0, #0]
 8008164:	9301      	str	r3, [sp, #4]
 8008166:	f000 f83d 	bl	80081e4 <_vfiprintf_r>
 800816a:	b002      	add	sp, #8
 800816c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008170:	b003      	add	sp, #12
 8008172:	4770      	bx	lr
 8008174:	2000001c 	.word	0x2000001c

08008178 <abort>:
 8008178:	2006      	movs	r0, #6
 800817a:	b508      	push	{r3, lr}
 800817c:	f000 fa06 	bl	800858c <raise>
 8008180:	2001      	movs	r0, #1
 8008182:	f7fa fa8a 	bl	800269a <_exit>

08008186 <_malloc_usable_size_r>:
 8008186:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800818a:	1f18      	subs	r0, r3, #4
 800818c:	2b00      	cmp	r3, #0
 800818e:	bfbc      	itt	lt
 8008190:	580b      	ldrlt	r3, [r1, r0]
 8008192:	18c0      	addlt	r0, r0, r3
 8008194:	4770      	bx	lr

08008196 <__sfputc_r>:
 8008196:	6893      	ldr	r3, [r2, #8]
 8008198:	b410      	push	{r4}
 800819a:	3b01      	subs	r3, #1
 800819c:	2b00      	cmp	r3, #0
 800819e:	6093      	str	r3, [r2, #8]
 80081a0:	da07      	bge.n	80081b2 <__sfputc_r+0x1c>
 80081a2:	6994      	ldr	r4, [r2, #24]
 80081a4:	42a3      	cmp	r3, r4
 80081a6:	db01      	blt.n	80081ac <__sfputc_r+0x16>
 80081a8:	290a      	cmp	r1, #10
 80081aa:	d102      	bne.n	80081b2 <__sfputc_r+0x1c>
 80081ac:	bc10      	pop	{r4}
 80081ae:	f000 b931 	b.w	8008414 <__swbuf_r>
 80081b2:	6813      	ldr	r3, [r2, #0]
 80081b4:	1c58      	adds	r0, r3, #1
 80081b6:	6010      	str	r0, [r2, #0]
 80081b8:	7019      	strb	r1, [r3, #0]
 80081ba:	4608      	mov	r0, r1
 80081bc:	bc10      	pop	{r4}
 80081be:	4770      	bx	lr

080081c0 <__sfputs_r>:
 80081c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c2:	4606      	mov	r6, r0
 80081c4:	460f      	mov	r7, r1
 80081c6:	4614      	mov	r4, r2
 80081c8:	18d5      	adds	r5, r2, r3
 80081ca:	42ac      	cmp	r4, r5
 80081cc:	d101      	bne.n	80081d2 <__sfputs_r+0x12>
 80081ce:	2000      	movs	r0, #0
 80081d0:	e007      	b.n	80081e2 <__sfputs_r+0x22>
 80081d2:	463a      	mov	r2, r7
 80081d4:	4630      	mov	r0, r6
 80081d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081da:	f7ff ffdc 	bl	8008196 <__sfputc_r>
 80081de:	1c43      	adds	r3, r0, #1
 80081e0:	d1f3      	bne.n	80081ca <__sfputs_r+0xa>
 80081e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080081e4 <_vfiprintf_r>:
 80081e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e8:	460d      	mov	r5, r1
 80081ea:	4614      	mov	r4, r2
 80081ec:	4698      	mov	r8, r3
 80081ee:	4606      	mov	r6, r0
 80081f0:	b09d      	sub	sp, #116	@ 0x74
 80081f2:	b118      	cbz	r0, 80081fc <_vfiprintf_r+0x18>
 80081f4:	6a03      	ldr	r3, [r0, #32]
 80081f6:	b90b      	cbnz	r3, 80081fc <_vfiprintf_r+0x18>
 80081f8:	f7fe f8dc 	bl	80063b4 <__sinit>
 80081fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081fe:	07d9      	lsls	r1, r3, #31
 8008200:	d405      	bmi.n	800820e <_vfiprintf_r+0x2a>
 8008202:	89ab      	ldrh	r3, [r5, #12]
 8008204:	059a      	lsls	r2, r3, #22
 8008206:	d402      	bmi.n	800820e <_vfiprintf_r+0x2a>
 8008208:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800820a:	f7fe fa06 	bl	800661a <__retarget_lock_acquire_recursive>
 800820e:	89ab      	ldrh	r3, [r5, #12]
 8008210:	071b      	lsls	r3, r3, #28
 8008212:	d501      	bpl.n	8008218 <_vfiprintf_r+0x34>
 8008214:	692b      	ldr	r3, [r5, #16]
 8008216:	b99b      	cbnz	r3, 8008240 <_vfiprintf_r+0x5c>
 8008218:	4629      	mov	r1, r5
 800821a:	4630      	mov	r0, r6
 800821c:	f000 f938 	bl	8008490 <__swsetup_r>
 8008220:	b170      	cbz	r0, 8008240 <_vfiprintf_r+0x5c>
 8008222:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008224:	07dc      	lsls	r4, r3, #31
 8008226:	d504      	bpl.n	8008232 <_vfiprintf_r+0x4e>
 8008228:	f04f 30ff 	mov.w	r0, #4294967295
 800822c:	b01d      	add	sp, #116	@ 0x74
 800822e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008232:	89ab      	ldrh	r3, [r5, #12]
 8008234:	0598      	lsls	r0, r3, #22
 8008236:	d4f7      	bmi.n	8008228 <_vfiprintf_r+0x44>
 8008238:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800823a:	f7fe f9ef 	bl	800661c <__retarget_lock_release_recursive>
 800823e:	e7f3      	b.n	8008228 <_vfiprintf_r+0x44>
 8008240:	2300      	movs	r3, #0
 8008242:	9309      	str	r3, [sp, #36]	@ 0x24
 8008244:	2320      	movs	r3, #32
 8008246:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800824a:	2330      	movs	r3, #48	@ 0x30
 800824c:	f04f 0901 	mov.w	r9, #1
 8008250:	f8cd 800c 	str.w	r8, [sp, #12]
 8008254:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008400 <_vfiprintf_r+0x21c>
 8008258:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800825c:	4623      	mov	r3, r4
 800825e:	469a      	mov	sl, r3
 8008260:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008264:	b10a      	cbz	r2, 800826a <_vfiprintf_r+0x86>
 8008266:	2a25      	cmp	r2, #37	@ 0x25
 8008268:	d1f9      	bne.n	800825e <_vfiprintf_r+0x7a>
 800826a:	ebba 0b04 	subs.w	fp, sl, r4
 800826e:	d00b      	beq.n	8008288 <_vfiprintf_r+0xa4>
 8008270:	465b      	mov	r3, fp
 8008272:	4622      	mov	r2, r4
 8008274:	4629      	mov	r1, r5
 8008276:	4630      	mov	r0, r6
 8008278:	f7ff ffa2 	bl	80081c0 <__sfputs_r>
 800827c:	3001      	adds	r0, #1
 800827e:	f000 80a7 	beq.w	80083d0 <_vfiprintf_r+0x1ec>
 8008282:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008284:	445a      	add	r2, fp
 8008286:	9209      	str	r2, [sp, #36]	@ 0x24
 8008288:	f89a 3000 	ldrb.w	r3, [sl]
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 809f 	beq.w	80083d0 <_vfiprintf_r+0x1ec>
 8008292:	2300      	movs	r3, #0
 8008294:	f04f 32ff 	mov.w	r2, #4294967295
 8008298:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800829c:	f10a 0a01 	add.w	sl, sl, #1
 80082a0:	9304      	str	r3, [sp, #16]
 80082a2:	9307      	str	r3, [sp, #28]
 80082a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80082aa:	4654      	mov	r4, sl
 80082ac:	2205      	movs	r2, #5
 80082ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082b2:	4853      	ldr	r0, [pc, #332]	@ (8008400 <_vfiprintf_r+0x21c>)
 80082b4:	f7fe f9b3 	bl	800661e <memchr>
 80082b8:	9a04      	ldr	r2, [sp, #16]
 80082ba:	b9d8      	cbnz	r0, 80082f4 <_vfiprintf_r+0x110>
 80082bc:	06d1      	lsls	r1, r2, #27
 80082be:	bf44      	itt	mi
 80082c0:	2320      	movmi	r3, #32
 80082c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082c6:	0713      	lsls	r3, r2, #28
 80082c8:	bf44      	itt	mi
 80082ca:	232b      	movmi	r3, #43	@ 0x2b
 80082cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082d0:	f89a 3000 	ldrb.w	r3, [sl]
 80082d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80082d6:	d015      	beq.n	8008304 <_vfiprintf_r+0x120>
 80082d8:	4654      	mov	r4, sl
 80082da:	2000      	movs	r0, #0
 80082dc:	f04f 0c0a 	mov.w	ip, #10
 80082e0:	9a07      	ldr	r2, [sp, #28]
 80082e2:	4621      	mov	r1, r4
 80082e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082e8:	3b30      	subs	r3, #48	@ 0x30
 80082ea:	2b09      	cmp	r3, #9
 80082ec:	d94b      	bls.n	8008386 <_vfiprintf_r+0x1a2>
 80082ee:	b1b0      	cbz	r0, 800831e <_vfiprintf_r+0x13a>
 80082f0:	9207      	str	r2, [sp, #28]
 80082f2:	e014      	b.n	800831e <_vfiprintf_r+0x13a>
 80082f4:	eba0 0308 	sub.w	r3, r0, r8
 80082f8:	fa09 f303 	lsl.w	r3, r9, r3
 80082fc:	4313      	orrs	r3, r2
 80082fe:	46a2      	mov	sl, r4
 8008300:	9304      	str	r3, [sp, #16]
 8008302:	e7d2      	b.n	80082aa <_vfiprintf_r+0xc6>
 8008304:	9b03      	ldr	r3, [sp, #12]
 8008306:	1d19      	adds	r1, r3, #4
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	9103      	str	r1, [sp, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	bfbb      	ittet	lt
 8008310:	425b      	neglt	r3, r3
 8008312:	f042 0202 	orrlt.w	r2, r2, #2
 8008316:	9307      	strge	r3, [sp, #28]
 8008318:	9307      	strlt	r3, [sp, #28]
 800831a:	bfb8      	it	lt
 800831c:	9204      	strlt	r2, [sp, #16]
 800831e:	7823      	ldrb	r3, [r4, #0]
 8008320:	2b2e      	cmp	r3, #46	@ 0x2e
 8008322:	d10a      	bne.n	800833a <_vfiprintf_r+0x156>
 8008324:	7863      	ldrb	r3, [r4, #1]
 8008326:	2b2a      	cmp	r3, #42	@ 0x2a
 8008328:	d132      	bne.n	8008390 <_vfiprintf_r+0x1ac>
 800832a:	9b03      	ldr	r3, [sp, #12]
 800832c:	3402      	adds	r4, #2
 800832e:	1d1a      	adds	r2, r3, #4
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	9203      	str	r2, [sp, #12]
 8008334:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008338:	9305      	str	r3, [sp, #20]
 800833a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008404 <_vfiprintf_r+0x220>
 800833e:	2203      	movs	r2, #3
 8008340:	4650      	mov	r0, sl
 8008342:	7821      	ldrb	r1, [r4, #0]
 8008344:	f7fe f96b 	bl	800661e <memchr>
 8008348:	b138      	cbz	r0, 800835a <_vfiprintf_r+0x176>
 800834a:	2240      	movs	r2, #64	@ 0x40
 800834c:	9b04      	ldr	r3, [sp, #16]
 800834e:	eba0 000a 	sub.w	r0, r0, sl
 8008352:	4082      	lsls	r2, r0
 8008354:	4313      	orrs	r3, r2
 8008356:	3401      	adds	r4, #1
 8008358:	9304      	str	r3, [sp, #16]
 800835a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800835e:	2206      	movs	r2, #6
 8008360:	4829      	ldr	r0, [pc, #164]	@ (8008408 <_vfiprintf_r+0x224>)
 8008362:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008366:	f7fe f95a 	bl	800661e <memchr>
 800836a:	2800      	cmp	r0, #0
 800836c:	d03f      	beq.n	80083ee <_vfiprintf_r+0x20a>
 800836e:	4b27      	ldr	r3, [pc, #156]	@ (800840c <_vfiprintf_r+0x228>)
 8008370:	bb1b      	cbnz	r3, 80083ba <_vfiprintf_r+0x1d6>
 8008372:	9b03      	ldr	r3, [sp, #12]
 8008374:	3307      	adds	r3, #7
 8008376:	f023 0307 	bic.w	r3, r3, #7
 800837a:	3308      	adds	r3, #8
 800837c:	9303      	str	r3, [sp, #12]
 800837e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008380:	443b      	add	r3, r7
 8008382:	9309      	str	r3, [sp, #36]	@ 0x24
 8008384:	e76a      	b.n	800825c <_vfiprintf_r+0x78>
 8008386:	460c      	mov	r4, r1
 8008388:	2001      	movs	r0, #1
 800838a:	fb0c 3202 	mla	r2, ip, r2, r3
 800838e:	e7a8      	b.n	80082e2 <_vfiprintf_r+0xfe>
 8008390:	2300      	movs	r3, #0
 8008392:	f04f 0c0a 	mov.w	ip, #10
 8008396:	4619      	mov	r1, r3
 8008398:	3401      	adds	r4, #1
 800839a:	9305      	str	r3, [sp, #20]
 800839c:	4620      	mov	r0, r4
 800839e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083a2:	3a30      	subs	r2, #48	@ 0x30
 80083a4:	2a09      	cmp	r2, #9
 80083a6:	d903      	bls.n	80083b0 <_vfiprintf_r+0x1cc>
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d0c6      	beq.n	800833a <_vfiprintf_r+0x156>
 80083ac:	9105      	str	r1, [sp, #20]
 80083ae:	e7c4      	b.n	800833a <_vfiprintf_r+0x156>
 80083b0:	4604      	mov	r4, r0
 80083b2:	2301      	movs	r3, #1
 80083b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80083b8:	e7f0      	b.n	800839c <_vfiprintf_r+0x1b8>
 80083ba:	ab03      	add	r3, sp, #12
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	462a      	mov	r2, r5
 80083c0:	4630      	mov	r0, r6
 80083c2:	4b13      	ldr	r3, [pc, #76]	@ (8008410 <_vfiprintf_r+0x22c>)
 80083c4:	a904      	add	r1, sp, #16
 80083c6:	f7fd fbad 	bl	8005b24 <_printf_float>
 80083ca:	4607      	mov	r7, r0
 80083cc:	1c78      	adds	r0, r7, #1
 80083ce:	d1d6      	bne.n	800837e <_vfiprintf_r+0x19a>
 80083d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083d2:	07d9      	lsls	r1, r3, #31
 80083d4:	d405      	bmi.n	80083e2 <_vfiprintf_r+0x1fe>
 80083d6:	89ab      	ldrh	r3, [r5, #12]
 80083d8:	059a      	lsls	r2, r3, #22
 80083da:	d402      	bmi.n	80083e2 <_vfiprintf_r+0x1fe>
 80083dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083de:	f7fe f91d 	bl	800661c <__retarget_lock_release_recursive>
 80083e2:	89ab      	ldrh	r3, [r5, #12]
 80083e4:	065b      	lsls	r3, r3, #25
 80083e6:	f53f af1f 	bmi.w	8008228 <_vfiprintf_r+0x44>
 80083ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083ec:	e71e      	b.n	800822c <_vfiprintf_r+0x48>
 80083ee:	ab03      	add	r3, sp, #12
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	462a      	mov	r2, r5
 80083f4:	4630      	mov	r0, r6
 80083f6:	4b06      	ldr	r3, [pc, #24]	@ (8008410 <_vfiprintf_r+0x22c>)
 80083f8:	a904      	add	r1, sp, #16
 80083fa:	f7fd fe31 	bl	8006060 <_printf_i>
 80083fe:	e7e4      	b.n	80083ca <_vfiprintf_r+0x1e6>
 8008400:	0800977c 	.word	0x0800977c
 8008404:	08009782 	.word	0x08009782
 8008408:	08009786 	.word	0x08009786
 800840c:	08005b25 	.word	0x08005b25
 8008410:	080081c1 	.word	0x080081c1

08008414 <__swbuf_r>:
 8008414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008416:	460e      	mov	r6, r1
 8008418:	4614      	mov	r4, r2
 800841a:	4605      	mov	r5, r0
 800841c:	b118      	cbz	r0, 8008426 <__swbuf_r+0x12>
 800841e:	6a03      	ldr	r3, [r0, #32]
 8008420:	b90b      	cbnz	r3, 8008426 <__swbuf_r+0x12>
 8008422:	f7fd ffc7 	bl	80063b4 <__sinit>
 8008426:	69a3      	ldr	r3, [r4, #24]
 8008428:	60a3      	str	r3, [r4, #8]
 800842a:	89a3      	ldrh	r3, [r4, #12]
 800842c:	071a      	lsls	r2, r3, #28
 800842e:	d501      	bpl.n	8008434 <__swbuf_r+0x20>
 8008430:	6923      	ldr	r3, [r4, #16]
 8008432:	b943      	cbnz	r3, 8008446 <__swbuf_r+0x32>
 8008434:	4621      	mov	r1, r4
 8008436:	4628      	mov	r0, r5
 8008438:	f000 f82a 	bl	8008490 <__swsetup_r>
 800843c:	b118      	cbz	r0, 8008446 <__swbuf_r+0x32>
 800843e:	f04f 37ff 	mov.w	r7, #4294967295
 8008442:	4638      	mov	r0, r7
 8008444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008446:	6823      	ldr	r3, [r4, #0]
 8008448:	6922      	ldr	r2, [r4, #16]
 800844a:	b2f6      	uxtb	r6, r6
 800844c:	1a98      	subs	r0, r3, r2
 800844e:	6963      	ldr	r3, [r4, #20]
 8008450:	4637      	mov	r7, r6
 8008452:	4283      	cmp	r3, r0
 8008454:	dc05      	bgt.n	8008462 <__swbuf_r+0x4e>
 8008456:	4621      	mov	r1, r4
 8008458:	4628      	mov	r0, r5
 800845a:	f7ff fda9 	bl	8007fb0 <_fflush_r>
 800845e:	2800      	cmp	r0, #0
 8008460:	d1ed      	bne.n	800843e <__swbuf_r+0x2a>
 8008462:	68a3      	ldr	r3, [r4, #8]
 8008464:	3b01      	subs	r3, #1
 8008466:	60a3      	str	r3, [r4, #8]
 8008468:	6823      	ldr	r3, [r4, #0]
 800846a:	1c5a      	adds	r2, r3, #1
 800846c:	6022      	str	r2, [r4, #0]
 800846e:	701e      	strb	r6, [r3, #0]
 8008470:	6962      	ldr	r2, [r4, #20]
 8008472:	1c43      	adds	r3, r0, #1
 8008474:	429a      	cmp	r2, r3
 8008476:	d004      	beq.n	8008482 <__swbuf_r+0x6e>
 8008478:	89a3      	ldrh	r3, [r4, #12]
 800847a:	07db      	lsls	r3, r3, #31
 800847c:	d5e1      	bpl.n	8008442 <__swbuf_r+0x2e>
 800847e:	2e0a      	cmp	r6, #10
 8008480:	d1df      	bne.n	8008442 <__swbuf_r+0x2e>
 8008482:	4621      	mov	r1, r4
 8008484:	4628      	mov	r0, r5
 8008486:	f7ff fd93 	bl	8007fb0 <_fflush_r>
 800848a:	2800      	cmp	r0, #0
 800848c:	d0d9      	beq.n	8008442 <__swbuf_r+0x2e>
 800848e:	e7d6      	b.n	800843e <__swbuf_r+0x2a>

08008490 <__swsetup_r>:
 8008490:	b538      	push	{r3, r4, r5, lr}
 8008492:	4b29      	ldr	r3, [pc, #164]	@ (8008538 <__swsetup_r+0xa8>)
 8008494:	4605      	mov	r5, r0
 8008496:	6818      	ldr	r0, [r3, #0]
 8008498:	460c      	mov	r4, r1
 800849a:	b118      	cbz	r0, 80084a4 <__swsetup_r+0x14>
 800849c:	6a03      	ldr	r3, [r0, #32]
 800849e:	b90b      	cbnz	r3, 80084a4 <__swsetup_r+0x14>
 80084a0:	f7fd ff88 	bl	80063b4 <__sinit>
 80084a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084a8:	0719      	lsls	r1, r3, #28
 80084aa:	d422      	bmi.n	80084f2 <__swsetup_r+0x62>
 80084ac:	06da      	lsls	r2, r3, #27
 80084ae:	d407      	bmi.n	80084c0 <__swsetup_r+0x30>
 80084b0:	2209      	movs	r2, #9
 80084b2:	602a      	str	r2, [r5, #0]
 80084b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084b8:	f04f 30ff 	mov.w	r0, #4294967295
 80084bc:	81a3      	strh	r3, [r4, #12]
 80084be:	e033      	b.n	8008528 <__swsetup_r+0x98>
 80084c0:	0758      	lsls	r0, r3, #29
 80084c2:	d512      	bpl.n	80084ea <__swsetup_r+0x5a>
 80084c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084c6:	b141      	cbz	r1, 80084da <__swsetup_r+0x4a>
 80084c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084cc:	4299      	cmp	r1, r3
 80084ce:	d002      	beq.n	80084d6 <__swsetup_r+0x46>
 80084d0:	4628      	mov	r0, r5
 80084d2:	f7fe ff1d 	bl	8007310 <_free_r>
 80084d6:	2300      	movs	r3, #0
 80084d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80084da:	89a3      	ldrh	r3, [r4, #12]
 80084dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80084e0:	81a3      	strh	r3, [r4, #12]
 80084e2:	2300      	movs	r3, #0
 80084e4:	6063      	str	r3, [r4, #4]
 80084e6:	6923      	ldr	r3, [r4, #16]
 80084e8:	6023      	str	r3, [r4, #0]
 80084ea:	89a3      	ldrh	r3, [r4, #12]
 80084ec:	f043 0308 	orr.w	r3, r3, #8
 80084f0:	81a3      	strh	r3, [r4, #12]
 80084f2:	6923      	ldr	r3, [r4, #16]
 80084f4:	b94b      	cbnz	r3, 800850a <__swsetup_r+0x7a>
 80084f6:	89a3      	ldrh	r3, [r4, #12]
 80084f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80084fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008500:	d003      	beq.n	800850a <__swsetup_r+0x7a>
 8008502:	4621      	mov	r1, r4
 8008504:	4628      	mov	r0, r5
 8008506:	f000 f882 	bl	800860e <__smakebuf_r>
 800850a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800850e:	f013 0201 	ands.w	r2, r3, #1
 8008512:	d00a      	beq.n	800852a <__swsetup_r+0x9a>
 8008514:	2200      	movs	r2, #0
 8008516:	60a2      	str	r2, [r4, #8]
 8008518:	6962      	ldr	r2, [r4, #20]
 800851a:	4252      	negs	r2, r2
 800851c:	61a2      	str	r2, [r4, #24]
 800851e:	6922      	ldr	r2, [r4, #16]
 8008520:	b942      	cbnz	r2, 8008534 <__swsetup_r+0xa4>
 8008522:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008526:	d1c5      	bne.n	80084b4 <__swsetup_r+0x24>
 8008528:	bd38      	pop	{r3, r4, r5, pc}
 800852a:	0799      	lsls	r1, r3, #30
 800852c:	bf58      	it	pl
 800852e:	6962      	ldrpl	r2, [r4, #20]
 8008530:	60a2      	str	r2, [r4, #8]
 8008532:	e7f4      	b.n	800851e <__swsetup_r+0x8e>
 8008534:	2000      	movs	r0, #0
 8008536:	e7f7      	b.n	8008528 <__swsetup_r+0x98>
 8008538:	2000001c 	.word	0x2000001c

0800853c <_raise_r>:
 800853c:	291f      	cmp	r1, #31
 800853e:	b538      	push	{r3, r4, r5, lr}
 8008540:	4605      	mov	r5, r0
 8008542:	460c      	mov	r4, r1
 8008544:	d904      	bls.n	8008550 <_raise_r+0x14>
 8008546:	2316      	movs	r3, #22
 8008548:	6003      	str	r3, [r0, #0]
 800854a:	f04f 30ff 	mov.w	r0, #4294967295
 800854e:	bd38      	pop	{r3, r4, r5, pc}
 8008550:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008552:	b112      	cbz	r2, 800855a <_raise_r+0x1e>
 8008554:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008558:	b94b      	cbnz	r3, 800856e <_raise_r+0x32>
 800855a:	4628      	mov	r0, r5
 800855c:	f000 f830 	bl	80085c0 <_getpid_r>
 8008560:	4622      	mov	r2, r4
 8008562:	4601      	mov	r1, r0
 8008564:	4628      	mov	r0, r5
 8008566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800856a:	f000 b817 	b.w	800859c <_kill_r>
 800856e:	2b01      	cmp	r3, #1
 8008570:	d00a      	beq.n	8008588 <_raise_r+0x4c>
 8008572:	1c59      	adds	r1, r3, #1
 8008574:	d103      	bne.n	800857e <_raise_r+0x42>
 8008576:	2316      	movs	r3, #22
 8008578:	6003      	str	r3, [r0, #0]
 800857a:	2001      	movs	r0, #1
 800857c:	e7e7      	b.n	800854e <_raise_r+0x12>
 800857e:	2100      	movs	r1, #0
 8008580:	4620      	mov	r0, r4
 8008582:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008586:	4798      	blx	r3
 8008588:	2000      	movs	r0, #0
 800858a:	e7e0      	b.n	800854e <_raise_r+0x12>

0800858c <raise>:
 800858c:	4b02      	ldr	r3, [pc, #8]	@ (8008598 <raise+0xc>)
 800858e:	4601      	mov	r1, r0
 8008590:	6818      	ldr	r0, [r3, #0]
 8008592:	f7ff bfd3 	b.w	800853c <_raise_r>
 8008596:	bf00      	nop
 8008598:	2000001c 	.word	0x2000001c

0800859c <_kill_r>:
 800859c:	b538      	push	{r3, r4, r5, lr}
 800859e:	2300      	movs	r3, #0
 80085a0:	4d06      	ldr	r5, [pc, #24]	@ (80085bc <_kill_r+0x20>)
 80085a2:	4604      	mov	r4, r0
 80085a4:	4608      	mov	r0, r1
 80085a6:	4611      	mov	r1, r2
 80085a8:	602b      	str	r3, [r5, #0]
 80085aa:	f7fa f866 	bl	800267a <_kill>
 80085ae:	1c43      	adds	r3, r0, #1
 80085b0:	d102      	bne.n	80085b8 <_kill_r+0x1c>
 80085b2:	682b      	ldr	r3, [r5, #0]
 80085b4:	b103      	cbz	r3, 80085b8 <_kill_r+0x1c>
 80085b6:	6023      	str	r3, [r4, #0]
 80085b8:	bd38      	pop	{r3, r4, r5, pc}
 80085ba:	bf00      	nop
 80085bc:	20001660 	.word	0x20001660

080085c0 <_getpid_r>:
 80085c0:	f7fa b854 	b.w	800266c <_getpid>

080085c4 <__swhatbuf_r>:
 80085c4:	b570      	push	{r4, r5, r6, lr}
 80085c6:	460c      	mov	r4, r1
 80085c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085cc:	4615      	mov	r5, r2
 80085ce:	2900      	cmp	r1, #0
 80085d0:	461e      	mov	r6, r3
 80085d2:	b096      	sub	sp, #88	@ 0x58
 80085d4:	da0c      	bge.n	80085f0 <__swhatbuf_r+0x2c>
 80085d6:	89a3      	ldrh	r3, [r4, #12]
 80085d8:	2100      	movs	r1, #0
 80085da:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80085de:	bf14      	ite	ne
 80085e0:	2340      	movne	r3, #64	@ 0x40
 80085e2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80085e6:	2000      	movs	r0, #0
 80085e8:	6031      	str	r1, [r6, #0]
 80085ea:	602b      	str	r3, [r5, #0]
 80085ec:	b016      	add	sp, #88	@ 0x58
 80085ee:	bd70      	pop	{r4, r5, r6, pc}
 80085f0:	466a      	mov	r2, sp
 80085f2:	f000 f849 	bl	8008688 <_fstat_r>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	dbed      	blt.n	80085d6 <__swhatbuf_r+0x12>
 80085fa:	9901      	ldr	r1, [sp, #4]
 80085fc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008600:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008604:	4259      	negs	r1, r3
 8008606:	4159      	adcs	r1, r3
 8008608:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800860c:	e7eb      	b.n	80085e6 <__swhatbuf_r+0x22>

0800860e <__smakebuf_r>:
 800860e:	898b      	ldrh	r3, [r1, #12]
 8008610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008612:	079d      	lsls	r5, r3, #30
 8008614:	4606      	mov	r6, r0
 8008616:	460c      	mov	r4, r1
 8008618:	d507      	bpl.n	800862a <__smakebuf_r+0x1c>
 800861a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800861e:	6023      	str	r3, [r4, #0]
 8008620:	6123      	str	r3, [r4, #16]
 8008622:	2301      	movs	r3, #1
 8008624:	6163      	str	r3, [r4, #20]
 8008626:	b003      	add	sp, #12
 8008628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800862a:	466a      	mov	r2, sp
 800862c:	ab01      	add	r3, sp, #4
 800862e:	f7ff ffc9 	bl	80085c4 <__swhatbuf_r>
 8008632:	9f00      	ldr	r7, [sp, #0]
 8008634:	4605      	mov	r5, r0
 8008636:	4639      	mov	r1, r7
 8008638:	4630      	mov	r0, r6
 800863a:	f7fe fedb 	bl	80073f4 <_malloc_r>
 800863e:	b948      	cbnz	r0, 8008654 <__smakebuf_r+0x46>
 8008640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008644:	059a      	lsls	r2, r3, #22
 8008646:	d4ee      	bmi.n	8008626 <__smakebuf_r+0x18>
 8008648:	f023 0303 	bic.w	r3, r3, #3
 800864c:	f043 0302 	orr.w	r3, r3, #2
 8008650:	81a3      	strh	r3, [r4, #12]
 8008652:	e7e2      	b.n	800861a <__smakebuf_r+0xc>
 8008654:	89a3      	ldrh	r3, [r4, #12]
 8008656:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800865a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800865e:	81a3      	strh	r3, [r4, #12]
 8008660:	9b01      	ldr	r3, [sp, #4]
 8008662:	6020      	str	r0, [r4, #0]
 8008664:	b15b      	cbz	r3, 800867e <__smakebuf_r+0x70>
 8008666:	4630      	mov	r0, r6
 8008668:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800866c:	f000 f81e 	bl	80086ac <_isatty_r>
 8008670:	b128      	cbz	r0, 800867e <__smakebuf_r+0x70>
 8008672:	89a3      	ldrh	r3, [r4, #12]
 8008674:	f023 0303 	bic.w	r3, r3, #3
 8008678:	f043 0301 	orr.w	r3, r3, #1
 800867c:	81a3      	strh	r3, [r4, #12]
 800867e:	89a3      	ldrh	r3, [r4, #12]
 8008680:	431d      	orrs	r5, r3
 8008682:	81a5      	strh	r5, [r4, #12]
 8008684:	e7cf      	b.n	8008626 <__smakebuf_r+0x18>
	...

08008688 <_fstat_r>:
 8008688:	b538      	push	{r3, r4, r5, lr}
 800868a:	2300      	movs	r3, #0
 800868c:	4d06      	ldr	r5, [pc, #24]	@ (80086a8 <_fstat_r+0x20>)
 800868e:	4604      	mov	r4, r0
 8008690:	4608      	mov	r0, r1
 8008692:	4611      	mov	r1, r2
 8008694:	602b      	str	r3, [r5, #0]
 8008696:	f7fa f84f 	bl	8002738 <_fstat>
 800869a:	1c43      	adds	r3, r0, #1
 800869c:	d102      	bne.n	80086a4 <_fstat_r+0x1c>
 800869e:	682b      	ldr	r3, [r5, #0]
 80086a0:	b103      	cbz	r3, 80086a4 <_fstat_r+0x1c>
 80086a2:	6023      	str	r3, [r4, #0]
 80086a4:	bd38      	pop	{r3, r4, r5, pc}
 80086a6:	bf00      	nop
 80086a8:	20001660 	.word	0x20001660

080086ac <_isatty_r>:
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	2300      	movs	r3, #0
 80086b0:	4d05      	ldr	r5, [pc, #20]	@ (80086c8 <_isatty_r+0x1c>)
 80086b2:	4604      	mov	r4, r0
 80086b4:	4608      	mov	r0, r1
 80086b6:	602b      	str	r3, [r5, #0]
 80086b8:	f7fa f84d 	bl	8002756 <_isatty>
 80086bc:	1c43      	adds	r3, r0, #1
 80086be:	d102      	bne.n	80086c6 <_isatty_r+0x1a>
 80086c0:	682b      	ldr	r3, [r5, #0]
 80086c2:	b103      	cbz	r3, 80086c6 <_isatty_r+0x1a>
 80086c4:	6023      	str	r3, [r4, #0]
 80086c6:	bd38      	pop	{r3, r4, r5, pc}
 80086c8:	20001660 	.word	0x20001660

080086cc <_init>:
 80086cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ce:	bf00      	nop
 80086d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086d2:	bc08      	pop	{r3}
 80086d4:	469e      	mov	lr, r3
 80086d6:	4770      	bx	lr

080086d8 <_fini>:
 80086d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086da:	bf00      	nop
 80086dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086de:	bc08      	pop	{r3}
 80086e0:	469e      	mov	lr, r3
 80086e2:	4770      	bx	lr
