
dalyBms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048f8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08004a08  08004a08  00005a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b0c  08004b0c  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004b0c  08004b0c  00005b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b14  08004b14  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b14  08004b14  00005b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b18  08004b18  00005b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004b1c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011ec  20000060  08004b7c  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000124c  08004b7c  0000624c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c654  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002638  00000000  00000000  000126dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  00014d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008d3  00000000  00000000  000158b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187b2  00000000  00000000  00016183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc0e  00000000  00000000  0002e935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a687  00000000  00000000  0003c543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6bca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003330  00000000  00000000  000c6c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000c9f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080049f0 	.word	0x080049f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080049f0 	.word	0x080049f0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	@ 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	3a01      	subs	r2, #1
 800021a:	bf28      	it	cs
 800021c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000220:	d2ed      	bcs.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <__aeabi_fmul>:
 800037c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000380:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000384:	bf1e      	ittt	ne
 8000386:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038a:	ea92 0f0c 	teqne	r2, ip
 800038e:	ea93 0f0c 	teqne	r3, ip
 8000392:	d06f      	beq.n	8000474 <__aeabi_fmul+0xf8>
 8000394:	441a      	add	r2, r3
 8000396:	ea80 0c01 	eor.w	ip, r0, r1
 800039a:	0240      	lsls	r0, r0, #9
 800039c:	bf18      	it	ne
 800039e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a2:	d01e      	beq.n	80003e2 <__aeabi_fmul+0x66>
 80003a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b0:	fba0 3101 	umull	r3, r1, r0, r1
 80003b4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003bc:	bf3e      	ittt	cc
 80003be:	0049      	lslcc	r1, r1, #1
 80003c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c4:	005b      	lslcc	r3, r3, #1
 80003c6:	ea40 0001 	orr.w	r0, r0, r1
 80003ca:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ce:	2afd      	cmp	r2, #253	@ 0xfd
 80003d0:	d81d      	bhi.n	800040e <__aeabi_fmul+0x92>
 80003d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003da:	bf08      	it	eq
 80003dc:	f020 0001 	biceq.w	r0, r0, #1
 80003e0:	4770      	bx	lr
 80003e2:	f090 0f00 	teq	r0, #0
 80003e6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003ea:	bf08      	it	eq
 80003ec:	0249      	lsleq	r1, r1, #9
 80003ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f6:	3a7f      	subs	r2, #127	@ 0x7f
 80003f8:	bfc2      	ittt	gt
 80003fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000402:	4770      	bxgt	lr
 8000404:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000408:	f04f 0300 	mov.w	r3, #0
 800040c:	3a01      	subs	r2, #1
 800040e:	dc5d      	bgt.n	80004cc <__aeabi_fmul+0x150>
 8000410:	f112 0f19 	cmn.w	r2, #25
 8000414:	bfdc      	itt	le
 8000416:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800041a:	4770      	bxle	lr
 800041c:	f1c2 0200 	rsb	r2, r2, #0
 8000420:	0041      	lsls	r1, r0, #1
 8000422:	fa21 f102 	lsr.w	r1, r1, r2
 8000426:	f1c2 0220 	rsb	r2, r2, #32
 800042a:	fa00 fc02 	lsl.w	ip, r0, r2
 800042e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000432:	f140 0000 	adc.w	r0, r0, #0
 8000436:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043a:	bf08      	it	eq
 800043c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000440:	4770      	bx	lr
 8000442:	f092 0f00 	teq	r2, #0
 8000446:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800044a:	bf02      	ittt	eq
 800044c:	0040      	lsleq	r0, r0, #1
 800044e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000452:	3a01      	subeq	r2, #1
 8000454:	d0f9      	beq.n	800044a <__aeabi_fmul+0xce>
 8000456:	ea40 000c 	orr.w	r0, r0, ip
 800045a:	f093 0f00 	teq	r3, #0
 800045e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000462:	bf02      	ittt	eq
 8000464:	0049      	lsleq	r1, r1, #1
 8000466:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800046a:	3b01      	subeq	r3, #1
 800046c:	d0f9      	beq.n	8000462 <__aeabi_fmul+0xe6>
 800046e:	ea41 010c 	orr.w	r1, r1, ip
 8000472:	e78f      	b.n	8000394 <__aeabi_fmul+0x18>
 8000474:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000478:	ea92 0f0c 	teq	r2, ip
 800047c:	bf18      	it	ne
 800047e:	ea93 0f0c 	teqne	r3, ip
 8000482:	d00a      	beq.n	800049a <__aeabi_fmul+0x11e>
 8000484:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000488:	bf18      	it	ne
 800048a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048e:	d1d8      	bne.n	8000442 <__aeabi_fmul+0xc6>
 8000490:	ea80 0001 	eor.w	r0, r0, r1
 8000494:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000498:	4770      	bx	lr
 800049a:	f090 0f00 	teq	r0, #0
 800049e:	bf17      	itett	ne
 80004a0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a4:	4608      	moveq	r0, r1
 80004a6:	f091 0f00 	teqne	r1, #0
 80004aa:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004ae:	d014      	beq.n	80004da <__aeabi_fmul+0x15e>
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	d101      	bne.n	80004ba <__aeabi_fmul+0x13e>
 80004b6:	0242      	lsls	r2, r0, #9
 80004b8:	d10f      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004ba:	ea93 0f0c 	teq	r3, ip
 80004be:	d103      	bne.n	80004c8 <__aeabi_fmul+0x14c>
 80004c0:	024b      	lsls	r3, r1, #9
 80004c2:	bf18      	it	ne
 80004c4:	4608      	movne	r0, r1
 80004c6:	d108      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d8:	4770      	bx	lr
 80004da:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004de:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004e2:	4770      	bx	lr

080004e4 <__aeabi_fdiv>:
 80004e4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004ec:	bf1e      	ittt	ne
 80004ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f2:	ea92 0f0c 	teqne	r2, ip
 80004f6:	ea93 0f0c 	teqne	r3, ip
 80004fa:	d069      	beq.n	80005d0 <__aeabi_fdiv+0xec>
 80004fc:	eba2 0203 	sub.w	r2, r2, r3
 8000500:	ea80 0c01 	eor.w	ip, r0, r1
 8000504:	0249      	lsls	r1, r1, #9
 8000506:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050a:	d037      	beq.n	800057c <__aeabi_fdiv+0x98>
 800050c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000510:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000514:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000518:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800051c:	428b      	cmp	r3, r1
 800051e:	bf38      	it	cc
 8000520:	005b      	lslcc	r3, r3, #1
 8000522:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000526:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800052a:	428b      	cmp	r3, r1
 800052c:	bf24      	itt	cs
 800052e:	1a5b      	subcs	r3, r3, r1
 8000530:	ea40 000c 	orrcs.w	r0, r0, ip
 8000534:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000538:	bf24      	itt	cs
 800053a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000542:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000546:	bf24      	itt	cs
 8000548:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800054c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000550:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000554:	bf24      	itt	cs
 8000556:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	bf18      	it	ne
 8000562:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000566:	d1e0      	bne.n	800052a <__aeabi_fdiv+0x46>
 8000568:	2afd      	cmp	r2, #253	@ 0xfd
 800056a:	f63f af50 	bhi.w	800040e <__aeabi_fmul+0x92>
 800056e:	428b      	cmp	r3, r1
 8000570:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000574:	bf08      	it	eq
 8000576:	f020 0001 	biceq.w	r0, r0, #1
 800057a:	4770      	bx	lr
 800057c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000580:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000584:	327f      	adds	r2, #127	@ 0x7f
 8000586:	bfc2      	ittt	gt
 8000588:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800058c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000590:	4770      	bxgt	lr
 8000592:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	3a01      	subs	r2, #1
 800059c:	e737      	b.n	800040e <__aeabi_fmul+0x92>
 800059e:	f092 0f00 	teq	r2, #0
 80005a2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a6:	bf02      	ittt	eq
 80005a8:	0040      	lsleq	r0, r0, #1
 80005aa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005ae:	3a01      	subeq	r2, #1
 80005b0:	d0f9      	beq.n	80005a6 <__aeabi_fdiv+0xc2>
 80005b2:	ea40 000c 	orr.w	r0, r0, ip
 80005b6:	f093 0f00 	teq	r3, #0
 80005ba:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005be:	bf02      	ittt	eq
 80005c0:	0049      	lsleq	r1, r1, #1
 80005c2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c6:	3b01      	subeq	r3, #1
 80005c8:	d0f9      	beq.n	80005be <__aeabi_fdiv+0xda>
 80005ca:	ea41 010c 	orr.w	r1, r1, ip
 80005ce:	e795      	b.n	80004fc <__aeabi_fdiv+0x18>
 80005d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d4:	ea92 0f0c 	teq	r2, ip
 80005d8:	d108      	bne.n	80005ec <__aeabi_fdiv+0x108>
 80005da:	0242      	lsls	r2, r0, #9
 80005dc:	f47f af7d 	bne.w	80004da <__aeabi_fmul+0x15e>
 80005e0:	ea93 0f0c 	teq	r3, ip
 80005e4:	f47f af70 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e776      	b.n	80004da <__aeabi_fmul+0x15e>
 80005ec:	ea93 0f0c 	teq	r3, ip
 80005f0:	d104      	bne.n	80005fc <__aeabi_fdiv+0x118>
 80005f2:	024b      	lsls	r3, r1, #9
 80005f4:	f43f af4c 	beq.w	8000490 <__aeabi_fmul+0x114>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e76e      	b.n	80004da <__aeabi_fmul+0x15e>
 80005fc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000600:	bf18      	it	ne
 8000602:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000606:	d1ca      	bne.n	800059e <__aeabi_fdiv+0xba>
 8000608:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800060c:	f47f af5c 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 8000610:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000614:	f47f af3c 	bne.w	8000490 <__aeabi_fmul+0x114>
 8000618:	e75f      	b.n	80004da <__aeabi_fmul+0x15e>
 800061a:	bf00      	nop

0800061c <DalyBMS_Request>:

#include "daly_bms.h"
#include <string.h>

bool DalyBMS_Request(UART_HandleTypeDef *huart, uint8_t command, uint8_t *response, uint8_t len)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	@ 0x28
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	607a      	str	r2, [r7, #4]
 8000626:	461a      	mov	r2, r3
 8000628:	460b      	mov	r3, r1
 800062a:	72fb      	strb	r3, [r7, #11]
 800062c:	4613      	mov	r3, r2
 800062e:	72bb      	strb	r3, [r7, #10]
    uint8_t frame[17] = {
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	741a      	strb	r2, [r3, #16]
 8000640:	23aa      	movs	r3, #170	@ 0xaa
 8000642:	753b      	strb	r3, [r7, #20]
 8000644:	2355      	movs	r3, #85	@ 0x55
 8000646:	757b      	strb	r3, [r7, #21]
 8000648:	2390      	movs	r3, #144	@ 0x90
 800064a:	75bb      	strb	r3, [r7, #22]
 800064c:	23eb      	movs	r3, #235	@ 0xeb
 800064e:	75fb      	strb	r3, [r7, #23]
 8000650:	2301      	movs	r3, #1
 8000652:	767b      	strb	r3, [r7, #25]
 8000654:	7afb      	ldrb	r3, [r7, #11]
 8000656:	76bb      	strb	r3, [r7, #26]
        0xAA, 0x55, 0x90, 0xEB,
        0x00, 0x01,   // length
        command       // command
    };

    memset(&frame[7], 0, 9); // fill 0s
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	3307      	adds	r3, #7
 800065e:	2209      	movs	r2, #9
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f003 fd36 	bl	80040d4 <memset>
    frame[16] = 0;  // checksum = simple sum, or ignore (một số firmware bỏ qua CRC)
 8000668:	2300      	movs	r3, #0
 800066a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    HAL_UART_Transmit(huart, frame, 17, 200);
 800066e:	f107 0114 	add.w	r1, r7, #20
 8000672:	23c8      	movs	r3, #200	@ 0xc8
 8000674:	2211      	movs	r2, #17
 8000676:	68f8      	ldr	r0, [r7, #12]
 8000678:	f001 fc80 	bl	8001f7c <HAL_UART_Transmit>
    HAL_Delay(100); // or osDelay in RTOS
 800067c:	2064      	movs	r0, #100	@ 0x64
 800067e:	f000 fc83 	bl	8000f88 <HAL_Delay>

    return (HAL_UART_Receive(huart, response, len, 500) == HAL_OK);
 8000682:	7abb      	ldrb	r3, [r7, #10]
 8000684:	b29a      	uxth	r2, r3
 8000686:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800068a:	6879      	ldr	r1, [r7, #4]
 800068c:	68f8      	ldr	r0, [r7, #12]
 800068e:	f001 fd00 	bl	8002092 <HAL_UART_Receive>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	bf0c      	ite	eq
 8000698:	2301      	moveq	r3, #1
 800069a:	2300      	movne	r3, #0
 800069c:	b2db      	uxtb	r3, r3
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3728      	adds	r7, #40	@ 0x28
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <DalyBMS_Parse>:

bool DalyBMS_Parse(DalyBMS_Data *data, uint8_t *frame)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
    if (frame[0] != 0xAA || frame[1] != 0x55)
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2baa      	cmp	r3, #170	@ 0xaa
 80006b8:	d104      	bne.n	80006c4 <DalyBMS_Parse+0x1c>
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	3301      	adds	r3, #1
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b55      	cmp	r3, #85	@ 0x55
 80006c2:	d001      	beq.n	80006c8 <DalyBMS_Parse+0x20>
        return false;
 80006c4:	2300      	movs	r3, #0
 80006c6:	e0d7      	b.n	8000878 <DalyBMS_Parse+0x1d0>

    uint8_t cmd = frame[6];
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	799b      	ldrb	r3, [r3, #6]
 80006cc:	73fb      	strb	r3, [r7, #15]
    switch (cmd)
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	2b06      	cmp	r3, #6
 80006d2:	dc11      	bgt.n	80006f8 <DalyBMS_Parse+0x50>
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	f2c0 80cc 	blt.w	8000872 <DalyBMS_Parse+0x1ca>
 80006da:	3b03      	subs	r3, #3
 80006dc:	2b03      	cmp	r3, #3
 80006de:	f200 80c8 	bhi.w	8000872 <DalyBMS_Parse+0x1ca>
 80006e2:	a201      	add	r2, pc, #4	@ (adr r2, 80006e8 <DalyBMS_Parse+0x40>)
 80006e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e8:	08000701 	.word	0x08000701
 80006ec:	08000751 	.word	0x08000751
 80006f0:	080007a9 	.word	0x080007a9
 80006f4:	0800081d 	.word	0x0800081d
 80006f8:	2be1      	cmp	r3, #225	@ 0xe1
 80006fa:	f000 809f 	beq.w	800083c <DalyBMS_Parse+0x194>
 80006fe:	e0b8      	b.n	8000872 <DalyBMS_Parse+0x1ca>
    {
        case 0x03:  // Total voltage, current, SOC
            data->voltage_mv = (frame[8] << 8) | frame[9];
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	3308      	adds	r3, #8
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	b21b      	sxth	r3, r3
 8000708:	021b      	lsls	r3, r3, #8
 800070a:	b21a      	sxth	r2, r3
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	3309      	adds	r3, #9
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	b21b      	sxth	r3, r3
 8000714:	4313      	orrs	r3, r2
 8000716:	b21b      	sxth	r3, r3
 8000718:	b29a      	uxth	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	801a      	strh	r2, [r3, #0]
            data->current_ma = ((frame[10] << 8) | frame[11]) - 30000;  // offset
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	330a      	adds	r3, #10
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b21b      	sxth	r3, r3
 8000726:	021b      	lsls	r3, r3, #8
 8000728:	b21a      	sxth	r2, r3
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	330b      	adds	r3, #11
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	b21b      	sxth	r3, r3
 8000732:	4313      	orrs	r3, r2
 8000734:	b21b      	sxth	r3, r3
 8000736:	b29b      	uxth	r3, r3
 8000738:	f5a3 43ea 	sub.w	r3, r3, #29952	@ 0x7500
 800073c:	3b30      	subs	r3, #48	@ 0x30
 800073e:	b29b      	uxth	r3, r3
 8000740:	b21a      	sxth	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	805a      	strh	r2, [r3, #2]
            data->soc_percent = frame[12];
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	7b1a      	ldrb	r2, [r3, #12]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	711a      	strb	r2, [r3, #4]
            break;
 800074e:	e092      	b.n	8000876 <DalyBMS_Parse+0x1ce>

        case 0x04:  // Cell voltages
            data->num_cells = frame[7];
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	79da      	ldrb	r2, [r3, #7]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	715a      	strb	r2, [r3, #5]
            for (int i = 0; i < data->num_cells; i++)
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	e01d      	b.n	800079a <DalyBMS_Parse+0xf2>
            {
                data->cell_voltage_mv[i] = (frame[8 + 2*i] << 8) | frame[9 + 2*i];
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	3304      	adds	r3, #4
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	461a      	mov	r2, r3
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	4413      	add	r3, r2
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b21b      	sxth	r3, r3
 800076e:	021b      	lsls	r3, r3, #8
 8000770:	b21a      	sxth	r2, r3
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	3309      	adds	r3, #9
 8000778:	4619      	mov	r1, r3
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	440b      	add	r3, r1
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b21b      	sxth	r3, r3
 8000782:	4313      	orrs	r3, r2
 8000784:	b21b      	sxth	r3, r3
 8000786:	b299      	uxth	r1, r3
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	4413      	add	r3, r2
 8000790:	460a      	mov	r2, r1
 8000792:	80da      	strh	r2, [r3, #6]
            for (int i = 0; i < data->num_cells; i++)
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	3301      	adds	r3, #1
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	795b      	ldrb	r3, [r3, #5]
 800079e:	461a      	mov	r2, r3
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	4293      	cmp	r3, r2
 80007a4:	dbdb      	blt.n	800075e <DalyBMS_Parse+0xb6>
            }
            break;
 80007a6:	e066      	b.n	8000876 <DalyBMS_Parse+0x1ce>

        case 0x05:  // Temperatures
            data->num_temp_sensors = frame[7];
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	79da      	ldrb	r2, [r3, #7]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            for (int i = 0; i < data->num_temp_sensors; i++)
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	e029      	b.n	800080c <DalyBMS_Parse+0x164>
            {
                uint16_t raw = (frame[8 + 2*i] << 8) | frame[9 + 2*i];
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	3304      	adds	r3, #4
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	461a      	mov	r2, r3
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	4413      	add	r3, r2
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	b21b      	sxth	r3, r3
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	3309      	adds	r3, #9
 80007d2:	4619      	mov	r1, r3
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	440b      	add	r3, r1
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	b21b      	sxth	r3, r3
 80007dc:	4313      	orrs	r3, r2
 80007de:	b21b      	sxth	r3, r3
 80007e0:	81bb      	strh	r3, [r7, #12]
                data->temperature_c[i] = (float)(raw - 2731) / 10.0f;
 80007e2:	89bb      	ldrh	r3, [r7, #12]
 80007e4:	f6a3 23ab 	subw	r3, r3, #2731	@ 0xaab
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fd73 	bl	80002d4 <__aeabi_i2f>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4923      	ldr	r1, [pc, #140]	@ (8000880 <DalyBMS_Parse+0x1d8>)
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fe76 	bl	80004e4 <__aeabi_fdiv>
 80007f8:	4603      	mov	r3, r0
 80007fa:	4619      	mov	r1, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	320a      	adds	r2, #10
 8000802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for (int i = 0; i < data->num_temp_sensors; i++)
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	3301      	adds	r3, #1
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8000812:	461a      	mov	r2, r3
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	4293      	cmp	r3, r2
 8000818:	dbce      	blt.n	80007b8 <DalyBMS_Parse+0x110>
            }
            break;
 800081a:	e02c      	b.n	8000876 <DalyBMS_Parse+0x1ce>

        case 0x06:  // Errors
            data->fault_flags = (frame[8] << 8) | frame[9];
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	3308      	adds	r3, #8
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	b21b      	sxth	r3, r3
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21a      	sxth	r2, r3
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	3309      	adds	r3, #9
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b21b      	sxth	r3, r3
 8000830:	4313      	orrs	r3, r2
 8000832:	b21b      	sxth	r3, r3
 8000834:	b29a      	uxth	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	871a      	strh	r2, [r3, #56]	@ 0x38
            break;
 800083a:	e01c      	b.n	8000876 <DalyBMS_Parse+0x1ce>

        case 0xE1:  // MOSFET state
            data->charge_mos = frame[8] & 0x01;
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	3308      	adds	r3, #8
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	2b00      	cmp	r3, #0
 8000848:	bf14      	ite	ne
 800084a:	2301      	movne	r3, #1
 800084c:	2300      	moveq	r3, #0
 800084e:	b2da      	uxtb	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            data->discharge_mos = frame[8] & 0x02;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	3308      	adds	r3, #8
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	f003 0302 	and.w	r3, r3, #2
 8000860:	2b00      	cmp	r3, #0
 8000862:	bf14      	ite	ne
 8000864:	2301      	movne	r3, #1
 8000866:	2300      	moveq	r3, #0
 8000868:	b2da      	uxtb	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            break;
 8000870:	e001      	b.n	8000876 <DalyBMS_Parse+0x1ce>

        default:
            return false;
 8000872:	2300      	movs	r3, #0
 8000874:	e000      	b.n	8000878 <DalyBMS_Parse+0x1d0>
    }

    return true;
 8000876:	2301      	movs	r3, #1
}
 8000878:	4618      	mov	r0, r3
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	41200000 	.word	0x41200000

08000884 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	4a06      	ldr	r2, [pc, #24]	@ (80008ac <vApplicationGetIdleTaskMemory+0x28>)
 8000894:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	4a05      	ldr	r2, [pc, #20]	@ (80008b0 <vApplicationGetIdleTaskMemory+0x2c>)
 800089a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2280      	movs	r2, #128	@ 0x80
 80008a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80008a2:	bf00      	nop
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	2000007c 	.word	0x2000007c
 80008b0:	200000d0 	.word	0x200000d0

080008b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b4:	b5b0      	push	{r4, r5, r7, lr}
 80008b6:	b096      	sub	sp, #88	@ 0x58
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ba:	f000 fb03 	bl	8000ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008be:	f000 f84d 	bl	800095c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c2:	f000 f8e5 	bl	8000a90 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80008c6:	f000 f88f 	bl	80009e8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80008ca:	f000 f8b7 	bl	8000a3c <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80008ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000944 <main+0x90>)
 80008d0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80008d4:	461d      	mov	r5, r3
 80008d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80008e2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f002 f9c1 	bl	8002c70 <osThreadCreate>
 80008ee:	4603      	mov	r3, r0
 80008f0:	4a15      	ldr	r2, [pc, #84]	@ (8000948 <main+0x94>)
 80008f2:	6013      	str	r3, [r2, #0]

  /* definition and creation of bmsTask */
  osThreadDef(bmsTask, StartBMSTask, osPriorityNormal, 0, 128);
 80008f4:	4b15      	ldr	r3, [pc, #84]	@ (800094c <main+0x98>)
 80008f6:	f107 0420 	add.w	r4, r7, #32
 80008fa:	461d      	mov	r5, r3
 80008fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000900:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000904:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  bmsTaskHandle = osThreadCreate(osThread(bmsTask), NULL);
 8000908:	f107 0320 	add.w	r3, r7, #32
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f002 f9ae 	bl	8002c70 <osThreadCreate>
 8000914:	4603      	mov	r3, r0
 8000916:	4a0e      	ldr	r2, [pc, #56]	@ (8000950 <main+0x9c>)
 8000918:	6013      	str	r3, [r2, #0]

  /* definition and creation of debugTask */
  osThreadDef(debugTask, StartDebugTask, osPriorityLow, 0, 128);
 800091a:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <main+0xa0>)
 800091c:	1d3c      	adds	r4, r7, #4
 800091e:	461d      	mov	r5, r3
 8000920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000924:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000928:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  debugTaskHandle = osThreadCreate(osThread(debugTask), NULL);
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f002 f99d 	bl	8002c70 <osThreadCreate>
 8000936:	4603      	mov	r3, r0
 8000938:	4a07      	ldr	r2, [pc, #28]	@ (8000958 <main+0xa4>)
 800093a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800093c:	f002 f991 	bl	8002c62 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <main+0x8c>
 8000944:	08004a14 	.word	0x08004a14
 8000948:	20000360 	.word	0x20000360
 800094c:	08004a38 	.word	0x08004a38
 8000950:	20000364 	.word	0x20000364
 8000954:	08004a60 	.word	0x08004a60
 8000958:	20000368 	.word	0x20000368

0800095c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b090      	sub	sp, #64	@ 0x40
 8000960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000962:	f107 0318 	add.w	r3, r7, #24
 8000966:	2228      	movs	r2, #40	@ 0x28
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f003 fbb2 	bl	80040d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800097e:	2301      	movs	r3, #1
 8000980:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000982:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000986:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800098c:	2301      	movs	r3, #1
 800098e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000990:	2302      	movs	r3, #2
 8000992:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000994:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000998:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800099a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800099e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a0:	f107 0318 	add.w	r3, r7, #24
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fe89 	bl	80016bc <HAL_RCC_OscConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009b0:	f000 f918 	bl	8000be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b4:	230f      	movs	r3, #15
 80009b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b8:	2302      	movs	r3, #2
 80009ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2102      	movs	r1, #2
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 f8f6 	bl	8001bc0 <HAL_RCC_ClockConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009da:	f000 f903 	bl	8000be4 <Error_Handler>
  }
}
 80009de:	bf00      	nop
 80009e0:	3740      	adds	r7, #64	@ 0x40
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <MX_USART1_UART_Init+0x4c>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	@ (8000a38 <MX_USART1_UART_Init+0x50>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <MX_USART1_UART_Init+0x4c>)
 80009f4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80009f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_USART1_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <MX_USART1_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	@ (8000a34 <MX_USART1_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <MX_USART1_UART_Init+0x4c>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <MX_USART1_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <MX_USART1_UART_Init+0x4c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <MX_USART1_UART_Init+0x4c>)
 8000a20:	f001 fa5c 	bl	8001edc <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a2a:	f000 f8db 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200002d0 	.word	0x200002d0
 8000a38:	40013800 	.word	0x40013800

08000a3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a40:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	@ (8000a8c <MX_USART2_UART_Init+0x50>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a46:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a74:	f001 fa32 	bl	8001edc <HAL_UART_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a7e:	f000 f8b1 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000318 	.word	0x20000318
 8000a8c:	40004400 	.word	0x40004400

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b088      	sub	sp, #32
 8000a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	f107 0310 	add.w	r3, r7, #16
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b20 <MX_GPIO_Init+0x90>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b20 <MX_GPIO_Init+0x90>)
 8000aaa:	f043 0310 	orr.w	r3, r3, #16
 8000aae:	6193      	str	r3, [r2, #24]
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b20 <MX_GPIO_Init+0x90>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f003 0310 	and.w	r3, r3, #16
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000abc:	4b18      	ldr	r3, [pc, #96]	@ (8000b20 <MX_GPIO_Init+0x90>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a17      	ldr	r2, [pc, #92]	@ (8000b20 <MX_GPIO_Init+0x90>)
 8000ac2:	f043 0320 	orr.w	r3, r3, #32
 8000ac6:	6193      	str	r3, [r2, #24]
 8000ac8:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <MX_GPIO_Init+0x90>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f003 0320 	and.w	r3, r3, #32
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad4:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <MX_GPIO_Init+0x90>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a11      	ldr	r2, [pc, #68]	@ (8000b20 <MX_GPIO_Init+0x90>)
 8000ada:	f043 0304 	orr.w	r3, r3, #4
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <MX_GPIO_Init+0x90>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f003 0304 	and.w	r3, r3, #4
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000af2:	480c      	ldr	r0, [pc, #48]	@ (8000b24 <MX_GPIO_Init+0x94>)
 8000af4:	f000 fdb0 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000af8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000afc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2302      	movs	r3, #2
 8000b08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 0310 	add.w	r3, r7, #16
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4804      	ldr	r0, [pc, #16]	@ (8000b24 <MX_GPIO_Init+0x94>)
 8000b12:	f000 fc1d 	bl	8001350 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b16:	bf00      	nop
 8000b18:	3720      	adds	r7, #32
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40011000 	.word	0x40011000

08000b28 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 8000b30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b34:	4803      	ldr	r0, [pc, #12]	@ (8000b44 <StartDefaultTask+0x1c>)
 8000b36:	f000 fda7 	bl	8001688 <HAL_GPIO_TogglePin>
    osDelay(100);
 8000b3a:	2064      	movs	r0, #100	@ 0x64
 8000b3c:	f002 f8e4 	bl	8002d08 <osDelay>
	HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 8000b40:	bf00      	nop
 8000b42:	e7f5      	b.n	8000b30 <StartDefaultTask+0x8>
 8000b44:	40011000 	.word	0x40011000

08000b48 <StartBMSTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBMSTask */
void StartBMSTask(void const * argument)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBMSTask */
	uint8_t rxbuf[32];
  /* Infinite loop */
  for(;;)
  {
	  if (DalyBMS_Request(&huart1, 0x03, rxbuf, 25)) {
 8000b50:	f107 0208 	add.w	r2, r7, #8
 8000b54:	2319      	movs	r3, #25
 8000b56:	2103      	movs	r1, #3
 8000b58:	4808      	ldr	r0, [pc, #32]	@ (8000b7c <StartBMSTask+0x34>)
 8000b5a:	f7ff fd5f 	bl	800061c <DalyBMS_Request>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d005      	beq.n	8000b70 <StartBMSTask+0x28>
	      DalyBMS_Parse(&bms, rxbuf);
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4805      	ldr	r0, [pc, #20]	@ (8000b80 <StartBMSTask+0x38>)
 8000b6c:	f7ff fd9c 	bl	80006a8 <DalyBMS_Parse>
	  }
    osDelay(1000);
 8000b70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b74:	f002 f8c8 	bl	8002d08 <osDelay>
	  if (DalyBMS_Request(&huart1, 0x03, rxbuf, 25)) {
 8000b78:	e7ea      	b.n	8000b50 <StartBMSTask+0x8>
 8000b7a:	bf00      	nop
 8000b7c:	200002d0 	.word	0x200002d0
 8000b80:	2000036c 	.word	0x2000036c

08000b84 <StartDebugTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDebugTask */
void StartDebugTask(void const * argument)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b094      	sub	sp, #80	@ 0x50
 8000b88:	af02      	add	r7, sp, #8
 8000b8a:	6078      	str	r0, [r7, #4]
	char msg[64];
  /* Infinite loop */
  for(;;)
  {
	snprintf(msg, sizeof(msg), "BMS: U: %u mV, I: %d mA, SOC: %u%%\r\n",
	               bms.voltage_mv, bms.current_ma, bms.soc_percent);
 8000b8c:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <StartDebugTask+0x54>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
	snprintf(msg, sizeof(msg), "BMS: U: %u mV, I: %d mA, SOC: %u%%\r\n",
 8000b90:	4619      	mov	r1, r3
	               bms.voltage_mv, bms.current_ma, bms.soc_percent);
 8000b92:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <StartDebugTask+0x54>)
 8000b94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	snprintf(msg, sizeof(msg), "BMS: U: %u mV, I: %d mA, SOC: %u%%\r\n",
 8000b98:	461a      	mov	r2, r3
	               bms.voltage_mv, bms.current_ma, bms.soc_percent);
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <StartDebugTask+0x54>)
 8000b9c:	791b      	ldrb	r3, [r3, #4]
	snprintf(msg, sizeof(msg), "BMS: U: %u mV, I: %d mA, SOC: %u%%\r\n",
 8000b9e:	f107 0008 	add.w	r0, r7, #8
 8000ba2:	9301      	str	r3, [sp, #4]
 8000ba4:	9200      	str	r2, [sp, #0]
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8000bdc <StartDebugTask+0x58>)
 8000baa:	2140      	movs	r1, #64	@ 0x40
 8000bac:	f003 fa5c 	bl	8004068 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 8000bb0:	f107 0308 	add.w	r3, r7, #8
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff facb 	bl	8000150 <strlen>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	f107 0108 	add.w	r1, r7, #8
 8000bc2:	2364      	movs	r3, #100	@ 0x64
 8000bc4:	4806      	ldr	r0, [pc, #24]	@ (8000be0 <StartDebugTask+0x5c>)
 8000bc6:	f001 f9d9 	bl	8001f7c <HAL_UART_Transmit>
    osDelay(1000);
 8000bca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bce:	f002 f89b 	bl	8002d08 <osDelay>
  {
 8000bd2:	bf00      	nop
 8000bd4:	e7da      	b.n	8000b8c <StartDebugTask+0x8>
 8000bd6:	bf00      	nop
 8000bd8:	2000036c 	.word	0x2000036c
 8000bdc:	08004a7c 	.word	0x08004a7c
 8000be0:	20000318 	.word	0x20000318

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <Error_Handler+0x8>

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bf6:	4b18      	ldr	r3, [pc, #96]	@ (8000c58 <HAL_MspInit+0x68>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	4a17      	ldr	r2, [pc, #92]	@ (8000c58 <HAL_MspInit+0x68>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6193      	str	r3, [r2, #24]
 8000c02:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <HAL_MspInit+0x68>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <HAL_MspInit+0x68>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	4a11      	ldr	r2, [pc, #68]	@ (8000c58 <HAL_MspInit+0x68>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c18:	61d3      	str	r3, [r2, #28]
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c58 <HAL_MspInit+0x68>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	210f      	movs	r1, #15
 8000c2a:	f06f 0001 	mvn.w	r0, #1
 8000c2e:	f000 faa6 	bl	800117e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c32:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <HAL_MspInit+0x6c>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	4a04      	ldr	r2, [pc, #16]	@ (8000c5c <HAL_MspInit+0x6c>)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40010000 	.word	0x40010000

08000c60 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	@ 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0318 	add.w	r3, r7, #24
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a3f      	ldr	r2, [pc, #252]	@ (8000d78 <HAL_UART_MspInit+0x118>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d13a      	bne.n	8000cf6 <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c80:	4b3e      	ldr	r3, [pc, #248]	@ (8000d7c <HAL_UART_MspInit+0x11c>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	4a3d      	ldr	r2, [pc, #244]	@ (8000d7c <HAL_UART_MspInit+0x11c>)
 8000c86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c8a:	6193      	str	r3, [r2, #24]
 8000c8c:	4b3b      	ldr	r3, [pc, #236]	@ (8000d7c <HAL_UART_MspInit+0x11c>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c98:	4b38      	ldr	r3, [pc, #224]	@ (8000d7c <HAL_UART_MspInit+0x11c>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a37      	ldr	r2, [pc, #220]	@ (8000d7c <HAL_UART_MspInit+0x11c>)
 8000c9e:	f043 0304 	orr.w	r3, r3, #4
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b35      	ldr	r3, [pc, #212]	@ (8000d7c <HAL_UART_MspInit+0x11c>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f003 0304 	and.w	r3, r3, #4
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0318 	add.w	r3, r7, #24
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	482e      	ldr	r0, [pc, #184]	@ (8000d80 <HAL_UART_MspInit+0x120>)
 8000cc6:	f000 fb43 	bl	8001350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 0318 	add.w	r3, r7, #24
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4828      	ldr	r0, [pc, #160]	@ (8000d80 <HAL_UART_MspInit+0x120>)
 8000ce0:	f000 fb36 	bl	8001350 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2105      	movs	r1, #5
 8000ce8:	2025      	movs	r0, #37	@ 0x25
 8000cea:	f000 fa48 	bl	800117e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cee:	2025      	movs	r0, #37	@ 0x25
 8000cf0:	f000 fa61 	bl	80011b6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cf4:	e03c      	b.n	8000d70 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a22      	ldr	r2, [pc, #136]	@ (8000d84 <HAL_UART_MspInit+0x124>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d137      	bne.n	8000d70 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d00:	4b1e      	ldr	r3, [pc, #120]	@ (8000d7c <HAL_UART_MspInit+0x11c>)
 8000d02:	69db      	ldr	r3, [r3, #28]
 8000d04:	4a1d      	ldr	r2, [pc, #116]	@ (8000d7c <HAL_UART_MspInit+0x11c>)
 8000d06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d0a:	61d3      	str	r3, [r2, #28]
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d7c <HAL_UART_MspInit+0x11c>)
 8000d0e:	69db      	ldr	r3, [r3, #28]
 8000d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <HAL_UART_MspInit+0x11c>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a17      	ldr	r2, [pc, #92]	@ (8000d7c <HAL_UART_MspInit+0x11c>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <HAL_UART_MspInit+0x11c>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d30:	2304      	movs	r3, #4
 8000d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 0318 	add.w	r3, r7, #24
 8000d40:	4619      	mov	r1, r3
 8000d42:	480f      	ldr	r0, [pc, #60]	@ (8000d80 <HAL_UART_MspInit+0x120>)
 8000d44:	f000 fb04 	bl	8001350 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d48:	2308      	movs	r3, #8
 8000d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 0318 	add.w	r3, r7, #24
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4809      	ldr	r0, [pc, #36]	@ (8000d80 <HAL_UART_MspInit+0x120>)
 8000d5c:	f000 faf8 	bl	8001350 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2105      	movs	r1, #5
 8000d64:	2026      	movs	r0, #38	@ 0x26
 8000d66:	f000 fa0a 	bl	800117e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d6a:	2026      	movs	r0, #38	@ 0x26
 8000d6c:	f000 fa23 	bl	80011b6 <HAL_NVIC_EnableIRQ>
}
 8000d70:	bf00      	nop
 8000d72:	3728      	adds	r7, #40	@ 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40013800 	.word	0x40013800
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40010800 	.word	0x40010800
 8000d84:	40004400 	.word	0x40004400

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <NMI_Handler+0x4>

08000d90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <MemManage_Handler+0x4>

08000da0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <UsageFault_Handler+0x4>

08000db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc0:	f000 f8c6 	bl	8000f50 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000dc4:	f002 fd2a 	bl	800381c <xTaskGetSchedulerState>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d001      	beq.n	8000dd2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000dce:	f002 ff1b 	bl	8003c08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ddc:	4802      	ldr	r0, [pc, #8]	@ (8000de8 <USART1_IRQHandler+0x10>)
 8000dde:	f001 f9ef 	bl	80021c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200002d0 	.word	0x200002d0

08000dec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000df0:	4802      	ldr	r0, [pc, #8]	@ (8000dfc <USART2_IRQHandler+0x10>)
 8000df2:	f001 f9e5 	bl	80021c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000318 	.word	0x20000318

08000e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e08:	4a14      	ldr	r2, [pc, #80]	@ (8000e5c <_sbrk+0x5c>)
 8000e0a:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <_sbrk+0x60>)
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e14:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <_sbrk+0x64>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	@ (8000e68 <_sbrk+0x68>)
 8000e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e22:	4b10      	ldr	r3, [pc, #64]	@ (8000e64 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d207      	bcs.n	8000e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e30:	f003 f958 	bl	80040e4 <__errno>
 8000e34:	4603      	mov	r3, r0
 8000e36:	220c      	movs	r2, #12
 8000e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	e009      	b.n	8000e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e40:	4b08      	ldr	r3, [pc, #32]	@ (8000e64 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e46:	4b07      	ldr	r3, [pc, #28]	@ (8000e64 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a05      	ldr	r2, [pc, #20]	@ (8000e64 <_sbrk+0x64>)
 8000e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20005000 	.word	0x20005000
 8000e60:	00000400 	.word	0x00000400
 8000e64:	200003a8 	.word	0x200003a8
 8000e68:	20001250 	.word	0x20001250

08000e6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e78:	f7ff fff8 	bl	8000e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e7c:	480b      	ldr	r0, [pc, #44]	@ (8000eac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e7e:	490c      	ldr	r1, [pc, #48]	@ (8000eb0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e80:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e84:	e002      	b.n	8000e8c <LoopCopyDataInit>

08000e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8a:	3304      	adds	r3, #4

08000e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e90:	d3f9      	bcc.n	8000e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e92:	4a09      	ldr	r2, [pc, #36]	@ (8000eb8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e94:	4c09      	ldr	r4, [pc, #36]	@ (8000ebc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e98:	e001      	b.n	8000e9e <LoopFillZerobss>

08000e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e9c:	3204      	adds	r2, #4

08000e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea0:	d3fb      	bcc.n	8000e9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f003 f925 	bl	80040f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ea6:	f7ff fd05 	bl	80008b4 <main>
  bx lr
 8000eaa:	4770      	bx	lr
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000eb4:	08004b1c 	.word	0x08004b1c
  ldr r2, =_sbss
 8000eb8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ebc:	2000124c 	.word	0x2000124c

08000ec0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC1_2_IRQHandler>
	...

08000ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <HAL_Init+0x28>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a07      	ldr	r2, [pc, #28]	@ (8000eec <HAL_Init+0x28>)
 8000ece:	f043 0310 	orr.w	r3, r3, #16
 8000ed2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f000 f947 	bl	8001168 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eda:	200f      	movs	r0, #15
 8000edc:	f000 f808 	bl	8000ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee0:	f7ff fe86 	bl	8000bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40022000 	.word	0x40022000

08000ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_InitTick+0x54>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <HAL_InitTick+0x58>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f95f 	bl	80011d2 <HAL_SYSTICK_Config>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00e      	b.n	8000f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d80a      	bhi.n	8000f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f000 f927 	bl	800117e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f30:	4a06      	ldr	r2, [pc, #24]	@ (8000f4c <HAL_InitTick+0x5c>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e000      	b.n	8000f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000000 	.word	0x20000000
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000004 	.word	0x20000004

08000f50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b05      	ldr	r3, [pc, #20]	@ (8000f6c <HAL_IncTick+0x1c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <HAL_IncTick+0x20>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a03      	ldr	r2, [pc, #12]	@ (8000f70 <HAL_IncTick+0x20>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	200003ac 	.word	0x200003ac

08000f74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b02      	ldr	r3, [pc, #8]	@ (8000f84 <HAL_GetTick+0x10>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr
 8000f84:	200003ac 	.word	0x200003ac

08000f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f90:	f7ff fff0 	bl	8000f74 <HAL_GetTick>
 8000f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa0:	d005      	beq.n	8000fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fcc <HAL_Delay+0x44>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fae:	bf00      	nop
 8000fb0:	f7ff ffe0 	bl	8000f74 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d8f7      	bhi.n	8000fb0 <HAL_Delay+0x28>
  {
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000008 	.word	0x20000008

08000fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fec:	4013      	ands	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ffc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001002:	4a04      	ldr	r2, [pc, #16]	@ (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	60d3      	str	r3, [r2, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800101c:	4b04      	ldr	r3, [pc, #16]	@ (8001030 <__NVIC_GetPriorityGrouping+0x18>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	f003 0307 	and.w	r3, r3, #7
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	2b00      	cmp	r3, #0
 8001044:	db0b      	blt.n	800105e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	f003 021f 	and.w	r2, r3, #31
 800104c:	4906      	ldr	r1, [pc, #24]	@ (8001068 <__NVIC_EnableIRQ+0x34>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	095b      	lsrs	r3, r3, #5
 8001054:	2001      	movs	r0, #1
 8001056:	fa00 f202 	lsl.w	r2, r0, r2
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	@ (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	@ (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	@ 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	@ 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001134:	d301      	bcc.n	800113a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001136:	2301      	movs	r3, #1
 8001138:	e00f      	b.n	800115a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113a:	4a0a      	ldr	r2, [pc, #40]	@ (8001164 <SysTick_Config+0x40>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001142:	210f      	movs	r1, #15
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f7ff ff90 	bl	800106c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800114c:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <SysTick_Config+0x40>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001152:	4b04      	ldr	r3, [pc, #16]	@ (8001164 <SysTick_Config+0x40>)
 8001154:	2207      	movs	r2, #7
 8001156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	e000e010 	.word	0xe000e010

08001168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff2d 	bl	8000fd0 <__NVIC_SetPriorityGrouping>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001190:	f7ff ff42 	bl	8001018 <__NVIC_GetPriorityGrouping>
 8001194:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	68b9      	ldr	r1, [r7, #8]
 800119a:	6978      	ldr	r0, [r7, #20]
 800119c:	f7ff ff90 	bl	80010c0 <NVIC_EncodePriority>
 80011a0:	4602      	mov	r2, r0
 80011a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff5f 	bl	800106c <__NVIC_SetPriority>
}
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff35 	bl	8001034 <__NVIC_EnableIRQ>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ffa2 	bl	8001124 <SysTick_Config>
 80011e0:	4603      	mov	r3, r0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b085      	sub	sp, #20
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d008      	beq.n	8001214 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2204      	movs	r2, #4
 8001206:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e020      	b.n	8001256 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 020e 	bic.w	r2, r2, #14
 8001222:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0201 	bic.w	r2, r2, #1
 8001232:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800123c:	2101      	movs	r1, #1
 800123e:	fa01 f202 	lsl.w	r2, r1, r2
 8001242:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001254:	7bfb      	ldrb	r3, [r7, #15]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d005      	beq.n	8001284 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2204      	movs	r2, #4
 800127c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	73fb      	strb	r3, [r7, #15]
 8001282:	e051      	b.n	8001328 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 020e 	bic.w	r2, r2, #14
 8001292:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0201 	bic.w	r2, r2, #1
 80012a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a22      	ldr	r2, [pc, #136]	@ (8001334 <HAL_DMA_Abort_IT+0xd4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d029      	beq.n	8001302 <HAL_DMA_Abort_IT+0xa2>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a21      	ldr	r2, [pc, #132]	@ (8001338 <HAL_DMA_Abort_IT+0xd8>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d022      	beq.n	80012fe <HAL_DMA_Abort_IT+0x9e>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a1f      	ldr	r2, [pc, #124]	@ (800133c <HAL_DMA_Abort_IT+0xdc>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d01a      	beq.n	80012f8 <HAL_DMA_Abort_IT+0x98>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001340 <HAL_DMA_Abort_IT+0xe0>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d012      	beq.n	80012f2 <HAL_DMA_Abort_IT+0x92>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001344 <HAL_DMA_Abort_IT+0xe4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00a      	beq.n	80012ec <HAL_DMA_Abort_IT+0x8c>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a1b      	ldr	r2, [pc, #108]	@ (8001348 <HAL_DMA_Abort_IT+0xe8>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d102      	bne.n	80012e6 <HAL_DMA_Abort_IT+0x86>
 80012e0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80012e4:	e00e      	b.n	8001304 <HAL_DMA_Abort_IT+0xa4>
 80012e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80012ea:	e00b      	b.n	8001304 <HAL_DMA_Abort_IT+0xa4>
 80012ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012f0:	e008      	b.n	8001304 <HAL_DMA_Abort_IT+0xa4>
 80012f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f6:	e005      	b.n	8001304 <HAL_DMA_Abort_IT+0xa4>
 80012f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012fc:	e002      	b.n	8001304 <HAL_DMA_Abort_IT+0xa4>
 80012fe:	2310      	movs	r3, #16
 8001300:	e000      	b.n	8001304 <HAL_DMA_Abort_IT+0xa4>
 8001302:	2301      	movs	r3, #1
 8001304:	4a11      	ldr	r2, [pc, #68]	@ (800134c <HAL_DMA_Abort_IT+0xec>)
 8001306:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	4798      	blx	r3
    } 
  }
  return status;
 8001328:	7bfb      	ldrb	r3, [r7, #15]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40020008 	.word	0x40020008
 8001338:	4002001c 	.word	0x4002001c
 800133c:	40020030 	.word	0x40020030
 8001340:	40020044 	.word	0x40020044
 8001344:	40020058 	.word	0x40020058
 8001348:	4002006c 	.word	0x4002006c
 800134c:	40020000 	.word	0x40020000

08001350 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001350:	b480      	push	{r7}
 8001352:	b08b      	sub	sp, #44	@ 0x2c
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800135a:	2300      	movs	r3, #0
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001362:	e169      	b.n	8001638 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001364:	2201      	movs	r2, #1
 8001366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	69fa      	ldr	r2, [r7, #28]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	429a      	cmp	r2, r3
 800137e:	f040 8158 	bne.w	8001632 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	4a9a      	ldr	r2, [pc, #616]	@ (80015f0 <HAL_GPIO_Init+0x2a0>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d05e      	beq.n	800144a <HAL_GPIO_Init+0xfa>
 800138c:	4a98      	ldr	r2, [pc, #608]	@ (80015f0 <HAL_GPIO_Init+0x2a0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d875      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 8001392:	4a98      	ldr	r2, [pc, #608]	@ (80015f4 <HAL_GPIO_Init+0x2a4>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d058      	beq.n	800144a <HAL_GPIO_Init+0xfa>
 8001398:	4a96      	ldr	r2, [pc, #600]	@ (80015f4 <HAL_GPIO_Init+0x2a4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d86f      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 800139e:	4a96      	ldr	r2, [pc, #600]	@ (80015f8 <HAL_GPIO_Init+0x2a8>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d052      	beq.n	800144a <HAL_GPIO_Init+0xfa>
 80013a4:	4a94      	ldr	r2, [pc, #592]	@ (80015f8 <HAL_GPIO_Init+0x2a8>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d869      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 80013aa:	4a94      	ldr	r2, [pc, #592]	@ (80015fc <HAL_GPIO_Init+0x2ac>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d04c      	beq.n	800144a <HAL_GPIO_Init+0xfa>
 80013b0:	4a92      	ldr	r2, [pc, #584]	@ (80015fc <HAL_GPIO_Init+0x2ac>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d863      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 80013b6:	4a92      	ldr	r2, [pc, #584]	@ (8001600 <HAL_GPIO_Init+0x2b0>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d046      	beq.n	800144a <HAL_GPIO_Init+0xfa>
 80013bc:	4a90      	ldr	r2, [pc, #576]	@ (8001600 <HAL_GPIO_Init+0x2b0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d85d      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 80013c2:	2b12      	cmp	r3, #18
 80013c4:	d82a      	bhi.n	800141c <HAL_GPIO_Init+0xcc>
 80013c6:	2b12      	cmp	r3, #18
 80013c8:	d859      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 80013ca:	a201      	add	r2, pc, #4	@ (adr r2, 80013d0 <HAL_GPIO_Init+0x80>)
 80013cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d0:	0800144b 	.word	0x0800144b
 80013d4:	08001425 	.word	0x08001425
 80013d8:	08001437 	.word	0x08001437
 80013dc:	08001479 	.word	0x08001479
 80013e0:	0800147f 	.word	0x0800147f
 80013e4:	0800147f 	.word	0x0800147f
 80013e8:	0800147f 	.word	0x0800147f
 80013ec:	0800147f 	.word	0x0800147f
 80013f0:	0800147f 	.word	0x0800147f
 80013f4:	0800147f 	.word	0x0800147f
 80013f8:	0800147f 	.word	0x0800147f
 80013fc:	0800147f 	.word	0x0800147f
 8001400:	0800147f 	.word	0x0800147f
 8001404:	0800147f 	.word	0x0800147f
 8001408:	0800147f 	.word	0x0800147f
 800140c:	0800147f 	.word	0x0800147f
 8001410:	0800147f 	.word	0x0800147f
 8001414:	0800142d 	.word	0x0800142d
 8001418:	08001441 	.word	0x08001441
 800141c:	4a79      	ldr	r2, [pc, #484]	@ (8001604 <HAL_GPIO_Init+0x2b4>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d013      	beq.n	800144a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001422:	e02c      	b.n	800147e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	623b      	str	r3, [r7, #32]
          break;
 800142a:	e029      	b.n	8001480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	3304      	adds	r3, #4
 8001432:	623b      	str	r3, [r7, #32]
          break;
 8001434:	e024      	b.n	8001480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	3308      	adds	r3, #8
 800143c:	623b      	str	r3, [r7, #32]
          break;
 800143e:	e01f      	b.n	8001480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	330c      	adds	r3, #12
 8001446:	623b      	str	r3, [r7, #32]
          break;
 8001448:	e01a      	b.n	8001480 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d102      	bne.n	8001458 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001452:	2304      	movs	r3, #4
 8001454:	623b      	str	r3, [r7, #32]
          break;
 8001456:	e013      	b.n	8001480 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d105      	bne.n	800146c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001460:	2308      	movs	r3, #8
 8001462:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69fa      	ldr	r2, [r7, #28]
 8001468:	611a      	str	r2, [r3, #16]
          break;
 800146a:	e009      	b.n	8001480 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800146c:	2308      	movs	r3, #8
 800146e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	615a      	str	r2, [r3, #20]
          break;
 8001476:	e003      	b.n	8001480 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
          break;
 800147c:	e000      	b.n	8001480 <HAL_GPIO_Init+0x130>
          break;
 800147e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	2bff      	cmp	r3, #255	@ 0xff
 8001484:	d801      	bhi.n	800148a <HAL_GPIO_Init+0x13a>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	e001      	b.n	800148e <HAL_GPIO_Init+0x13e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3304      	adds	r3, #4
 800148e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	2bff      	cmp	r3, #255	@ 0xff
 8001494:	d802      	bhi.n	800149c <HAL_GPIO_Init+0x14c>
 8001496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	e002      	b.n	80014a2 <HAL_GPIO_Init+0x152>
 800149c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149e:	3b08      	subs	r3, #8
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	210f      	movs	r1, #15
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	fa01 f303 	lsl.w	r3, r1, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	401a      	ands	r2, r3
 80014b4:	6a39      	ldr	r1, [r7, #32]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	431a      	orrs	r2, r3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 80b1 	beq.w	8001632 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014d0:	4b4d      	ldr	r3, [pc, #308]	@ (8001608 <HAL_GPIO_Init+0x2b8>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001608 <HAL_GPIO_Init+0x2b8>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001608 <HAL_GPIO_Init+0x2b8>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014e8:	4a48      	ldr	r2, [pc, #288]	@ (800160c <HAL_GPIO_Init+0x2bc>)
 80014ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	3302      	adds	r3, #2
 80014f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	220f      	movs	r2, #15
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	4013      	ands	r3, r2
 800150a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a40      	ldr	r2, [pc, #256]	@ (8001610 <HAL_GPIO_Init+0x2c0>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d013      	beq.n	800153c <HAL_GPIO_Init+0x1ec>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a3f      	ldr	r2, [pc, #252]	@ (8001614 <HAL_GPIO_Init+0x2c4>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d00d      	beq.n	8001538 <HAL_GPIO_Init+0x1e8>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a3e      	ldr	r2, [pc, #248]	@ (8001618 <HAL_GPIO_Init+0x2c8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d007      	beq.n	8001534 <HAL_GPIO_Init+0x1e4>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a3d      	ldr	r2, [pc, #244]	@ (800161c <HAL_GPIO_Init+0x2cc>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d101      	bne.n	8001530 <HAL_GPIO_Init+0x1e0>
 800152c:	2303      	movs	r3, #3
 800152e:	e006      	b.n	800153e <HAL_GPIO_Init+0x1ee>
 8001530:	2304      	movs	r3, #4
 8001532:	e004      	b.n	800153e <HAL_GPIO_Init+0x1ee>
 8001534:	2302      	movs	r3, #2
 8001536:	e002      	b.n	800153e <HAL_GPIO_Init+0x1ee>
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <HAL_GPIO_Init+0x1ee>
 800153c:	2300      	movs	r3, #0
 800153e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001540:	f002 0203 	and.w	r2, r2, #3
 8001544:	0092      	lsls	r2, r2, #2
 8001546:	4093      	lsls	r3, r2
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	4313      	orrs	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800154e:	492f      	ldr	r1, [pc, #188]	@ (800160c <HAL_GPIO_Init+0x2bc>)
 8001550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001552:	089b      	lsrs	r3, r3, #2
 8001554:	3302      	adds	r3, #2
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d006      	beq.n	8001576 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001568:	4b2d      	ldr	r3, [pc, #180]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	492c      	ldr	r1, [pc, #176]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	608b      	str	r3, [r1, #8]
 8001574:	e006      	b.n	8001584 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001576:	4b2a      	ldr	r3, [pc, #168]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	43db      	mvns	r3, r3
 800157e:	4928      	ldr	r1, [pc, #160]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 8001580:	4013      	ands	r3, r2
 8001582:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d006      	beq.n	800159e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001590:	4b23      	ldr	r3, [pc, #140]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	4922      	ldr	r1, [pc, #136]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	60cb      	str	r3, [r1, #12]
 800159c:	e006      	b.n	80015ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800159e:	4b20      	ldr	r3, [pc, #128]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	491e      	ldr	r1, [pc, #120]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d006      	beq.n	80015c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015b8:	4b19      	ldr	r3, [pc, #100]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	4918      	ldr	r1, [pc, #96]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]
 80015c4:	e006      	b.n	80015d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015c6:	4b16      	ldr	r3, [pc, #88]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	4914      	ldr	r1, [pc, #80]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 80015d0:	4013      	ands	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d021      	beq.n	8001624 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	490e      	ldr	r1, [pc, #56]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	600b      	str	r3, [r1, #0]
 80015ec:	e021      	b.n	8001632 <HAL_GPIO_Init+0x2e2>
 80015ee:	bf00      	nop
 80015f0:	10320000 	.word	0x10320000
 80015f4:	10310000 	.word	0x10310000
 80015f8:	10220000 	.word	0x10220000
 80015fc:	10210000 	.word	0x10210000
 8001600:	10120000 	.word	0x10120000
 8001604:	10110000 	.word	0x10110000
 8001608:	40021000 	.word	0x40021000
 800160c:	40010000 	.word	0x40010000
 8001610:	40010800 	.word	0x40010800
 8001614:	40010c00 	.word	0x40010c00
 8001618:	40011000 	.word	0x40011000
 800161c:	40011400 	.word	0x40011400
 8001620:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001624:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <HAL_GPIO_Init+0x304>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	43db      	mvns	r3, r3
 800162c:	4909      	ldr	r1, [pc, #36]	@ (8001654 <HAL_GPIO_Init+0x304>)
 800162e:	4013      	ands	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001634:	3301      	adds	r3, #1
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163e:	fa22 f303 	lsr.w	r3, r2, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	f47f ae8e 	bne.w	8001364 <HAL_GPIO_Init+0x14>
  }
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	372c      	adds	r7, #44	@ 0x2c
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	40010400 	.word	0x40010400

08001658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
 8001664:	4613      	mov	r3, r2
 8001666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001668:	787b      	ldrb	r3, [r7, #1]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001674:	e003      	b.n	800167e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001676:	887b      	ldrh	r3, [r7, #2]
 8001678:	041a      	lsls	r2, r3, #16
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	611a      	str	r2, [r3, #16]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800169a:	887a      	ldrh	r2, [r7, #2]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4013      	ands	r3, r2
 80016a0:	041a      	lsls	r2, r3, #16
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	43d9      	mvns	r1, r3
 80016a6:	887b      	ldrh	r3, [r7, #2]
 80016a8:	400b      	ands	r3, r1
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	611a      	str	r2, [r3, #16]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
	...

080016bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e272      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 8087 	beq.w	80017ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016dc:	4b92      	ldr	r3, [pc, #584]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d00c      	beq.n	8001702 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016e8:	4b8f      	ldr	r3, [pc, #572]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 030c 	and.w	r3, r3, #12
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d112      	bne.n	800171a <HAL_RCC_OscConfig+0x5e>
 80016f4:	4b8c      	ldr	r3, [pc, #560]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001700:	d10b      	bne.n	800171a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001702:	4b89      	ldr	r3, [pc, #548]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d06c      	beq.n	80017e8 <HAL_RCC_OscConfig+0x12c>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d168      	bne.n	80017e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e24c      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001722:	d106      	bne.n	8001732 <HAL_RCC_OscConfig+0x76>
 8001724:	4b80      	ldr	r3, [pc, #512]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a7f      	ldr	r2, [pc, #508]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 800172a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	e02e      	b.n	8001790 <HAL_RCC_OscConfig+0xd4>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10c      	bne.n	8001754 <HAL_RCC_OscConfig+0x98>
 800173a:	4b7b      	ldr	r3, [pc, #492]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a7a      	ldr	r2, [pc, #488]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001740:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	4b78      	ldr	r3, [pc, #480]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a77      	ldr	r2, [pc, #476]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 800174c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	e01d      	b.n	8001790 <HAL_RCC_OscConfig+0xd4>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800175c:	d10c      	bne.n	8001778 <HAL_RCC_OscConfig+0xbc>
 800175e:	4b72      	ldr	r3, [pc, #456]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a71      	ldr	r2, [pc, #452]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001764:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	4b6f      	ldr	r3, [pc, #444]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a6e      	ldr	r2, [pc, #440]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e00b      	b.n	8001790 <HAL_RCC_OscConfig+0xd4>
 8001778:	4b6b      	ldr	r3, [pc, #428]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a6a      	ldr	r2, [pc, #424]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 800177e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	4b68      	ldr	r3, [pc, #416]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a67      	ldr	r2, [pc, #412]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 800178a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800178e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d013      	beq.n	80017c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff fbec 	bl	8000f74 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a0:	f7ff fbe8 	bl	8000f74 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b64      	cmp	r3, #100	@ 0x64
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e200      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0xe4>
 80017be:	e014      	b.n	80017ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fbd8 	bl	8000f74 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c8:	f7ff fbd4 	bl	8000f74 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	@ 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e1ec      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017da:	4b53      	ldr	r3, [pc, #332]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x10c>
 80017e6:	e000      	b.n	80017ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d063      	beq.n	80018be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017f6:	4b4c      	ldr	r3, [pc, #304]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00b      	beq.n	800181a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001802:	4b49      	ldr	r3, [pc, #292]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b08      	cmp	r3, #8
 800180c:	d11c      	bne.n	8001848 <HAL_RCC_OscConfig+0x18c>
 800180e:	4b46      	ldr	r3, [pc, #280]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d116      	bne.n	8001848 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181a:	4b43      	ldr	r3, [pc, #268]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d005      	beq.n	8001832 <HAL_RCC_OscConfig+0x176>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d001      	beq.n	8001832 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e1c0      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001832:	4b3d      	ldr	r3, [pc, #244]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4939      	ldr	r1, [pc, #228]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001846:	e03a      	b.n	80018be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d020      	beq.n	8001892 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001850:	4b36      	ldr	r3, [pc, #216]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 8001852:	2201      	movs	r2, #1
 8001854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001856:	f7ff fb8d 	bl	8000f74 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800185e:	f7ff fb89 	bl	8000f74 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e1a1      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001870:	4b2d      	ldr	r3, [pc, #180]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0f0      	beq.n	800185e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187c:	4b2a      	ldr	r3, [pc, #168]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	4927      	ldr	r1, [pc, #156]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 800188c:	4313      	orrs	r3, r2
 800188e:	600b      	str	r3, [r1, #0]
 8001890:	e015      	b.n	80018be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001892:	4b26      	ldr	r3, [pc, #152]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7ff fb6c 	bl	8000f74 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a0:	f7ff fb68 	bl	8000f74 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e180      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d03a      	beq.n	8001940 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d019      	beq.n	8001906 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018d2:	4b17      	ldr	r3, [pc, #92]	@ (8001930 <HAL_RCC_OscConfig+0x274>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d8:	f7ff fb4c 	bl	8000f74 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e0:	f7ff fb48 	bl	8000f74 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e160      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018fe:	2001      	movs	r0, #1
 8001900:	f000 face 	bl	8001ea0 <RCC_Delay>
 8001904:	e01c      	b.n	8001940 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001906:	4b0a      	ldr	r3, [pc, #40]	@ (8001930 <HAL_RCC_OscConfig+0x274>)
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190c:	f7ff fb32 	bl	8000f74 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001912:	e00f      	b.n	8001934 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001914:	f7ff fb2e 	bl	8000f74 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d908      	bls.n	8001934 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e146      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
 800192c:	42420000 	.word	0x42420000
 8001930:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001934:	4b92      	ldr	r3, [pc, #584]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1e9      	bne.n	8001914 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 80a6 	beq.w	8001a9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001952:	4b8b      	ldr	r3, [pc, #556]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10d      	bne.n	800197a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800195e:	4b88      	ldr	r3, [pc, #544]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	4a87      	ldr	r2, [pc, #540]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001968:	61d3      	str	r3, [r2, #28]
 800196a:	4b85      	ldr	r3, [pc, #532]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001976:	2301      	movs	r3, #1
 8001978:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197a:	4b82      	ldr	r3, [pc, #520]	@ (8001b84 <HAL_RCC_OscConfig+0x4c8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001982:	2b00      	cmp	r3, #0
 8001984:	d118      	bne.n	80019b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001986:	4b7f      	ldr	r3, [pc, #508]	@ (8001b84 <HAL_RCC_OscConfig+0x4c8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a7e      	ldr	r2, [pc, #504]	@ (8001b84 <HAL_RCC_OscConfig+0x4c8>)
 800198c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001992:	f7ff faef 	bl	8000f74 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800199a:	f7ff faeb 	bl	8000f74 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b64      	cmp	r3, #100	@ 0x64
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e103      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ac:	4b75      	ldr	r3, [pc, #468]	@ (8001b84 <HAL_RCC_OscConfig+0x4c8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f0      	beq.n	800199a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d106      	bne.n	80019ce <HAL_RCC_OscConfig+0x312>
 80019c0:	4b6f      	ldr	r3, [pc, #444]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4a6e      	ldr	r2, [pc, #440]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	6213      	str	r3, [r2, #32]
 80019cc:	e02d      	b.n	8001a2a <HAL_RCC_OscConfig+0x36e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10c      	bne.n	80019f0 <HAL_RCC_OscConfig+0x334>
 80019d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	4a69      	ldr	r2, [pc, #420]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	6213      	str	r3, [r2, #32]
 80019e2:	4b67      	ldr	r3, [pc, #412]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	4a66      	ldr	r2, [pc, #408]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	f023 0304 	bic.w	r3, r3, #4
 80019ec:	6213      	str	r3, [r2, #32]
 80019ee:	e01c      	b.n	8001a2a <HAL_RCC_OscConfig+0x36e>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b05      	cmp	r3, #5
 80019f6:	d10c      	bne.n	8001a12 <HAL_RCC_OscConfig+0x356>
 80019f8:	4b61      	ldr	r3, [pc, #388]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	4a60      	ldr	r2, [pc, #384]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	f043 0304 	orr.w	r3, r3, #4
 8001a02:	6213      	str	r3, [r2, #32]
 8001a04:	4b5e      	ldr	r3, [pc, #376]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	4a5d      	ldr	r2, [pc, #372]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6213      	str	r3, [r2, #32]
 8001a10:	e00b      	b.n	8001a2a <HAL_RCC_OscConfig+0x36e>
 8001a12:	4b5b      	ldr	r3, [pc, #364]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	4a5a      	ldr	r2, [pc, #360]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	f023 0301 	bic.w	r3, r3, #1
 8001a1c:	6213      	str	r3, [r2, #32]
 8001a1e:	4b58      	ldr	r3, [pc, #352]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	4a57      	ldr	r2, [pc, #348]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	f023 0304 	bic.w	r3, r3, #4
 8001a28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d015      	beq.n	8001a5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a32:	f7ff fa9f 	bl	8000f74 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a38:	e00a      	b.n	8001a50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3a:	f7ff fa9b 	bl	8000f74 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e0b1      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a50:	4b4b      	ldr	r3, [pc, #300]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0ee      	beq.n	8001a3a <HAL_RCC_OscConfig+0x37e>
 8001a5c:	e014      	b.n	8001a88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5e:	f7ff fa89 	bl	8000f74 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a64:	e00a      	b.n	8001a7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a66:	f7ff fa85 	bl	8000f74 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e09b      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7c:	4b40      	ldr	r3, [pc, #256]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1ee      	bne.n	8001a66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a88:	7dfb      	ldrb	r3, [r7, #23]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d105      	bne.n	8001a9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	4a3b      	ldr	r2, [pc, #236]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 8087 	beq.w	8001bb2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa4:	4b36      	ldr	r3, [pc, #216]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d061      	beq.n	8001b74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d146      	bne.n	8001b46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab8:	4b33      	ldr	r3, [pc, #204]	@ (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abe:	f7ff fa59 	bl	8000f74 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac6:	f7ff fa55 	bl	8000f74 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e06d      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad8:	4b29      	ldr	r3, [pc, #164]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f0      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aec:	d108      	bne.n	8001b00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001aee:	4b24      	ldr	r3, [pc, #144]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	4921      	ldr	r1, [pc, #132]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b00:	4b1f      	ldr	r3, [pc, #124]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a19      	ldr	r1, [r3, #32]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b10:	430b      	orrs	r3, r1
 8001b12:	491b      	ldr	r1, [pc, #108]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b18:	4b1b      	ldr	r3, [pc, #108]	@ (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1e:	f7ff fa29 	bl	8000f74 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b26:	f7ff fa25 	bl	8000f74 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e03d      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b38:	4b11      	ldr	r3, [pc, #68]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0f0      	beq.n	8001b26 <HAL_RCC_OscConfig+0x46a>
 8001b44:	e035      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b46:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fa12 	bl	8000f74 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b54:	f7ff fa0e 	bl	8000f74 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e026      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b66:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x498>
 8001b72:	e01e      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d107      	bne.n	8001b8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e019      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40007000 	.word	0x40007000
 8001b88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <HAL_RCC_OscConfig+0x500>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d106      	bne.n	8001bae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d001      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40021000 	.word	0x40021000

08001bc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0d0      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b6a      	ldr	r3, [pc, #424]	@ (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d910      	bls.n	8001c04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b67      	ldr	r3, [pc, #412]	@ (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 0207 	bic.w	r2, r3, #7
 8001bea:	4965      	ldr	r1, [pc, #404]	@ (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf2:	4b63      	ldr	r3, [pc, #396]	@ (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0b8      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d020      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c1c:	4b59      	ldr	r3, [pc, #356]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	4a58      	ldr	r2, [pc, #352]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c34:	4b53      	ldr	r3, [pc, #332]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	4a52      	ldr	r2, [pc, #328]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c40:	4b50      	ldr	r3, [pc, #320]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	494d      	ldr	r1, [pc, #308]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d040      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d107      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c66:	4b47      	ldr	r3, [pc, #284]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d115      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e07f      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7e:	4b41      	ldr	r3, [pc, #260]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d109      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e073      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e06b      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c9e:	4b39      	ldr	r3, [pc, #228]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f023 0203 	bic.w	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	4936      	ldr	r1, [pc, #216]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cb0:	f7ff f960 	bl	8000f74 <HAL_GetTick>
 8001cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb6:	e00a      	b.n	8001cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb8:	f7ff f95c 	bl	8000f74 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e053      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cce:	4b2d      	ldr	r3, [pc, #180]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 020c 	and.w	r2, r3, #12
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d1eb      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b27      	ldr	r3, [pc, #156]	@ (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d210      	bcs.n	8001d10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b24      	ldr	r3, [pc, #144]	@ (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 0207 	bic.w	r2, r3, #7
 8001cf6:	4922      	ldr	r1, [pc, #136]	@ (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfe:	4b20      	ldr	r3, [pc, #128]	@ (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e032      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d008      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d1c:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	4916      	ldr	r1, [pc, #88]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d009      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d3a:	4b12      	ldr	r3, [pc, #72]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	490e      	ldr	r1, [pc, #56]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d4e:	f000 f821 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 8001d52:	4602      	mov	r2, r0
 8001d54:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	490a      	ldr	r1, [pc, #40]	@ (8001d88 <HAL_RCC_ClockConfig+0x1c8>)
 8001d60:	5ccb      	ldrb	r3, [r1, r3]
 8001d62:	fa22 f303 	lsr.w	r3, r2, r3
 8001d66:	4a09      	ldr	r2, [pc, #36]	@ (8001d8c <HAL_RCC_ClockConfig+0x1cc>)
 8001d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d6a:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <HAL_RCC_ClockConfig+0x1d0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff f8be 	bl	8000ef0 <HAL_InitTick>

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40022000 	.word	0x40022000
 8001d84:	40021000 	.word	0x40021000
 8001d88:	08004aac 	.word	0x08004aac
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	20000004 	.word	0x20000004

08001d94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	2300      	movs	r3, #0
 8001da8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dae:	4b1e      	ldr	r3, [pc, #120]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x94>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d002      	beq.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x30>
 8001dbe:	2b08      	cmp	r3, #8
 8001dc0:	d003      	beq.n	8001dca <HAL_RCC_GetSysClockFreq+0x36>
 8001dc2:	e027      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dc4:	4b19      	ldr	r3, [pc, #100]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x98>)
 8001dc6:	613b      	str	r3, [r7, #16]
      break;
 8001dc8:	e027      	b.n	8001e1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	0c9b      	lsrs	r3, r3, #18
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	4a17      	ldr	r2, [pc, #92]	@ (8001e30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dd4:	5cd3      	ldrb	r3, [r2, r3]
 8001dd6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d010      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001de2:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x94>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	0c5b      	lsrs	r3, r3, #17
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	4a11      	ldr	r2, [pc, #68]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dee:	5cd3      	ldrb	r3, [r2, r3]
 8001df0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x98>)
 8001df6:	fb03 f202 	mul.w	r2, r3, r2
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	e004      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a0c      	ldr	r2, [pc, #48]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e08:	fb02 f303 	mul.w	r3, r2, r3
 8001e0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	613b      	str	r3, [r7, #16]
      break;
 8001e12:	e002      	b.n	8001e1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e14:	4b05      	ldr	r3, [pc, #20]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e16:	613b      	str	r3, [r7, #16]
      break;
 8001e18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e1a:	693b      	ldr	r3, [r7, #16]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	371c      	adds	r7, #28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	007a1200 	.word	0x007a1200
 8001e30:	08004ac4 	.word	0x08004ac4
 8001e34:	08004ad4 	.word	0x08004ad4
 8001e38:	003d0900 	.word	0x003d0900

08001e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e40:	4b02      	ldr	r3, [pc, #8]	@ (8001e4c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr
 8001e4c:	20000000 	.word	0x20000000

08001e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e54:	f7ff fff2 	bl	8001e3c <HAL_RCC_GetHCLKFreq>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4b05      	ldr	r3, [pc, #20]	@ (8001e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	0a1b      	lsrs	r3, r3, #8
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	4903      	ldr	r1, [pc, #12]	@ (8001e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e66:	5ccb      	ldrb	r3, [r1, r3]
 8001e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000
 8001e74:	08004abc 	.word	0x08004abc

08001e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e7c:	f7ff ffde 	bl	8001e3c <HAL_RCC_GetHCLKFreq>
 8001e80:	4602      	mov	r2, r0
 8001e82:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	0adb      	lsrs	r3, r3, #11
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	4903      	ldr	r1, [pc, #12]	@ (8001e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e8e:	5ccb      	ldrb	r3, [r1, r3]
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	08004abc 	.word	0x08004abc

08001ea0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed4 <RCC_Delay+0x34>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed8 <RCC_Delay+0x38>)
 8001eae:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb2:	0a5b      	lsrs	r3, r3, #9
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	fb02 f303 	mul.w	r3, r2, r3
 8001eba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ebc:	bf00      	nop
  }
  while (Delay --);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1e5a      	subs	r2, r3, #1
 8001ec2:	60fa      	str	r2, [r7, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1f9      	bne.n	8001ebc <RCC_Delay+0x1c>
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	10624dd3 	.word	0x10624dd3

08001edc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e042      	b.n	8001f74 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d106      	bne.n	8001f08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7fe feac 	bl	8000c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2224      	movs	r2, #36	@ 0x24
 8001f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 fdf9 	bl	8002b18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	695a      	ldr	r2, [r3, #20]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2220      	movs	r2, #32
 8001f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	@ 0x28
 8001f80:	af02      	add	r7, sp, #8
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	d175      	bne.n	8002088 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <HAL_UART_Transmit+0x2c>
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e06e      	b.n	800208a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2221      	movs	r2, #33	@ 0x21
 8001fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fba:	f7fe ffdb 	bl	8000f74 <HAL_GetTick>
 8001fbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	88fa      	ldrh	r2, [r7, #6]
 8001fc4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	88fa      	ldrh	r2, [r7, #6]
 8001fca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fd4:	d108      	bne.n	8001fe8 <HAL_UART_Transmit+0x6c>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d104      	bne.n	8001fe8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	61bb      	str	r3, [r7, #24]
 8001fe6:	e003      	b.n	8001ff0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ff0:	e02e      	b.n	8002050 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2180      	movs	r1, #128	@ 0x80
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 fb97 	bl	8002730 <UART_WaitOnFlagUntilTimeout>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e03a      	b.n	800208a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10b      	bne.n	8002032 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002028:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	3302      	adds	r3, #2
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	e007      	b.n	8002042 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	781a      	ldrb	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	3301      	adds	r3, #1
 8002040:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002046:	b29b      	uxth	r3, r3
 8002048:	3b01      	subs	r3, #1
 800204a:	b29a      	uxth	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002054:	b29b      	uxth	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1cb      	bne.n	8001ff2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2200      	movs	r2, #0
 8002062:	2140      	movs	r1, #64	@ 0x40
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 fb63 	bl	8002730 <UART_WaitOnFlagUntilTimeout>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2220      	movs	r2, #32
 8002074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e006      	b.n	800208a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	e000      	b.n	800208a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002088:	2302      	movs	r3, #2
  }
}
 800208a:	4618      	mov	r0, r3
 800208c:	3720      	adds	r7, #32
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b08a      	sub	sp, #40	@ 0x28
 8002096:	af02      	add	r7, sp, #8
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	603b      	str	r3, [r7, #0]
 800209e:	4613      	mov	r3, r2
 80020a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b20      	cmp	r3, #32
 80020b0:	f040 8081 	bne.w	80021b6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d002      	beq.n	80020c0 <HAL_UART_Receive+0x2e>
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e079      	b.n	80021b8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2222      	movs	r2, #34	@ 0x22
 80020ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020d8:	f7fe ff4c 	bl	8000f74 <HAL_GetTick>
 80020dc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	88fa      	ldrh	r2, [r7, #6]
 80020e2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	88fa      	ldrh	r2, [r7, #6]
 80020e8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020f2:	d108      	bne.n	8002106 <HAL_UART_Receive+0x74>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d104      	bne.n	8002106 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	61bb      	str	r3, [r7, #24]
 8002104:	e003      	b.n	800210e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800210e:	e047      	b.n	80021a0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2200      	movs	r2, #0
 8002118:	2120      	movs	r1, #32
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 fb08 	bl	8002730 <UART_WaitOnFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d005      	beq.n	8002132 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2220      	movs	r2, #32
 800212a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e042      	b.n	80021b8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10c      	bne.n	8002152 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	b29b      	uxth	r3, r3
 8002140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002144:	b29a      	uxth	r2, r3
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	3302      	adds	r3, #2
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	e01f      	b.n	8002192 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800215a:	d007      	beq.n	800216c <HAL_UART_Receive+0xda>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10a      	bne.n	800217a <HAL_UART_Receive+0xe8>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d106      	bne.n	800217a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	b2da      	uxtb	r2, r3
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	701a      	strb	r2, [r3, #0]
 8002178:	e008      	b.n	800218c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002186:	b2da      	uxtb	r2, r3
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	3301      	adds	r3, #1
 8002190:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1b2      	bne.n	8002110 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2220      	movs	r2, #32
 80021ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	e000      	b.n	80021b8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80021b6:	2302      	movs	r3, #2
  }
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3720      	adds	r7, #32
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b0ba      	sub	sp, #232	@ 0xe8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80021fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10f      	bne.n	8002226 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800220a:	f003 0320 	and.w	r3, r3, #32
 800220e:	2b00      	cmp	r3, #0
 8002210:	d009      	beq.n	8002226 <HAL_UART_IRQHandler+0x66>
 8002212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002216:	f003 0320 	and.w	r3, r3, #32
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 fbbc 	bl	800299c <UART_Receive_IT>
      return;
 8002224:	e25b      	b.n	80026de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002226:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 80de 	beq.w	80023ec <HAL_UART_IRQHandler+0x22c>
 8002230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d106      	bne.n	800224a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800223c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002240:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80d1 	beq.w	80023ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800224a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00b      	beq.n	800226e <HAL_UART_IRQHandler+0xae>
 8002256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800225a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002266:	f043 0201 	orr.w	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800226e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00b      	beq.n	8002292 <HAL_UART_IRQHandler+0xd2>
 800227a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d005      	beq.n	8002292 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228a:	f043 0202 	orr.w	r2, r3, #2
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00b      	beq.n	80022b6 <HAL_UART_IRQHandler+0xf6>
 800229e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d005      	beq.n	80022b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ae:	f043 0204 	orr.w	r2, r3, #4
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80022b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d011      	beq.n	80022e6 <HAL_UART_IRQHandler+0x126>
 80022c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022c6:	f003 0320 	and.w	r3, r3, #32
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d105      	bne.n	80022da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d005      	beq.n	80022e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022de:	f043 0208 	orr.w	r2, r3, #8
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 81f2 	beq.w	80026d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_UART_IRQHandler+0x14e>
 80022fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002300:	f003 0320 	and.w	r3, r3, #32
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 fb47 	bl	800299c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002318:	2b00      	cmp	r3, #0
 800231a:	bf14      	ite	ne
 800231c:	2301      	movne	r3, #1
 800231e:	2300      	moveq	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b00      	cmp	r3, #0
 8002330:	d103      	bne.n	800233a <HAL_UART_IRQHandler+0x17a>
 8002332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002336:	2b00      	cmp	r3, #0
 8002338:	d04f      	beq.n	80023da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 fa51 	bl	80027e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800234a:	2b00      	cmp	r3, #0
 800234c:	d041      	beq.n	80023d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	3314      	adds	r3, #20
 8002354:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002358:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800235c:	e853 3f00 	ldrex	r3, [r3]
 8002360:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002364:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002368:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800236c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	3314      	adds	r3, #20
 8002376:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800237a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800237e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002382:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002386:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800238a:	e841 2300 	strex	r3, r2, [r1]
 800238e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002392:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1d9      	bne.n	800234e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d013      	beq.n	80023ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a6:	4a7e      	ldr	r2, [pc, #504]	@ (80025a0 <HAL_UART_IRQHandler+0x3e0>)
 80023a8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe ff56 	bl	8001260 <HAL_DMA_Abort_IT>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d016      	beq.n	80023e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023c4:	4610      	mov	r0, r2
 80023c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c8:	e00e      	b.n	80023e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f99c 	bl	8002708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023d0:	e00a      	b.n	80023e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f998 	bl	8002708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023d8:	e006      	b.n	80023e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f994 	bl	8002708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80023e6:	e175      	b.n	80026d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023e8:	bf00      	nop
    return;
 80023ea:	e173      	b.n	80026d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	f040 814f 	bne.w	8002694 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 8148 	beq.w	8002694 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 8141 	beq.w	8002694 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 80b6 	beq.w	80025a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002444:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 8145 	beq.w	80026d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002452:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002456:	429a      	cmp	r2, r3
 8002458:	f080 813e 	bcs.w	80026d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002462:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2b20      	cmp	r3, #32
 800246c:	f000 8088 	beq.w	8002580 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	330c      	adds	r3, #12
 8002476:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800247a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800247e:	e853 3f00 	ldrex	r3, [r3]
 8002482:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002486:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800248a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800248e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	330c      	adds	r3, #12
 8002498:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800249c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80024a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80024a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80024ac:	e841 2300 	strex	r3, r2, [r1]
 80024b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80024b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1d9      	bne.n	8002470 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	3314      	adds	r3, #20
 80024c2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024c6:	e853 3f00 	ldrex	r3, [r3]
 80024ca:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80024cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024ce:	f023 0301 	bic.w	r3, r3, #1
 80024d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	3314      	adds	r3, #20
 80024dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80024e0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80024e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80024e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80024ec:	e841 2300 	strex	r3, r2, [r1]
 80024f0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80024f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1e1      	bne.n	80024bc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	3314      	adds	r3, #20
 80024fe:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002500:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002502:	e853 3f00 	ldrex	r3, [r3]
 8002506:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002508:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800250a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800250e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	3314      	adds	r3, #20
 8002518:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800251c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800251e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002520:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002522:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002524:	e841 2300 	strex	r3, r2, [r1]
 8002528:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800252a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1e3      	bne.n	80024f8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2220      	movs	r2, #32
 8002534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	330c      	adds	r3, #12
 8002544:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002548:	e853 3f00 	ldrex	r3, [r3]
 800254c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800254e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002550:	f023 0310 	bic.w	r3, r3, #16
 8002554:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	330c      	adds	r3, #12
 800255e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002562:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002564:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002566:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002568:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800256a:	e841 2300 	strex	r3, r2, [r1]
 800256e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002570:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1e3      	bne.n	800253e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe fe35 	bl	80011ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800258e:	b29b      	uxth	r3, r3
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	b29b      	uxth	r3, r3
 8002594:	4619      	mov	r1, r3
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f8bf 	bl	800271a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800259c:	e09c      	b.n	80026d8 <HAL_UART_IRQHandler+0x518>
 800259e:	bf00      	nop
 80025a0:	080028a7 	.word	0x080028a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 808e 	beq.w	80026dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80025c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 8089 	beq.w	80026dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	330c      	adds	r3, #12
 80025d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d4:	e853 3f00 	ldrex	r3, [r3]
 80025d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80025da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80025e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	330c      	adds	r3, #12
 80025ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80025ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80025f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80025f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025f6:	e841 2300 	strex	r3, r2, [r1]
 80025fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80025fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1e3      	bne.n	80025ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	3314      	adds	r3, #20
 8002608:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260c:	e853 3f00 	ldrex	r3, [r3]
 8002610:	623b      	str	r3, [r7, #32]
   return(result);
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	f023 0301 	bic.w	r3, r3, #1
 8002618:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	3314      	adds	r3, #20
 8002622:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002626:	633a      	str	r2, [r7, #48]	@ 0x30
 8002628:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800262a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800262c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800262e:	e841 2300 	strex	r3, r2, [r1]
 8002632:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1e3      	bne.n	8002602 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	330c      	adds	r3, #12
 800264e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	e853 3f00 	ldrex	r3, [r3]
 8002656:	60fb      	str	r3, [r7, #12]
   return(result);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 0310 	bic.w	r3, r3, #16
 800265e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	330c      	adds	r3, #12
 8002668:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800266c:	61fa      	str	r2, [r7, #28]
 800266e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002670:	69b9      	ldr	r1, [r7, #24]
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	e841 2300 	strex	r3, r2, [r1]
 8002678:	617b      	str	r3, [r7, #20]
   return(result);
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1e3      	bne.n	8002648 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002686:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800268a:	4619      	mov	r1, r3
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f844 	bl	800271a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002692:	e023      	b.n	80026dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800269c:	2b00      	cmp	r3, #0
 800269e:	d009      	beq.n	80026b4 <HAL_UART_IRQHandler+0x4f4>
 80026a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f90e 	bl	80028ce <UART_Transmit_IT>
    return;
 80026b2:	e014      	b.n	80026de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00e      	beq.n	80026de <HAL_UART_IRQHandler+0x51e>
 80026c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f94d 	bl	800296c <UART_EndTransmit_IT>
    return;
 80026d2:	e004      	b.n	80026de <HAL_UART_IRQHandler+0x51e>
    return;
 80026d4:	bf00      	nop
 80026d6:	e002      	b.n	80026de <HAL_UART_IRQHandler+0x51e>
      return;
 80026d8:	bf00      	nop
 80026da:	e000      	b.n	80026de <HAL_UART_IRQHandler+0x51e>
      return;
 80026dc:	bf00      	nop
  }
}
 80026de:	37e8      	adds	r7, #232	@ 0xe8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr

080026f6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr

08002708 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	460b      	mov	r3, r1
 8002724:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	4613      	mov	r3, r2
 800273e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002740:	e03b      	b.n	80027ba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002748:	d037      	beq.n	80027ba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800274a:	f7fe fc13 	bl	8000f74 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	6a3a      	ldr	r2, [r7, #32]
 8002756:	429a      	cmp	r2, r3
 8002758:	d302      	bcc.n	8002760 <UART_WaitOnFlagUntilTimeout+0x30>
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e03a      	b.n	80027da <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b00      	cmp	r3, #0
 8002770:	d023      	beq.n	80027ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2b80      	cmp	r3, #128	@ 0x80
 8002776:	d020      	beq.n	80027ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2b40      	cmp	r3, #64	@ 0x40
 800277c:	d01d      	beq.n	80027ba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b08      	cmp	r3, #8
 800278a:	d116      	bne.n	80027ba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 f81d 	bl	80027e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2208      	movs	r2, #8
 80027ac:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e00f      	b.n	80027da <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	4013      	ands	r3, r2
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	bf0c      	ite	eq
 80027ca:	2301      	moveq	r3, #1
 80027cc:	2300      	movne	r3, #0
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	461a      	mov	r2, r3
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d0b4      	beq.n	8002742 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b095      	sub	sp, #84	@ 0x54
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	330c      	adds	r3, #12
 80027f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027f4:	e853 3f00 	ldrex	r3, [r3]
 80027f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80027fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002800:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	330c      	adds	r3, #12
 8002808:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800280a:	643a      	str	r2, [r7, #64]	@ 0x40
 800280c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800280e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002810:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002812:	e841 2300 	strex	r3, r2, [r1]
 8002816:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1e5      	bne.n	80027ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	3314      	adds	r3, #20
 8002824:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	e853 3f00 	ldrex	r3, [r3]
 800282c:	61fb      	str	r3, [r7, #28]
   return(result);
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f023 0301 	bic.w	r3, r3, #1
 8002834:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3314      	adds	r3, #20
 800283c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800283e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002840:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002842:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002844:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002846:	e841 2300 	strex	r3, r2, [r1]
 800284a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800284c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1e5      	bne.n	800281e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002856:	2b01      	cmp	r3, #1
 8002858:	d119      	bne.n	800288e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	330c      	adds	r3, #12
 8002860:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	e853 3f00 	ldrex	r3, [r3]
 8002868:	60bb      	str	r3, [r7, #8]
   return(result);
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f023 0310 	bic.w	r3, r3, #16
 8002870:	647b      	str	r3, [r7, #68]	@ 0x44
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	330c      	adds	r3, #12
 8002878:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800287a:	61ba      	str	r2, [r7, #24]
 800287c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287e:	6979      	ldr	r1, [r7, #20]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	e841 2300 	strex	r3, r2, [r1]
 8002886:	613b      	str	r3, [r7, #16]
   return(result);
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1e5      	bne.n	800285a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800289c:	bf00      	nop
 800289e:	3754      	adds	r7, #84	@ 0x54
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b084      	sub	sp, #16
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f7ff ff21 	bl	8002708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028c6:	bf00      	nop
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b085      	sub	sp, #20
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b21      	cmp	r3, #33	@ 0x21
 80028e0:	d13e      	bne.n	8002960 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028ea:	d114      	bne.n	8002916 <UART_Transmit_IT+0x48>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d110      	bne.n	8002916 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002908:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	1c9a      	adds	r2, r3, #2
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	621a      	str	r2, [r3, #32]
 8002914:	e008      	b.n	8002928 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	1c59      	adds	r1, r3, #1
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6211      	str	r1, [r2, #32]
 8002920:	781a      	ldrb	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29b      	uxth	r3, r3
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	4619      	mov	r1, r3
 8002936:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10f      	bne.n	800295c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800294a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800295a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	e000      	b.n	8002962 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002960:	2302      	movs	r3, #2
  }
}
 8002962:	4618      	mov	r0, r3
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002982:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff fea9 	bl	80026e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08c      	sub	sp, #48	@ 0x30
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b22      	cmp	r3, #34	@ 0x22
 80029ae:	f040 80ae 	bne.w	8002b0e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029ba:	d117      	bne.n	80029ec <UART_Receive_IT+0x50>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d113      	bne.n	80029ec <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029da:	b29a      	uxth	r2, r3
 80029dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e4:	1c9a      	adds	r2, r3, #2
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80029ea:	e026      	b.n	8002a3a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029fe:	d007      	beq.n	8002a10 <UART_Receive_IT+0x74>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10a      	bne.n	8002a1e <UART_Receive_IT+0x82>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d106      	bne.n	8002a1e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a1a:	701a      	strb	r2, [r3, #0]
 8002a1c:	e008      	b.n	8002a30 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a2e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a34:	1c5a      	adds	r2, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	4619      	mov	r1, r3
 8002a48:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d15d      	bne.n	8002b0a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0220 	bic.w	r2, r2, #32
 8002a5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695a      	ldr	r2, [r3, #20]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0201 	bic.w	r2, r2, #1
 8002a7c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d135      	bne.n	8002b00 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	330c      	adds	r3, #12
 8002aa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	e853 3f00 	ldrex	r3, [r3]
 8002aa8:	613b      	str	r3, [r7, #16]
   return(result);
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f023 0310 	bic.w	r3, r3, #16
 8002ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	330c      	adds	r3, #12
 8002ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aba:	623a      	str	r2, [r7, #32]
 8002abc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abe:	69f9      	ldr	r1, [r7, #28]
 8002ac0:	6a3a      	ldr	r2, [r7, #32]
 8002ac2:	e841 2300 	strex	r3, r2, [r1]
 8002ac6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1e5      	bne.n	8002a9a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b10      	cmp	r3, #16
 8002ada:	d10a      	bne.n	8002af2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002af6:	4619      	mov	r1, r3
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff fe0e 	bl	800271a <HAL_UARTEx_RxEventCallback>
 8002afe:	e002      	b.n	8002b06 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff fdf8 	bl	80026f6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	e002      	b.n	8002b10 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	e000      	b.n	8002b10 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002b0e:	2302      	movs	r3, #2
  }
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3730      	adds	r7, #48	@ 0x30
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002b52:	f023 030c 	bic.w	r3, r3, #12
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	68b9      	ldr	r1, [r7, #8]
 8002b5c:	430b      	orrs	r3, r1
 8002b5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699a      	ldr	r2, [r3, #24]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a2c      	ldr	r2, [pc, #176]	@ (8002c2c <UART_SetConfig+0x114>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d103      	bne.n	8002b88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b80:	f7ff f97a 	bl	8001e78 <HAL_RCC_GetPCLK2Freq>
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	e002      	b.n	8002b8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b88:	f7ff f962 	bl	8001e50 <HAL_RCC_GetPCLK1Freq>
 8002b8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	009a      	lsls	r2, r3, #2
 8002b98:	441a      	add	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba4:	4a22      	ldr	r2, [pc, #136]	@ (8002c30 <UART_SetConfig+0x118>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	0119      	lsls	r1, r3, #4
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009a      	lsls	r2, r3, #2
 8002bb8:	441a      	add	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c30 <UART_SetConfig+0x118>)
 8002bc6:	fba3 0302 	umull	r0, r3, r3, r2
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	2064      	movs	r0, #100	@ 0x64
 8002bce:	fb00 f303 	mul.w	r3, r0, r3
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	3332      	adds	r3, #50	@ 0x32
 8002bd8:	4a15      	ldr	r2, [pc, #84]	@ (8002c30 <UART_SetConfig+0x118>)
 8002bda:	fba2 2303 	umull	r2, r3, r2, r3
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002be4:	4419      	add	r1, r3
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	009a      	lsls	r2, r3, #2
 8002bf0:	441a      	add	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c30 <UART_SetConfig+0x118>)
 8002bfe:	fba3 0302 	umull	r0, r3, r3, r2
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	2064      	movs	r0, #100	@ 0x64
 8002c06:	fb00 f303 	mul.w	r3, r0, r3
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	3332      	adds	r3, #50	@ 0x32
 8002c10:	4a07      	ldr	r2, [pc, #28]	@ (8002c30 <UART_SetConfig+0x118>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	f003 020f 	and.w	r2, r3, #15
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	440a      	add	r2, r1
 8002c22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c24:	bf00      	nop
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40013800 	.word	0x40013800
 8002c30:	51eb851f 	.word	0x51eb851f

08002c34 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002c42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c46:	2b84      	cmp	r3, #132	@ 0x84
 8002c48:	d005      	beq.n	8002c56 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002c4a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4413      	add	r3, r2
 8002c52:	3303      	adds	r3, #3
 8002c54:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002c56:	68fb      	ldr	r3, [r7, #12]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002c66:	f000 fadf 	bl	8003228 <vTaskStartScheduler>
  
  return osOK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c72:	b089      	sub	sp, #36	@ 0x24
 8002c74:	af04      	add	r7, sp, #16
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d020      	beq.n	8002cc4 <osThreadCreate+0x54>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d01c      	beq.n	8002cc4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685c      	ldr	r4, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691e      	ldr	r6, [r3, #16]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff ffc9 	bl	8002c34 <makeFreeRtosPriority>
 8002ca2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002cac:	9202      	str	r2, [sp, #8]
 8002cae:	9301      	str	r3, [sp, #4]
 8002cb0:	9100      	str	r1, [sp, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	4632      	mov	r2, r6
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f000 f8e8 	bl	8002e8e <xTaskCreateStatic>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	e01c      	b.n	8002cfe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685c      	ldr	r4, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002cd0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff ffab 	bl	8002c34 <makeFreeRtosPriority>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	f107 030c 	add.w	r3, r7, #12
 8002ce4:	9301      	str	r3, [sp, #4]
 8002ce6:	9200      	str	r2, [sp, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	4632      	mov	r2, r6
 8002cec:	4629      	mov	r1, r5
 8002cee:	4620      	mov	r0, r4
 8002cf0:	f000 f92d 	bl	8002f4e <xTaskCreate>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d001      	beq.n	8002cfe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	e000      	b.n	8002d00 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d08 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <osDelay+0x16>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	e000      	b.n	8002d20 <osDelay+0x18>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 fa4b 	bl	80031bc <vTaskDelay>
  
  return osOK;
 8002d26:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f103 0208 	add.w	r2, r3, #8
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f04f 32ff 	mov.w	r2, #4294967295
 8002d48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f103 0208 	add.w	r2, r3, #8
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f103 0208 	add.w	r2, r3, #8
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr

08002d86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d86:	b480      	push	{r7}
 8002d88:	b085      	sub	sp, #20
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	601a      	str	r2, [r3, #0]
}
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de2:	d103      	bne.n	8002dec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	e00c      	b.n	8002e06 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3308      	adds	r3, #8
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	e002      	b.n	8002dfa <vListInsert+0x2e>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d2f6      	bcs.n	8002df4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	601a      	str	r2, [r3, #0]
}
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr

08002e3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6892      	ldr	r2, [r2, #8]
 8002e52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6852      	ldr	r2, [r2, #4]
 8002e5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d103      	bne.n	8002e70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	1e5a      	subs	r2, r3, #1
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b08e      	sub	sp, #56	@ 0x38
 8002e92:	af04      	add	r7, sp, #16
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
 8002e9a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10b      	bne.n	8002eba <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ea6:	f383 8811 	msr	BASEPRI, r3
 8002eaa:	f3bf 8f6f 	isb	sy
 8002eae:	f3bf 8f4f 	dsb	sy
 8002eb2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	e7fd      	b.n	8002eb6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10b      	bne.n	8002ed8 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec4:	f383 8811 	msr	BASEPRI, r3
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	61fb      	str	r3, [r7, #28]
}
 8002ed2:	bf00      	nop
 8002ed4:	bf00      	nop
 8002ed6:	e7fd      	b.n	8002ed4 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002ed8:	2354      	movs	r3, #84	@ 0x54
 8002eda:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	2b54      	cmp	r3, #84	@ 0x54
 8002ee0:	d00b      	beq.n	8002efa <xTaskCreateStatic+0x6c>
	__asm volatile
 8002ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	61bb      	str	r3, [r7, #24]
}
 8002ef4:	bf00      	nop
 8002ef6:	bf00      	nop
 8002ef8:	e7fd      	b.n	8002ef6 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002efa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d01e      	beq.n	8002f40 <xTaskCreateStatic+0xb2>
 8002f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01b      	beq.n	8002f40 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f0a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f10:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	2202      	movs	r2, #2
 8002f16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	9303      	str	r3, [sp, #12]
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f20:	9302      	str	r3, [sp, #8]
 8002f22:	f107 0314 	add.w	r3, r7, #20
 8002f26:	9301      	str	r3, [sp, #4]
 8002f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f850 	bl	8002fd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002f3a:	f000 f8d5 	bl	80030e8 <prvAddNewTaskToReadyList>
 8002f3e:	e001      	b.n	8002f44 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002f44:	697b      	ldr	r3, [r7, #20]
	}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3728      	adds	r7, #40	@ 0x28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b08c      	sub	sp, #48	@ 0x30
 8002f52:	af04      	add	r7, sp, #16
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	603b      	str	r3, [r7, #0]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fe94 	bl	8003c90 <pvPortMalloc>
 8002f68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00e      	beq.n	8002f8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f70:	2054      	movs	r0, #84	@ 0x54
 8002f72:	f000 fe8d 	bl	8003c90 <pvPortMalloc>
 8002f76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f84:	e005      	b.n	8002f92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002f86:	6978      	ldr	r0, [r7, #20]
 8002f88:	f000 ff50 	bl	8003e2c <vPortFree>
 8002f8c:	e001      	b.n	8002f92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d017      	beq.n	8002fc8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002fa0:	88fa      	ldrh	r2, [r7, #6]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	9303      	str	r3, [sp, #12]
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	9302      	str	r3, [sp, #8]
 8002faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fac:	9301      	str	r3, [sp, #4]
 8002fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 f80e 	bl	8002fd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fbc:	69f8      	ldr	r0, [r7, #28]
 8002fbe:	f000 f893 	bl	80030e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	61bb      	str	r3, [r7, #24]
 8002fc6:	e002      	b.n	8002fce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fcc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002fce:	69bb      	ldr	r3, [r7, #24]
	}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3720      	adds	r7, #32
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	f023 0307 	bic.w	r3, r3, #7
 8002ffe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00b      	beq.n	8003022 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800300a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800300e:	f383 8811 	msr	BASEPRI, r3
 8003012:	f3bf 8f6f 	isb	sy
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	617b      	str	r3, [r7, #20]
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	e7fd      	b.n	800301e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d01f      	beq.n	8003068 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003028:	2300      	movs	r3, #0
 800302a:	61fb      	str	r3, [r7, #28]
 800302c:	e012      	b.n	8003054 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	4413      	add	r3, r2
 8003034:	7819      	ldrb	r1, [r3, #0]
 8003036:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	4413      	add	r3, r2
 800303c:	3334      	adds	r3, #52	@ 0x34
 800303e:	460a      	mov	r2, r1
 8003040:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	4413      	add	r3, r2
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d006      	beq.n	800305c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3301      	adds	r3, #1
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	2b0f      	cmp	r3, #15
 8003058:	d9e9      	bls.n	800302e <prvInitialiseNewTask+0x56>
 800305a:	e000      	b.n	800305e <prvInitialiseNewTask+0x86>
			{
				break;
 800305c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800305e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003066:	e003      	b.n	8003070 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003072:	2b06      	cmp	r3, #6
 8003074:	d901      	bls.n	800307a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003076:	2306      	movs	r3, #6
 8003078:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800307a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800307e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003082:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003084:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003088:	2200      	movs	r2, #0
 800308a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800308c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800308e:	3304      	adds	r3, #4
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff fe6c 	bl	8002d6e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003098:	3318      	adds	r3, #24
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff fe67 	bl	8002d6e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80030a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a8:	f1c3 0207 	rsb	r2, r3, #7
 80030ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80030b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030b4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80030b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b8:	2200      	movs	r2, #0
 80030ba:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80030bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	68f9      	ldr	r1, [r7, #12]
 80030c8:	69b8      	ldr	r0, [r7, #24]
 80030ca:	f000 fc2b 	bl	8003924 <pxPortInitialiseStack>
 80030ce:	4602      	mov	r2, r0
 80030d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80030d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80030da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030e0:	bf00      	nop
 80030e2:	3720      	adds	r7, #32
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80030f0:	f000 fd0c 	bl	8003b0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80030f4:	4b2a      	ldr	r3, [pc, #168]	@ (80031a0 <prvAddNewTaskToReadyList+0xb8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	3301      	adds	r3, #1
 80030fa:	4a29      	ldr	r2, [pc, #164]	@ (80031a0 <prvAddNewTaskToReadyList+0xb8>)
 80030fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80030fe:	4b29      	ldr	r3, [pc, #164]	@ (80031a4 <prvAddNewTaskToReadyList+0xbc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003106:	4a27      	ldr	r2, [pc, #156]	@ (80031a4 <prvAddNewTaskToReadyList+0xbc>)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800310c:	4b24      	ldr	r3, [pc, #144]	@ (80031a0 <prvAddNewTaskToReadyList+0xb8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d110      	bne.n	8003136 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003114:	f000 fac4 	bl	80036a0 <prvInitialiseTaskLists>
 8003118:	e00d      	b.n	8003136 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800311a:	4b23      	ldr	r3, [pc, #140]	@ (80031a8 <prvAddNewTaskToReadyList+0xc0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d109      	bne.n	8003136 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003122:	4b20      	ldr	r3, [pc, #128]	@ (80031a4 <prvAddNewTaskToReadyList+0xbc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800312c:	429a      	cmp	r2, r3
 800312e:	d802      	bhi.n	8003136 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003130:	4a1c      	ldr	r2, [pc, #112]	@ (80031a4 <prvAddNewTaskToReadyList+0xbc>)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003136:	4b1d      	ldr	r3, [pc, #116]	@ (80031ac <prvAddNewTaskToReadyList+0xc4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	3301      	adds	r3, #1
 800313c:	4a1b      	ldr	r2, [pc, #108]	@ (80031ac <prvAddNewTaskToReadyList+0xc4>)
 800313e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003144:	2201      	movs	r2, #1
 8003146:	409a      	lsls	r2, r3
 8003148:	4b19      	ldr	r3, [pc, #100]	@ (80031b0 <prvAddNewTaskToReadyList+0xc8>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4313      	orrs	r3, r2
 800314e:	4a18      	ldr	r2, [pc, #96]	@ (80031b0 <prvAddNewTaskToReadyList+0xc8>)
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4a15      	ldr	r2, [pc, #84]	@ (80031b4 <prvAddNewTaskToReadyList+0xcc>)
 8003160:	441a      	add	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3304      	adds	r3, #4
 8003166:	4619      	mov	r1, r3
 8003168:	4610      	mov	r0, r2
 800316a:	f7ff fe0c 	bl	8002d86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800316e:	f000 fcfd 	bl	8003b6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003172:	4b0d      	ldr	r3, [pc, #52]	@ (80031a8 <prvAddNewTaskToReadyList+0xc0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00e      	beq.n	8003198 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800317a:	4b0a      	ldr	r3, [pc, #40]	@ (80031a4 <prvAddNewTaskToReadyList+0xbc>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003184:	429a      	cmp	r2, r3
 8003186:	d207      	bcs.n	8003198 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003188:	4b0b      	ldr	r3, [pc, #44]	@ (80031b8 <prvAddNewTaskToReadyList+0xd0>)
 800318a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	f3bf 8f4f 	dsb	sy
 8003194:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003198:	bf00      	nop
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	200004b0 	.word	0x200004b0
 80031a4:	200003b0 	.word	0x200003b0
 80031a8:	200004bc 	.word	0x200004bc
 80031ac:	200004cc 	.word	0x200004cc
 80031b0:	200004b8 	.word	0x200004b8
 80031b4:	200003b4 	.word	0x200003b4
 80031b8:	e000ed04 	.word	0xe000ed04

080031bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d018      	beq.n	8003200 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80031ce:	4b14      	ldr	r3, [pc, #80]	@ (8003220 <vTaskDelay+0x64>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00b      	beq.n	80031ee <vTaskDelay+0x32>
	__asm volatile
 80031d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031da:	f383 8811 	msr	BASEPRI, r3
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	60bb      	str	r3, [r7, #8]
}
 80031e8:	bf00      	nop
 80031ea:	bf00      	nop
 80031ec:	e7fd      	b.n	80031ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80031ee:	f000 f87d 	bl	80032ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80031f2:	2100      	movs	r1, #0
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 fb2f 	bl	8003858 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80031fa:	f000 f885 	bl	8003308 <xTaskResumeAll>
 80031fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d107      	bne.n	8003216 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003206:	4b07      	ldr	r3, [pc, #28]	@ (8003224 <vTaskDelay+0x68>)
 8003208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003216:	bf00      	nop
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	200004d8 	.word	0x200004d8
 8003224:	e000ed04 	.word	0xe000ed04

08003228 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08a      	sub	sp, #40	@ 0x28
 800322c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800322e:	2300      	movs	r3, #0
 8003230:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003232:	2300      	movs	r3, #0
 8003234:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003236:	463a      	mov	r2, r7
 8003238:	1d39      	adds	r1, r7, #4
 800323a:	f107 0308 	add.w	r3, r7, #8
 800323e:	4618      	mov	r0, r3
 8003240:	f7fd fb20 	bl	8000884 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003244:	6839      	ldr	r1, [r7, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	9202      	str	r2, [sp, #8]
 800324c:	9301      	str	r3, [sp, #4]
 800324e:	2300      	movs	r3, #0
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	2300      	movs	r3, #0
 8003254:	460a      	mov	r2, r1
 8003256:	491f      	ldr	r1, [pc, #124]	@ (80032d4 <vTaskStartScheduler+0xac>)
 8003258:	481f      	ldr	r0, [pc, #124]	@ (80032d8 <vTaskStartScheduler+0xb0>)
 800325a:	f7ff fe18 	bl	8002e8e <xTaskCreateStatic>
 800325e:	4603      	mov	r3, r0
 8003260:	4a1e      	ldr	r2, [pc, #120]	@ (80032dc <vTaskStartScheduler+0xb4>)
 8003262:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003264:	4b1d      	ldr	r3, [pc, #116]	@ (80032dc <vTaskStartScheduler+0xb4>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800326c:	2301      	movs	r3, #1
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	e001      	b.n	8003276 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d116      	bne.n	80032aa <vTaskStartScheduler+0x82>
	__asm volatile
 800327c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003280:	f383 8811 	msr	BASEPRI, r3
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	f3bf 8f4f 	dsb	sy
 800328c:	613b      	str	r3, [r7, #16]
}
 800328e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003290:	4b13      	ldr	r3, [pc, #76]	@ (80032e0 <vTaskStartScheduler+0xb8>)
 8003292:	f04f 32ff 	mov.w	r2, #4294967295
 8003296:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003298:	4b12      	ldr	r3, [pc, #72]	@ (80032e4 <vTaskStartScheduler+0xbc>)
 800329a:	2201      	movs	r2, #1
 800329c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800329e:	4b12      	ldr	r3, [pc, #72]	@ (80032e8 <vTaskStartScheduler+0xc0>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80032a4:	f000 fbc0 	bl	8003a28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80032a8:	e00f      	b.n	80032ca <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b0:	d10b      	bne.n	80032ca <vTaskStartScheduler+0xa2>
	__asm volatile
 80032b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	60fb      	str	r3, [r7, #12]
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop
 80032c8:	e7fd      	b.n	80032c6 <vTaskStartScheduler+0x9e>
}
 80032ca:	bf00      	nop
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	08004aa4 	.word	0x08004aa4
 80032d8:	08003671 	.word	0x08003671
 80032dc:	200004d4 	.word	0x200004d4
 80032e0:	200004d0 	.word	0x200004d0
 80032e4:	200004bc 	.word	0x200004bc
 80032e8:	200004b4 	.word	0x200004b4

080032ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80032f0:	4b04      	ldr	r3, [pc, #16]	@ (8003304 <vTaskSuspendAll+0x18>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3301      	adds	r3, #1
 80032f6:	4a03      	ldr	r2, [pc, #12]	@ (8003304 <vTaskSuspendAll+0x18>)
 80032f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80032fa:	bf00      	nop
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	200004d8 	.word	0x200004d8

08003308 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003312:	2300      	movs	r3, #0
 8003314:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003316:	4b42      	ldr	r3, [pc, #264]	@ (8003420 <xTaskResumeAll+0x118>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10b      	bne.n	8003336 <xTaskResumeAll+0x2e>
	__asm volatile
 800331e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	603b      	str	r3, [r7, #0]
}
 8003330:	bf00      	nop
 8003332:	bf00      	nop
 8003334:	e7fd      	b.n	8003332 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003336:	f000 fbe9 	bl	8003b0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800333a:	4b39      	ldr	r3, [pc, #228]	@ (8003420 <xTaskResumeAll+0x118>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	3b01      	subs	r3, #1
 8003340:	4a37      	ldr	r2, [pc, #220]	@ (8003420 <xTaskResumeAll+0x118>)
 8003342:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003344:	4b36      	ldr	r3, [pc, #216]	@ (8003420 <xTaskResumeAll+0x118>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d161      	bne.n	8003410 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800334c:	4b35      	ldr	r3, [pc, #212]	@ (8003424 <xTaskResumeAll+0x11c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d05d      	beq.n	8003410 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003354:	e02e      	b.n	80033b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003356:	4b34      	ldr	r3, [pc, #208]	@ (8003428 <xTaskResumeAll+0x120>)
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	3318      	adds	r3, #24
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff fd6a 	bl	8002e3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	3304      	adds	r3, #4
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff fd65 	bl	8002e3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003376:	2201      	movs	r2, #1
 8003378:	409a      	lsls	r2, r3
 800337a:	4b2c      	ldr	r3, [pc, #176]	@ (800342c <xTaskResumeAll+0x124>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4313      	orrs	r3, r2
 8003380:	4a2a      	ldr	r2, [pc, #168]	@ (800342c <xTaskResumeAll+0x124>)
 8003382:	6013      	str	r3, [r2, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4a27      	ldr	r2, [pc, #156]	@ (8003430 <xTaskResumeAll+0x128>)
 8003392:	441a      	add	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	3304      	adds	r3, #4
 8003398:	4619      	mov	r1, r3
 800339a:	4610      	mov	r0, r2
 800339c:	f7ff fcf3 	bl	8002d86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a4:	4b23      	ldr	r3, [pc, #140]	@ (8003434 <xTaskResumeAll+0x12c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d302      	bcc.n	80033b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80033ae:	4b22      	ldr	r3, [pc, #136]	@ (8003438 <xTaskResumeAll+0x130>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003428 <xTaskResumeAll+0x120>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1cc      	bne.n	8003356 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80033c2:	f000 fa0b 	bl	80037dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80033c6:	4b1d      	ldr	r3, [pc, #116]	@ (800343c <xTaskResumeAll+0x134>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d010      	beq.n	80033f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80033d2:	f000 f837 	bl	8003444 <xTaskIncrementTick>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80033dc:	4b16      	ldr	r3, [pc, #88]	@ (8003438 <xTaskResumeAll+0x130>)
 80033de:	2201      	movs	r2, #1
 80033e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3b01      	subs	r3, #1
 80033e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f1      	bne.n	80033d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80033ee:	4b13      	ldr	r3, [pc, #76]	@ (800343c <xTaskResumeAll+0x134>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80033f4:	4b10      	ldr	r3, [pc, #64]	@ (8003438 <xTaskResumeAll+0x130>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d009      	beq.n	8003410 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80033fc:	2301      	movs	r3, #1
 80033fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003400:	4b0f      	ldr	r3, [pc, #60]	@ (8003440 <xTaskResumeAll+0x138>)
 8003402:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003410:	f000 fbac 	bl	8003b6c <vPortExitCritical>

	return xAlreadyYielded;
 8003414:	68bb      	ldr	r3, [r7, #8]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	200004d8 	.word	0x200004d8
 8003424:	200004b0 	.word	0x200004b0
 8003428:	20000470 	.word	0x20000470
 800342c:	200004b8 	.word	0x200004b8
 8003430:	200003b4 	.word	0x200003b4
 8003434:	200003b0 	.word	0x200003b0
 8003438:	200004c4 	.word	0x200004c4
 800343c:	200004c0 	.word	0x200004c0
 8003440:	e000ed04 	.word	0xe000ed04

08003444 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800344e:	4b4f      	ldr	r3, [pc, #316]	@ (800358c <xTaskIncrementTick+0x148>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	f040 808f 	bne.w	8003576 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003458:	4b4d      	ldr	r3, [pc, #308]	@ (8003590 <xTaskIncrementTick+0x14c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3301      	adds	r3, #1
 800345e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003460:	4a4b      	ldr	r2, [pc, #300]	@ (8003590 <xTaskIncrementTick+0x14c>)
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d121      	bne.n	80034b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800346c:	4b49      	ldr	r3, [pc, #292]	@ (8003594 <xTaskIncrementTick+0x150>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800347a:	f383 8811 	msr	BASEPRI, r3
 800347e:	f3bf 8f6f 	isb	sy
 8003482:	f3bf 8f4f 	dsb	sy
 8003486:	603b      	str	r3, [r7, #0]
}
 8003488:	bf00      	nop
 800348a:	bf00      	nop
 800348c:	e7fd      	b.n	800348a <xTaskIncrementTick+0x46>
 800348e:	4b41      	ldr	r3, [pc, #260]	@ (8003594 <xTaskIncrementTick+0x150>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	4b40      	ldr	r3, [pc, #256]	@ (8003598 <xTaskIncrementTick+0x154>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a3e      	ldr	r2, [pc, #248]	@ (8003594 <xTaskIncrementTick+0x150>)
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	4a3e      	ldr	r2, [pc, #248]	@ (8003598 <xTaskIncrementTick+0x154>)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	4b3e      	ldr	r3, [pc, #248]	@ (800359c <xTaskIncrementTick+0x158>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	3301      	adds	r3, #1
 80034a8:	4a3c      	ldr	r2, [pc, #240]	@ (800359c <xTaskIncrementTick+0x158>)
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	f000 f996 	bl	80037dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80034b0:	4b3b      	ldr	r3, [pc, #236]	@ (80035a0 <xTaskIncrementTick+0x15c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d348      	bcc.n	800354c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034ba:	4b36      	ldr	r3, [pc, #216]	@ (8003594 <xTaskIncrementTick+0x150>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d104      	bne.n	80034ce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034c4:	4b36      	ldr	r3, [pc, #216]	@ (80035a0 <xTaskIncrementTick+0x15c>)
 80034c6:	f04f 32ff 	mov.w	r2, #4294967295
 80034ca:	601a      	str	r2, [r3, #0]
					break;
 80034cc:	e03e      	b.n	800354c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034ce:	4b31      	ldr	r3, [pc, #196]	@ (8003594 <xTaskIncrementTick+0x150>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d203      	bcs.n	80034ee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80034e6:	4a2e      	ldr	r2, [pc, #184]	@ (80035a0 <xTaskIncrementTick+0x15c>)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80034ec:	e02e      	b.n	800354c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	3304      	adds	r3, #4
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff fca2 	bl	8002e3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d004      	beq.n	800350a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	3318      	adds	r3, #24
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff fc99 	bl	8002e3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350e:	2201      	movs	r2, #1
 8003510:	409a      	lsls	r2, r3
 8003512:	4b24      	ldr	r3, [pc, #144]	@ (80035a4 <xTaskIncrementTick+0x160>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4313      	orrs	r3, r2
 8003518:	4a22      	ldr	r2, [pc, #136]	@ (80035a4 <xTaskIncrementTick+0x160>)
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4a1f      	ldr	r2, [pc, #124]	@ (80035a8 <xTaskIncrementTick+0x164>)
 800352a:	441a      	add	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	3304      	adds	r3, #4
 8003530:	4619      	mov	r1, r3
 8003532:	4610      	mov	r0, r2
 8003534:	f7ff fc27 	bl	8002d86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800353c:	4b1b      	ldr	r3, [pc, #108]	@ (80035ac <xTaskIncrementTick+0x168>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003542:	429a      	cmp	r2, r3
 8003544:	d3b9      	bcc.n	80034ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003546:	2301      	movs	r3, #1
 8003548:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800354a:	e7b6      	b.n	80034ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800354c:	4b17      	ldr	r3, [pc, #92]	@ (80035ac <xTaskIncrementTick+0x168>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003552:	4915      	ldr	r1, [pc, #84]	@ (80035a8 <xTaskIncrementTick+0x164>)
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d901      	bls.n	8003568 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003564:	2301      	movs	r3, #1
 8003566:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003568:	4b11      	ldr	r3, [pc, #68]	@ (80035b0 <xTaskIncrementTick+0x16c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d007      	beq.n	8003580 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003570:	2301      	movs	r3, #1
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	e004      	b.n	8003580 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003576:	4b0f      	ldr	r3, [pc, #60]	@ (80035b4 <xTaskIncrementTick+0x170>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	3301      	adds	r3, #1
 800357c:	4a0d      	ldr	r2, [pc, #52]	@ (80035b4 <xTaskIncrementTick+0x170>)
 800357e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003580:	697b      	ldr	r3, [r7, #20]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	200004d8 	.word	0x200004d8
 8003590:	200004b4 	.word	0x200004b4
 8003594:	20000468 	.word	0x20000468
 8003598:	2000046c 	.word	0x2000046c
 800359c:	200004c8 	.word	0x200004c8
 80035a0:	200004d0 	.word	0x200004d0
 80035a4:	200004b8 	.word	0x200004b8
 80035a8:	200003b4 	.word	0x200003b4
 80035ac:	200003b0 	.word	0x200003b0
 80035b0:	200004c4 	.word	0x200004c4
 80035b4:	200004c0 	.word	0x200004c0

080035b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80035be:	4b27      	ldr	r3, [pc, #156]	@ (800365c <vTaskSwitchContext+0xa4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80035c6:	4b26      	ldr	r3, [pc, #152]	@ (8003660 <vTaskSwitchContext+0xa8>)
 80035c8:	2201      	movs	r2, #1
 80035ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80035cc:	e040      	b.n	8003650 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80035ce:	4b24      	ldr	r3, [pc, #144]	@ (8003660 <vTaskSwitchContext+0xa8>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035d4:	4b23      	ldr	r3, [pc, #140]	@ (8003664 <vTaskSwitchContext+0xac>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	fab3 f383 	clz	r3, r3
 80035e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80035e2:	7afb      	ldrb	r3, [r7, #11]
 80035e4:	f1c3 031f 	rsb	r3, r3, #31
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	491f      	ldr	r1, [pc, #124]	@ (8003668 <vTaskSwitchContext+0xb0>)
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10b      	bne.n	8003616 <vTaskSwitchContext+0x5e>
	__asm volatile
 80035fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003602:	f383 8811 	msr	BASEPRI, r3
 8003606:	f3bf 8f6f 	isb	sy
 800360a:	f3bf 8f4f 	dsb	sy
 800360e:	607b      	str	r3, [r7, #4]
}
 8003610:	bf00      	nop
 8003612:	bf00      	nop
 8003614:	e7fd      	b.n	8003612 <vTaskSwitchContext+0x5a>
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4a11      	ldr	r2, [pc, #68]	@ (8003668 <vTaskSwitchContext+0xb0>)
 8003622:	4413      	add	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	605a      	str	r2, [r3, #4]
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	3308      	adds	r3, #8
 8003638:	429a      	cmp	r2, r3
 800363a:	d104      	bne.n	8003646 <vTaskSwitchContext+0x8e>
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	4a07      	ldr	r2, [pc, #28]	@ (800366c <vTaskSwitchContext+0xb4>)
 800364e:	6013      	str	r3, [r2, #0]
}
 8003650:	bf00      	nop
 8003652:	371c      	adds	r7, #28
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	200004d8 	.word	0x200004d8
 8003660:	200004c4 	.word	0x200004c4
 8003664:	200004b8 	.word	0x200004b8
 8003668:	200003b4 	.word	0x200003b4
 800366c:	200003b0 	.word	0x200003b0

08003670 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003678:	f000 f852 	bl	8003720 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800367c:	4b06      	ldr	r3, [pc, #24]	@ (8003698 <prvIdleTask+0x28>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d9f9      	bls.n	8003678 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003684:	4b05      	ldr	r3, [pc, #20]	@ (800369c <prvIdleTask+0x2c>)
 8003686:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003694:	e7f0      	b.n	8003678 <prvIdleTask+0x8>
 8003696:	bf00      	nop
 8003698:	200003b4 	.word	0x200003b4
 800369c:	e000ed04 	.word	0xe000ed04

080036a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036a6:	2300      	movs	r3, #0
 80036a8:	607b      	str	r3, [r7, #4]
 80036aa:	e00c      	b.n	80036c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4a12      	ldr	r2, [pc, #72]	@ (8003700 <prvInitialiseTaskLists+0x60>)
 80036b8:	4413      	add	r3, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fb38 	bl	8002d30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3301      	adds	r3, #1
 80036c4:	607b      	str	r3, [r7, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b06      	cmp	r3, #6
 80036ca:	d9ef      	bls.n	80036ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80036cc:	480d      	ldr	r0, [pc, #52]	@ (8003704 <prvInitialiseTaskLists+0x64>)
 80036ce:	f7ff fb2f 	bl	8002d30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80036d2:	480d      	ldr	r0, [pc, #52]	@ (8003708 <prvInitialiseTaskLists+0x68>)
 80036d4:	f7ff fb2c 	bl	8002d30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80036d8:	480c      	ldr	r0, [pc, #48]	@ (800370c <prvInitialiseTaskLists+0x6c>)
 80036da:	f7ff fb29 	bl	8002d30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80036de:	480c      	ldr	r0, [pc, #48]	@ (8003710 <prvInitialiseTaskLists+0x70>)
 80036e0:	f7ff fb26 	bl	8002d30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80036e4:	480b      	ldr	r0, [pc, #44]	@ (8003714 <prvInitialiseTaskLists+0x74>)
 80036e6:	f7ff fb23 	bl	8002d30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80036ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003718 <prvInitialiseTaskLists+0x78>)
 80036ec:	4a05      	ldr	r2, [pc, #20]	@ (8003704 <prvInitialiseTaskLists+0x64>)
 80036ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036f0:	4b0a      	ldr	r3, [pc, #40]	@ (800371c <prvInitialiseTaskLists+0x7c>)
 80036f2:	4a05      	ldr	r2, [pc, #20]	@ (8003708 <prvInitialiseTaskLists+0x68>)
 80036f4:	601a      	str	r2, [r3, #0]
}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	200003b4 	.word	0x200003b4
 8003704:	20000440 	.word	0x20000440
 8003708:	20000454 	.word	0x20000454
 800370c:	20000470 	.word	0x20000470
 8003710:	20000484 	.word	0x20000484
 8003714:	2000049c 	.word	0x2000049c
 8003718:	20000468 	.word	0x20000468
 800371c:	2000046c 	.word	0x2000046c

08003720 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003726:	e019      	b.n	800375c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003728:	f000 f9f0 	bl	8003b0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800372c:	4b10      	ldr	r3, [pc, #64]	@ (8003770 <prvCheckTasksWaitingTermination+0x50>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3304      	adds	r3, #4
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fb7f 	bl	8002e3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800373e:	4b0d      	ldr	r3, [pc, #52]	@ (8003774 <prvCheckTasksWaitingTermination+0x54>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3b01      	subs	r3, #1
 8003744:	4a0b      	ldr	r2, [pc, #44]	@ (8003774 <prvCheckTasksWaitingTermination+0x54>)
 8003746:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003748:	4b0b      	ldr	r3, [pc, #44]	@ (8003778 <prvCheckTasksWaitingTermination+0x58>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3b01      	subs	r3, #1
 800374e:	4a0a      	ldr	r2, [pc, #40]	@ (8003778 <prvCheckTasksWaitingTermination+0x58>)
 8003750:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003752:	f000 fa0b 	bl	8003b6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f810 	bl	800377c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800375c:	4b06      	ldr	r3, [pc, #24]	@ (8003778 <prvCheckTasksWaitingTermination+0x58>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1e1      	bne.n	8003728 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003764:	bf00      	nop
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	20000484 	.word	0x20000484
 8003774:	200004b0 	.word	0x200004b0
 8003778:	20000498 	.word	0x20000498

0800377c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800378a:	2b00      	cmp	r3, #0
 800378c:	d108      	bne.n	80037a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003792:	4618      	mov	r0, r3
 8003794:	f000 fb4a 	bl	8003e2c <vPortFree>
				vPortFree( pxTCB );
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 fb47 	bl	8003e2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800379e:	e019      	b.n	80037d4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d103      	bne.n	80037b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fb3e 	bl	8003e2c <vPortFree>
	}
 80037b0:	e010      	b.n	80037d4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d00b      	beq.n	80037d4 <prvDeleteTCB+0x58>
	__asm volatile
 80037bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c0:	f383 8811 	msr	BASEPRI, r3
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	60fb      	str	r3, [r7, #12]
}
 80037ce:	bf00      	nop
 80037d0:	bf00      	nop
 80037d2:	e7fd      	b.n	80037d0 <prvDeleteTCB+0x54>
	}
 80037d4:	bf00      	nop
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003814 <prvResetNextTaskUnblockTime+0x38>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d104      	bne.n	80037f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003818 <prvResetNextTaskUnblockTime+0x3c>)
 80037ee:	f04f 32ff 	mov.w	r2, #4294967295
 80037f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80037f4:	e008      	b.n	8003808 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037f6:	4b07      	ldr	r3, [pc, #28]	@ (8003814 <prvResetNextTaskUnblockTime+0x38>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4a04      	ldr	r2, [pc, #16]	@ (8003818 <prvResetNextTaskUnblockTime+0x3c>)
 8003806:	6013      	str	r3, [r2, #0]
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	20000468 	.word	0x20000468
 8003818:	200004d0 	.word	0x200004d0

0800381c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003822:	4b0b      	ldr	r3, [pc, #44]	@ (8003850 <xTaskGetSchedulerState+0x34>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d102      	bne.n	8003830 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800382a:	2301      	movs	r3, #1
 800382c:	607b      	str	r3, [r7, #4]
 800382e:	e008      	b.n	8003842 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003830:	4b08      	ldr	r3, [pc, #32]	@ (8003854 <xTaskGetSchedulerState+0x38>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d102      	bne.n	800383e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003838:	2302      	movs	r3, #2
 800383a:	607b      	str	r3, [r7, #4]
 800383c:	e001      	b.n	8003842 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800383e:	2300      	movs	r3, #0
 8003840:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003842:	687b      	ldr	r3, [r7, #4]
	}
 8003844:	4618      	mov	r0, r3
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	200004bc 	.word	0x200004bc
 8003854:	200004d8 	.word	0x200004d8

08003858 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003862:	4b29      	ldr	r3, [pc, #164]	@ (8003908 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003868:	4b28      	ldr	r3, [pc, #160]	@ (800390c <prvAddCurrentTaskToDelayedList+0xb4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3304      	adds	r3, #4
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff fae4 	bl	8002e3c <uxListRemove>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10b      	bne.n	8003892 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800387a:	4b24      	ldr	r3, [pc, #144]	@ (800390c <prvAddCurrentTaskToDelayedList+0xb4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003880:	2201      	movs	r2, #1
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43da      	mvns	r2, r3
 8003888:	4b21      	ldr	r3, [pc, #132]	@ (8003910 <prvAddCurrentTaskToDelayedList+0xb8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4013      	ands	r3, r2
 800388e:	4a20      	ldr	r2, [pc, #128]	@ (8003910 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003890:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003898:	d10a      	bne.n	80038b0 <prvAddCurrentTaskToDelayedList+0x58>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d007      	beq.n	80038b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038a0:	4b1a      	ldr	r3, [pc, #104]	@ (800390c <prvAddCurrentTaskToDelayedList+0xb4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3304      	adds	r3, #4
 80038a6:	4619      	mov	r1, r3
 80038a8:	481a      	ldr	r0, [pc, #104]	@ (8003914 <prvAddCurrentTaskToDelayedList+0xbc>)
 80038aa:	f7ff fa6c 	bl	8002d86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80038ae:	e026      	b.n	80038fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4413      	add	r3, r2
 80038b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038b8:	4b14      	ldr	r3, [pc, #80]	@ (800390c <prvAddCurrentTaskToDelayedList+0xb4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d209      	bcs.n	80038dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038c8:	4b13      	ldr	r3, [pc, #76]	@ (8003918 <prvAddCurrentTaskToDelayedList+0xc0>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	4b0f      	ldr	r3, [pc, #60]	@ (800390c <prvAddCurrentTaskToDelayedList+0xb4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3304      	adds	r3, #4
 80038d2:	4619      	mov	r1, r3
 80038d4:	4610      	mov	r0, r2
 80038d6:	f7ff fa79 	bl	8002dcc <vListInsert>
}
 80038da:	e010      	b.n	80038fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038dc:	4b0f      	ldr	r3, [pc, #60]	@ (800391c <prvAddCurrentTaskToDelayedList+0xc4>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4b0a      	ldr	r3, [pc, #40]	@ (800390c <prvAddCurrentTaskToDelayedList+0xb4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3304      	adds	r3, #4
 80038e6:	4619      	mov	r1, r3
 80038e8:	4610      	mov	r0, r2
 80038ea:	f7ff fa6f 	bl	8002dcc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80038ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003920 <prvAddCurrentTaskToDelayedList+0xc8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d202      	bcs.n	80038fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80038f8:	4a09      	ldr	r2, [pc, #36]	@ (8003920 <prvAddCurrentTaskToDelayedList+0xc8>)
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	6013      	str	r3, [r2, #0]
}
 80038fe:	bf00      	nop
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	200004b4 	.word	0x200004b4
 800390c:	200003b0 	.word	0x200003b0
 8003910:	200004b8 	.word	0x200004b8
 8003914:	2000049c 	.word	0x2000049c
 8003918:	2000046c 	.word	0x2000046c
 800391c:	20000468 	.word	0x20000468
 8003920:	200004d0 	.word	0x200004d0

08003924 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	3b04      	subs	r3, #4
 8003934:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800393c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	3b04      	subs	r3, #4
 8003942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f023 0201 	bic.w	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	3b04      	subs	r3, #4
 8003952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003954:	4a08      	ldr	r2, [pc, #32]	@ (8003978 <pxPortInitialiseStack+0x54>)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3b14      	subs	r3, #20
 800395e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	3b20      	subs	r3, #32
 800396a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800396c:	68fb      	ldr	r3, [r7, #12]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr
 8003978:	0800397d 	.word	0x0800397d

0800397c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003982:	2300      	movs	r3, #0
 8003984:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003986:	4b12      	ldr	r3, [pc, #72]	@ (80039d0 <prvTaskExitError+0x54>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398e:	d00b      	beq.n	80039a8 <prvTaskExitError+0x2c>
	__asm volatile
 8003990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003994:	f383 8811 	msr	BASEPRI, r3
 8003998:	f3bf 8f6f 	isb	sy
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	60fb      	str	r3, [r7, #12]
}
 80039a2:	bf00      	nop
 80039a4:	bf00      	nop
 80039a6:	e7fd      	b.n	80039a4 <prvTaskExitError+0x28>
	__asm volatile
 80039a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	60bb      	str	r3, [r7, #8]
}
 80039ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80039bc:	bf00      	nop
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0fc      	beq.n	80039be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr
 80039d0:	2000000c 	.word	0x2000000c
	...

080039e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80039e0:	4b07      	ldr	r3, [pc, #28]	@ (8003a00 <pxCurrentTCBConst2>)
 80039e2:	6819      	ldr	r1, [r3, #0]
 80039e4:	6808      	ldr	r0, [r1, #0]
 80039e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80039ea:	f380 8809 	msr	PSP, r0
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f04f 0000 	mov.w	r0, #0
 80039f6:	f380 8811 	msr	BASEPRI, r0
 80039fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80039fe:	4770      	bx	lr

08003a00 <pxCurrentTCBConst2>:
 8003a00:	200003b0 	.word	0x200003b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003a04:	bf00      	nop
 8003a06:	bf00      	nop

08003a08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003a08:	4806      	ldr	r0, [pc, #24]	@ (8003a24 <prvPortStartFirstTask+0x1c>)
 8003a0a:	6800      	ldr	r0, [r0, #0]
 8003a0c:	6800      	ldr	r0, [r0, #0]
 8003a0e:	f380 8808 	msr	MSP, r0
 8003a12:	b662      	cpsie	i
 8003a14:	b661      	cpsie	f
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	df00      	svc	0
 8003a20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003a22:	bf00      	nop
 8003a24:	e000ed08 	.word	0xe000ed08

08003a28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a2e:	4b32      	ldr	r3, [pc, #200]	@ (8003af8 <xPortStartScheduler+0xd0>)
 8003a30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	22ff      	movs	r2, #255	@ 0xff
 8003a3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	4b2a      	ldr	r3, [pc, #168]	@ (8003afc <xPortStartScheduler+0xd4>)
 8003a54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a56:	4b2a      	ldr	r3, [pc, #168]	@ (8003b00 <xPortStartScheduler+0xd8>)
 8003a58:	2207      	movs	r2, #7
 8003a5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a5c:	e009      	b.n	8003a72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003a5e:	4b28      	ldr	r3, [pc, #160]	@ (8003b00 <xPortStartScheduler+0xd8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	4a26      	ldr	r2, [pc, #152]	@ (8003b00 <xPortStartScheduler+0xd8>)
 8003a66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003a68:	78fb      	ldrb	r3, [r7, #3]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a72:	78fb      	ldrb	r3, [r7, #3]
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a7a:	2b80      	cmp	r3, #128	@ 0x80
 8003a7c:	d0ef      	beq.n	8003a5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a7e:	4b20      	ldr	r3, [pc, #128]	@ (8003b00 <xPortStartScheduler+0xd8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f1c3 0307 	rsb	r3, r3, #7
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d00b      	beq.n	8003aa2 <xPortStartScheduler+0x7a>
	__asm volatile
 8003a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a8e:	f383 8811 	msr	BASEPRI, r3
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	60bb      	str	r3, [r7, #8]
}
 8003a9c:	bf00      	nop
 8003a9e:	bf00      	nop
 8003aa0:	e7fd      	b.n	8003a9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003aa2:	4b17      	ldr	r3, [pc, #92]	@ (8003b00 <xPortStartScheduler+0xd8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	021b      	lsls	r3, r3, #8
 8003aa8:	4a15      	ldr	r2, [pc, #84]	@ (8003b00 <xPortStartScheduler+0xd8>)
 8003aaa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003aac:	4b14      	ldr	r3, [pc, #80]	@ (8003b00 <xPortStartScheduler+0xd8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ab4:	4a12      	ldr	r2, [pc, #72]	@ (8003b00 <xPortStartScheduler+0xd8>)
 8003ab6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003ac0:	4b10      	ldr	r3, [pc, #64]	@ (8003b04 <xPortStartScheduler+0xdc>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a0f      	ldr	r2, [pc, #60]	@ (8003b04 <xPortStartScheduler+0xdc>)
 8003ac6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003aca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003acc:	4b0d      	ldr	r3, [pc, #52]	@ (8003b04 <xPortStartScheduler+0xdc>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a0c      	ldr	r2, [pc, #48]	@ (8003b04 <xPortStartScheduler+0xdc>)
 8003ad2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003ad6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ad8:	f000 f8b8 	bl	8003c4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003adc:	4b0a      	ldr	r3, [pc, #40]	@ (8003b08 <xPortStartScheduler+0xe0>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ae2:	f7ff ff91 	bl	8003a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ae6:	f7ff fd67 	bl	80035b8 <vTaskSwitchContext>
	prvTaskExitError();
 8003aea:	f7ff ff47 	bl	800397c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	e000e400 	.word	0xe000e400
 8003afc:	200004dc 	.word	0x200004dc
 8003b00:	200004e0 	.word	0x200004e0
 8003b04:	e000ed20 	.word	0xe000ed20
 8003b08:	2000000c 	.word	0x2000000c

08003b0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
	__asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	607b      	str	r3, [r7, #4]
}
 8003b24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003b26:	4b0f      	ldr	r3, [pc, #60]	@ (8003b64 <vPortEnterCritical+0x58>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b64 <vPortEnterCritical+0x58>)
 8003b2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003b30:	4b0c      	ldr	r3, [pc, #48]	@ (8003b64 <vPortEnterCritical+0x58>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d110      	bne.n	8003b5a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b38:	4b0b      	ldr	r3, [pc, #44]	@ (8003b68 <vPortEnterCritical+0x5c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00b      	beq.n	8003b5a <vPortEnterCritical+0x4e>
	__asm volatile
 8003b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	603b      	str	r3, [r7, #0]
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	e7fd      	b.n	8003b56 <vPortEnterCritical+0x4a>
	}
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr
 8003b64:	2000000c 	.word	0x2000000c
 8003b68:	e000ed04 	.word	0xe000ed04

08003b6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003b72:	4b12      	ldr	r3, [pc, #72]	@ (8003bbc <vPortExitCritical+0x50>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10b      	bne.n	8003b92 <vPortExitCritical+0x26>
	__asm volatile
 8003b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	607b      	str	r3, [r7, #4]
}
 8003b8c:	bf00      	nop
 8003b8e:	bf00      	nop
 8003b90:	e7fd      	b.n	8003b8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003b92:	4b0a      	ldr	r3, [pc, #40]	@ (8003bbc <vPortExitCritical+0x50>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	4a08      	ldr	r2, [pc, #32]	@ (8003bbc <vPortExitCritical+0x50>)
 8003b9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b9c:	4b07      	ldr	r3, [pc, #28]	@ (8003bbc <vPortExitCritical+0x50>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d105      	bne.n	8003bb0 <vPortExitCritical+0x44>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003bae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	2000000c 	.word	0x2000000c

08003bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003bc0:	f3ef 8009 	mrs	r0, PSP
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8003c00 <pxCurrentTCBConst>)
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003bd0:	6010      	str	r0, [r2, #0]
 8003bd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003bd6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003bda:	f380 8811 	msr	BASEPRI, r0
 8003bde:	f7ff fceb 	bl	80035b8 <vTaskSwitchContext>
 8003be2:	f04f 0000 	mov.w	r0, #0
 8003be6:	f380 8811 	msr	BASEPRI, r0
 8003bea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003bee:	6819      	ldr	r1, [r3, #0]
 8003bf0:	6808      	ldr	r0, [r1, #0]
 8003bf2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003bf6:	f380 8809 	msr	PSP, r0
 8003bfa:	f3bf 8f6f 	isb	sy
 8003bfe:	4770      	bx	lr

08003c00 <pxCurrentTCBConst>:
 8003c00:	200003b0 	.word	0x200003b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop

08003c08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8003c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c12:	f383 8811 	msr	BASEPRI, r3
 8003c16:	f3bf 8f6f 	isb	sy
 8003c1a:	f3bf 8f4f 	dsb	sy
 8003c1e:	607b      	str	r3, [r7, #4]
}
 8003c20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003c22:	f7ff fc0f 	bl	8003444 <xTaskIncrementTick>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003c2c:	4b06      	ldr	r3, [pc, #24]	@ (8003c48 <xPortSysTickHandler+0x40>)
 8003c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	2300      	movs	r3, #0
 8003c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	f383 8811 	msr	BASEPRI, r3
}
 8003c3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003c40:	bf00      	nop
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	e000ed04 	.word	0xe000ed04

08003c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c50:	4b0a      	ldr	r3, [pc, #40]	@ (8003c7c <vPortSetupTimerInterrupt+0x30>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c56:	4b0a      	ldr	r3, [pc, #40]	@ (8003c80 <vPortSetupTimerInterrupt+0x34>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c5c:	4b09      	ldr	r3, [pc, #36]	@ (8003c84 <vPortSetupTimerInterrupt+0x38>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a09      	ldr	r2, [pc, #36]	@ (8003c88 <vPortSetupTimerInterrupt+0x3c>)
 8003c62:	fba2 2303 	umull	r2, r3, r2, r3
 8003c66:	099b      	lsrs	r3, r3, #6
 8003c68:	4a08      	ldr	r2, [pc, #32]	@ (8003c8c <vPortSetupTimerInterrupt+0x40>)
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c6e:	4b03      	ldr	r3, [pc, #12]	@ (8003c7c <vPortSetupTimerInterrupt+0x30>)
 8003c70:	2207      	movs	r2, #7
 8003c72:	601a      	str	r2, [r3, #0]
}
 8003c74:	bf00      	nop
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr
 8003c7c:	e000e010 	.word	0xe000e010
 8003c80:	e000e018 	.word	0xe000e018
 8003c84:	20000000 	.word	0x20000000
 8003c88:	10624dd3 	.word	0x10624dd3
 8003c8c:	e000e014 	.word	0xe000e014

08003c90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08a      	sub	sp, #40	@ 0x28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c9c:	f7ff fb26 	bl	80032ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003ca0:	4b5c      	ldr	r3, [pc, #368]	@ (8003e14 <pvPortMalloc+0x184>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003ca8:	f000 f924 	bl	8003ef4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003cac:	4b5a      	ldr	r3, [pc, #360]	@ (8003e18 <pvPortMalloc+0x188>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f040 8095 	bne.w	8003de4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01e      	beq.n	8003cfe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003cc0:	2208      	movs	r2, #8
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d015      	beq.n	8003cfe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f023 0307 	bic.w	r3, r3, #7
 8003cd8:	3308      	adds	r3, #8
 8003cda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <pvPortMalloc+0x6e>
	__asm volatile
 8003ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	617b      	str	r3, [r7, #20]
}
 8003cf8:	bf00      	nop
 8003cfa:	bf00      	nop
 8003cfc:	e7fd      	b.n	8003cfa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d06f      	beq.n	8003de4 <pvPortMalloc+0x154>
 8003d04:	4b45      	ldr	r3, [pc, #276]	@ (8003e1c <pvPortMalloc+0x18c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d86a      	bhi.n	8003de4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003d0e:	4b44      	ldr	r3, [pc, #272]	@ (8003e20 <pvPortMalloc+0x190>)
 8003d10:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003d12:	4b43      	ldr	r3, [pc, #268]	@ (8003e20 <pvPortMalloc+0x190>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d18:	e004      	b.n	8003d24 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d903      	bls.n	8003d36 <pvPortMalloc+0xa6>
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f1      	bne.n	8003d1a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003d36:	4b37      	ldr	r3, [pc, #220]	@ (8003e14 <pvPortMalloc+0x184>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d051      	beq.n	8003de4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2208      	movs	r2, #8
 8003d46:	4413      	add	r3, r2
 8003d48:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	1ad2      	subs	r2, r2, r3
 8003d5a:	2308      	movs	r3, #8
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d920      	bls.n	8003da4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4413      	add	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00b      	beq.n	8003d8c <pvPortMalloc+0xfc>
	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	613b      	str	r3, [r7, #16]
}
 8003d86:	bf00      	nop
 8003d88:	bf00      	nop
 8003d8a:	e7fd      	b.n	8003d88 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	1ad2      	subs	r2, r2, r3
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d9e:	69b8      	ldr	r0, [r7, #24]
 8003da0:	f000 f90a 	bl	8003fb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003da4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e1c <pvPortMalloc+0x18c>)
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	4a1b      	ldr	r2, [pc, #108]	@ (8003e1c <pvPortMalloc+0x18c>)
 8003db0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003db2:	4b1a      	ldr	r3, [pc, #104]	@ (8003e1c <pvPortMalloc+0x18c>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e24 <pvPortMalloc+0x194>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d203      	bcs.n	8003dc6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003dbe:	4b17      	ldr	r3, [pc, #92]	@ (8003e1c <pvPortMalloc+0x18c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a18      	ldr	r2, [pc, #96]	@ (8003e24 <pvPortMalloc+0x194>)
 8003dc4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	4b13      	ldr	r3, [pc, #76]	@ (8003e18 <pvPortMalloc+0x188>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003dda:	4b13      	ldr	r3, [pc, #76]	@ (8003e28 <pvPortMalloc+0x198>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3301      	adds	r3, #1
 8003de0:	4a11      	ldr	r2, [pc, #68]	@ (8003e28 <pvPortMalloc+0x198>)
 8003de2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003de4:	f7ff fa90 	bl	8003308 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00b      	beq.n	8003e0a <pvPortMalloc+0x17a>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	60fb      	str	r3, [r7, #12]
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop
 8003e08:	e7fd      	b.n	8003e06 <pvPortMalloc+0x176>
	return pvReturn;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3728      	adds	r7, #40	@ 0x28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	200010ec 	.word	0x200010ec
 8003e18:	20001100 	.word	0x20001100
 8003e1c:	200010f0 	.word	0x200010f0
 8003e20:	200010e4 	.word	0x200010e4
 8003e24:	200010f4 	.word	0x200010f4
 8003e28:	200010f8 	.word	0x200010f8

08003e2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d04f      	beq.n	8003ede <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003e3e:	2308      	movs	r3, #8
 8003e40:	425b      	negs	r3, r3
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4413      	add	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	4b25      	ldr	r3, [pc, #148]	@ (8003ee8 <vPortFree+0xbc>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4013      	ands	r3, r2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10b      	bne.n	8003e72 <vPortFree+0x46>
	__asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	60fb      	str	r3, [r7, #12]
}
 8003e6c:	bf00      	nop
 8003e6e:	bf00      	nop
 8003e70:	e7fd      	b.n	8003e6e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00b      	beq.n	8003e92 <vPortFree+0x66>
	__asm volatile
 8003e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	60bb      	str	r3, [r7, #8]
}
 8003e8c:	bf00      	nop
 8003e8e:	bf00      	nop
 8003e90:	e7fd      	b.n	8003e8e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	4b14      	ldr	r3, [pc, #80]	@ (8003ee8 <vPortFree+0xbc>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d01e      	beq.n	8003ede <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d11a      	bne.n	8003ede <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee8 <vPortFree+0xbc>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	401a      	ands	r2, r3
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003eb8:	f7ff fa18 	bl	80032ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8003eec <vPortFree+0xc0>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	4a09      	ldr	r2, [pc, #36]	@ (8003eec <vPortFree+0xc0>)
 8003ec8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003eca:	6938      	ldr	r0, [r7, #16]
 8003ecc:	f000 f874 	bl	8003fb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003ed0:	4b07      	ldr	r3, [pc, #28]	@ (8003ef0 <vPortFree+0xc4>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	4a06      	ldr	r2, [pc, #24]	@ (8003ef0 <vPortFree+0xc4>)
 8003ed8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003eda:	f7ff fa15 	bl	8003308 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003ede:	bf00      	nop
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20001100 	.word	0x20001100
 8003eec:	200010f0 	.word	0x200010f0
 8003ef0:	200010fc 	.word	0x200010fc

08003ef4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003efa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003efe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003f00:	4b27      	ldr	r3, [pc, #156]	@ (8003fa0 <prvHeapInit+0xac>)
 8003f02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00c      	beq.n	8003f28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3307      	adds	r3, #7
 8003f12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0307 	bic.w	r3, r3, #7
 8003f1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	4a1f      	ldr	r2, [pc, #124]	@ (8003fa0 <prvHeapInit+0xac>)
 8003f24:	4413      	add	r3, r2
 8003f26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003fa4 <prvHeapInit+0xb0>)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003f32:	4b1c      	ldr	r3, [pc, #112]	@ (8003fa4 <prvHeapInit+0xb0>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003f40:	2208      	movs	r2, #8
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0307 	bic.w	r3, r3, #7
 8003f4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4a15      	ldr	r2, [pc, #84]	@ (8003fa8 <prvHeapInit+0xb4>)
 8003f54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003f56:	4b14      	ldr	r3, [pc, #80]	@ (8003fa8 <prvHeapInit+0xb4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003f5e:	4b12      	ldr	r3, [pc, #72]	@ (8003fa8 <prvHeapInit+0xb4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	1ad2      	subs	r2, r2, r3
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f74:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa8 <prvHeapInit+0xb4>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	4a0a      	ldr	r2, [pc, #40]	@ (8003fac <prvHeapInit+0xb8>)
 8003f82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	4a09      	ldr	r2, [pc, #36]	@ (8003fb0 <prvHeapInit+0xbc>)
 8003f8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f8c:	4b09      	ldr	r3, [pc, #36]	@ (8003fb4 <prvHeapInit+0xc0>)
 8003f8e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003f92:	601a      	str	r2, [r3, #0]
}
 8003f94:	bf00      	nop
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	200004e4 	.word	0x200004e4
 8003fa4:	200010e4 	.word	0x200010e4
 8003fa8:	200010ec 	.word	0x200010ec
 8003fac:	200010f4 	.word	0x200010f4
 8003fb0:	200010f0 	.word	0x200010f0
 8003fb4:	20001100 	.word	0x20001100

08003fb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003fc0:	4b27      	ldr	r3, [pc, #156]	@ (8004060 <prvInsertBlockIntoFreeList+0xa8>)
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	e002      	b.n	8003fcc <prvInsertBlockIntoFreeList+0x14>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d8f7      	bhi.n	8003fc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d108      	bne.n	8003ffa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	441a      	add	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	441a      	add	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d118      	bne.n	8004040 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	4b14      	ldr	r3, [pc, #80]	@ (8004064 <prvInsertBlockIntoFreeList+0xac>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d00d      	beq.n	8004036 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	441a      	add	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	e008      	b.n	8004048 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004036:	4b0b      	ldr	r3, [pc, #44]	@ (8004064 <prvInsertBlockIntoFreeList+0xac>)
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	e003      	b.n	8004048 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	429a      	cmp	r2, r3
 800404e:	d002      	beq.n	8004056 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004056:	bf00      	nop
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr
 8004060:	200010e4 	.word	0x200010e4
 8004064:	200010ec 	.word	0x200010ec

08004068 <sniprintf>:
 8004068:	b40c      	push	{r2, r3}
 800406a:	b530      	push	{r4, r5, lr}
 800406c:	4b18      	ldr	r3, [pc, #96]	@ (80040d0 <sniprintf+0x68>)
 800406e:	1e0c      	subs	r4, r1, #0
 8004070:	681d      	ldr	r5, [r3, #0]
 8004072:	b09d      	sub	sp, #116	@ 0x74
 8004074:	da08      	bge.n	8004088 <sniprintf+0x20>
 8004076:	238b      	movs	r3, #139	@ 0x8b
 8004078:	f04f 30ff 	mov.w	r0, #4294967295
 800407c:	602b      	str	r3, [r5, #0]
 800407e:	b01d      	add	sp, #116	@ 0x74
 8004080:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004084:	b002      	add	sp, #8
 8004086:	4770      	bx	lr
 8004088:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800408c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004090:	f04f 0300 	mov.w	r3, #0
 8004094:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004096:	bf0c      	ite	eq
 8004098:	4623      	moveq	r3, r4
 800409a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800409e:	9304      	str	r3, [sp, #16]
 80040a0:	9307      	str	r3, [sp, #28]
 80040a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80040a6:	9002      	str	r0, [sp, #8]
 80040a8:	9006      	str	r0, [sp, #24]
 80040aa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80040ae:	4628      	mov	r0, r5
 80040b0:	ab21      	add	r3, sp, #132	@ 0x84
 80040b2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80040b4:	a902      	add	r1, sp, #8
 80040b6:	9301      	str	r3, [sp, #4]
 80040b8:	f000 f9a0 	bl	80043fc <_svfiprintf_r>
 80040bc:	1c43      	adds	r3, r0, #1
 80040be:	bfbc      	itt	lt
 80040c0:	238b      	movlt	r3, #139	@ 0x8b
 80040c2:	602b      	strlt	r3, [r5, #0]
 80040c4:	2c00      	cmp	r4, #0
 80040c6:	d0da      	beq.n	800407e <sniprintf+0x16>
 80040c8:	2200      	movs	r2, #0
 80040ca:	9b02      	ldr	r3, [sp, #8]
 80040cc:	701a      	strb	r2, [r3, #0]
 80040ce:	e7d6      	b.n	800407e <sniprintf+0x16>
 80040d0:	20000010 	.word	0x20000010

080040d4 <memset>:
 80040d4:	4603      	mov	r3, r0
 80040d6:	4402      	add	r2, r0
 80040d8:	4293      	cmp	r3, r2
 80040da:	d100      	bne.n	80040de <memset+0xa>
 80040dc:	4770      	bx	lr
 80040de:	f803 1b01 	strb.w	r1, [r3], #1
 80040e2:	e7f9      	b.n	80040d8 <memset+0x4>

080040e4 <__errno>:
 80040e4:	4b01      	ldr	r3, [pc, #4]	@ (80040ec <__errno+0x8>)
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	20000010 	.word	0x20000010

080040f0 <__libc_init_array>:
 80040f0:	b570      	push	{r4, r5, r6, lr}
 80040f2:	2600      	movs	r6, #0
 80040f4:	4d0c      	ldr	r5, [pc, #48]	@ (8004128 <__libc_init_array+0x38>)
 80040f6:	4c0d      	ldr	r4, [pc, #52]	@ (800412c <__libc_init_array+0x3c>)
 80040f8:	1b64      	subs	r4, r4, r5
 80040fa:	10a4      	asrs	r4, r4, #2
 80040fc:	42a6      	cmp	r6, r4
 80040fe:	d109      	bne.n	8004114 <__libc_init_array+0x24>
 8004100:	f000 fc76 	bl	80049f0 <_init>
 8004104:	2600      	movs	r6, #0
 8004106:	4d0a      	ldr	r5, [pc, #40]	@ (8004130 <__libc_init_array+0x40>)
 8004108:	4c0a      	ldr	r4, [pc, #40]	@ (8004134 <__libc_init_array+0x44>)
 800410a:	1b64      	subs	r4, r4, r5
 800410c:	10a4      	asrs	r4, r4, #2
 800410e:	42a6      	cmp	r6, r4
 8004110:	d105      	bne.n	800411e <__libc_init_array+0x2e>
 8004112:	bd70      	pop	{r4, r5, r6, pc}
 8004114:	f855 3b04 	ldr.w	r3, [r5], #4
 8004118:	4798      	blx	r3
 800411a:	3601      	adds	r6, #1
 800411c:	e7ee      	b.n	80040fc <__libc_init_array+0xc>
 800411e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004122:	4798      	blx	r3
 8004124:	3601      	adds	r6, #1
 8004126:	e7f2      	b.n	800410e <__libc_init_array+0x1e>
 8004128:	08004b14 	.word	0x08004b14
 800412c:	08004b14 	.word	0x08004b14
 8004130:	08004b14 	.word	0x08004b14
 8004134:	08004b18 	.word	0x08004b18

08004138 <__retarget_lock_acquire_recursive>:
 8004138:	4770      	bx	lr

0800413a <__retarget_lock_release_recursive>:
 800413a:	4770      	bx	lr

0800413c <memcpy>:
 800413c:	440a      	add	r2, r1
 800413e:	4291      	cmp	r1, r2
 8004140:	f100 33ff 	add.w	r3, r0, #4294967295
 8004144:	d100      	bne.n	8004148 <memcpy+0xc>
 8004146:	4770      	bx	lr
 8004148:	b510      	push	{r4, lr}
 800414a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800414e:	4291      	cmp	r1, r2
 8004150:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004154:	d1f9      	bne.n	800414a <memcpy+0xe>
 8004156:	bd10      	pop	{r4, pc}

08004158 <_free_r>:
 8004158:	b538      	push	{r3, r4, r5, lr}
 800415a:	4605      	mov	r5, r0
 800415c:	2900      	cmp	r1, #0
 800415e:	d040      	beq.n	80041e2 <_free_r+0x8a>
 8004160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004164:	1f0c      	subs	r4, r1, #4
 8004166:	2b00      	cmp	r3, #0
 8004168:	bfb8      	it	lt
 800416a:	18e4      	addlt	r4, r4, r3
 800416c:	f000 f8de 	bl	800432c <__malloc_lock>
 8004170:	4a1c      	ldr	r2, [pc, #112]	@ (80041e4 <_free_r+0x8c>)
 8004172:	6813      	ldr	r3, [r2, #0]
 8004174:	b933      	cbnz	r3, 8004184 <_free_r+0x2c>
 8004176:	6063      	str	r3, [r4, #4]
 8004178:	6014      	str	r4, [r2, #0]
 800417a:	4628      	mov	r0, r5
 800417c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004180:	f000 b8da 	b.w	8004338 <__malloc_unlock>
 8004184:	42a3      	cmp	r3, r4
 8004186:	d908      	bls.n	800419a <_free_r+0x42>
 8004188:	6820      	ldr	r0, [r4, #0]
 800418a:	1821      	adds	r1, r4, r0
 800418c:	428b      	cmp	r3, r1
 800418e:	bf01      	itttt	eq
 8004190:	6819      	ldreq	r1, [r3, #0]
 8004192:	685b      	ldreq	r3, [r3, #4]
 8004194:	1809      	addeq	r1, r1, r0
 8004196:	6021      	streq	r1, [r4, #0]
 8004198:	e7ed      	b.n	8004176 <_free_r+0x1e>
 800419a:	461a      	mov	r2, r3
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	b10b      	cbz	r3, 80041a4 <_free_r+0x4c>
 80041a0:	42a3      	cmp	r3, r4
 80041a2:	d9fa      	bls.n	800419a <_free_r+0x42>
 80041a4:	6811      	ldr	r1, [r2, #0]
 80041a6:	1850      	adds	r0, r2, r1
 80041a8:	42a0      	cmp	r0, r4
 80041aa:	d10b      	bne.n	80041c4 <_free_r+0x6c>
 80041ac:	6820      	ldr	r0, [r4, #0]
 80041ae:	4401      	add	r1, r0
 80041b0:	1850      	adds	r0, r2, r1
 80041b2:	4283      	cmp	r3, r0
 80041b4:	6011      	str	r1, [r2, #0]
 80041b6:	d1e0      	bne.n	800417a <_free_r+0x22>
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	4408      	add	r0, r1
 80041be:	6010      	str	r0, [r2, #0]
 80041c0:	6053      	str	r3, [r2, #4]
 80041c2:	e7da      	b.n	800417a <_free_r+0x22>
 80041c4:	d902      	bls.n	80041cc <_free_r+0x74>
 80041c6:	230c      	movs	r3, #12
 80041c8:	602b      	str	r3, [r5, #0]
 80041ca:	e7d6      	b.n	800417a <_free_r+0x22>
 80041cc:	6820      	ldr	r0, [r4, #0]
 80041ce:	1821      	adds	r1, r4, r0
 80041d0:	428b      	cmp	r3, r1
 80041d2:	bf01      	itttt	eq
 80041d4:	6819      	ldreq	r1, [r3, #0]
 80041d6:	685b      	ldreq	r3, [r3, #4]
 80041d8:	1809      	addeq	r1, r1, r0
 80041da:	6021      	streq	r1, [r4, #0]
 80041dc:	6063      	str	r3, [r4, #4]
 80041de:	6054      	str	r4, [r2, #4]
 80041e0:	e7cb      	b.n	800417a <_free_r+0x22>
 80041e2:	bd38      	pop	{r3, r4, r5, pc}
 80041e4:	20001248 	.word	0x20001248

080041e8 <sbrk_aligned>:
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	4e0f      	ldr	r6, [pc, #60]	@ (8004228 <sbrk_aligned+0x40>)
 80041ec:	460c      	mov	r4, r1
 80041ee:	6831      	ldr	r1, [r6, #0]
 80041f0:	4605      	mov	r5, r0
 80041f2:	b911      	cbnz	r1, 80041fa <sbrk_aligned+0x12>
 80041f4:	f000 fba8 	bl	8004948 <_sbrk_r>
 80041f8:	6030      	str	r0, [r6, #0]
 80041fa:	4621      	mov	r1, r4
 80041fc:	4628      	mov	r0, r5
 80041fe:	f000 fba3 	bl	8004948 <_sbrk_r>
 8004202:	1c43      	adds	r3, r0, #1
 8004204:	d103      	bne.n	800420e <sbrk_aligned+0x26>
 8004206:	f04f 34ff 	mov.w	r4, #4294967295
 800420a:	4620      	mov	r0, r4
 800420c:	bd70      	pop	{r4, r5, r6, pc}
 800420e:	1cc4      	adds	r4, r0, #3
 8004210:	f024 0403 	bic.w	r4, r4, #3
 8004214:	42a0      	cmp	r0, r4
 8004216:	d0f8      	beq.n	800420a <sbrk_aligned+0x22>
 8004218:	1a21      	subs	r1, r4, r0
 800421a:	4628      	mov	r0, r5
 800421c:	f000 fb94 	bl	8004948 <_sbrk_r>
 8004220:	3001      	adds	r0, #1
 8004222:	d1f2      	bne.n	800420a <sbrk_aligned+0x22>
 8004224:	e7ef      	b.n	8004206 <sbrk_aligned+0x1e>
 8004226:	bf00      	nop
 8004228:	20001244 	.word	0x20001244

0800422c <_malloc_r>:
 800422c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004230:	1ccd      	adds	r5, r1, #3
 8004232:	f025 0503 	bic.w	r5, r5, #3
 8004236:	3508      	adds	r5, #8
 8004238:	2d0c      	cmp	r5, #12
 800423a:	bf38      	it	cc
 800423c:	250c      	movcc	r5, #12
 800423e:	2d00      	cmp	r5, #0
 8004240:	4606      	mov	r6, r0
 8004242:	db01      	blt.n	8004248 <_malloc_r+0x1c>
 8004244:	42a9      	cmp	r1, r5
 8004246:	d904      	bls.n	8004252 <_malloc_r+0x26>
 8004248:	230c      	movs	r3, #12
 800424a:	6033      	str	r3, [r6, #0]
 800424c:	2000      	movs	r0, #0
 800424e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004252:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004328 <_malloc_r+0xfc>
 8004256:	f000 f869 	bl	800432c <__malloc_lock>
 800425a:	f8d8 3000 	ldr.w	r3, [r8]
 800425e:	461c      	mov	r4, r3
 8004260:	bb44      	cbnz	r4, 80042b4 <_malloc_r+0x88>
 8004262:	4629      	mov	r1, r5
 8004264:	4630      	mov	r0, r6
 8004266:	f7ff ffbf 	bl	80041e8 <sbrk_aligned>
 800426a:	1c43      	adds	r3, r0, #1
 800426c:	4604      	mov	r4, r0
 800426e:	d158      	bne.n	8004322 <_malloc_r+0xf6>
 8004270:	f8d8 4000 	ldr.w	r4, [r8]
 8004274:	4627      	mov	r7, r4
 8004276:	2f00      	cmp	r7, #0
 8004278:	d143      	bne.n	8004302 <_malloc_r+0xd6>
 800427a:	2c00      	cmp	r4, #0
 800427c:	d04b      	beq.n	8004316 <_malloc_r+0xea>
 800427e:	6823      	ldr	r3, [r4, #0]
 8004280:	4639      	mov	r1, r7
 8004282:	4630      	mov	r0, r6
 8004284:	eb04 0903 	add.w	r9, r4, r3
 8004288:	f000 fb5e 	bl	8004948 <_sbrk_r>
 800428c:	4581      	cmp	r9, r0
 800428e:	d142      	bne.n	8004316 <_malloc_r+0xea>
 8004290:	6821      	ldr	r1, [r4, #0]
 8004292:	4630      	mov	r0, r6
 8004294:	1a6d      	subs	r5, r5, r1
 8004296:	4629      	mov	r1, r5
 8004298:	f7ff ffa6 	bl	80041e8 <sbrk_aligned>
 800429c:	3001      	adds	r0, #1
 800429e:	d03a      	beq.n	8004316 <_malloc_r+0xea>
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	442b      	add	r3, r5
 80042a4:	6023      	str	r3, [r4, #0]
 80042a6:	f8d8 3000 	ldr.w	r3, [r8]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	bb62      	cbnz	r2, 8004308 <_malloc_r+0xdc>
 80042ae:	f8c8 7000 	str.w	r7, [r8]
 80042b2:	e00f      	b.n	80042d4 <_malloc_r+0xa8>
 80042b4:	6822      	ldr	r2, [r4, #0]
 80042b6:	1b52      	subs	r2, r2, r5
 80042b8:	d420      	bmi.n	80042fc <_malloc_r+0xd0>
 80042ba:	2a0b      	cmp	r2, #11
 80042bc:	d917      	bls.n	80042ee <_malloc_r+0xc2>
 80042be:	1961      	adds	r1, r4, r5
 80042c0:	42a3      	cmp	r3, r4
 80042c2:	6025      	str	r5, [r4, #0]
 80042c4:	bf18      	it	ne
 80042c6:	6059      	strne	r1, [r3, #4]
 80042c8:	6863      	ldr	r3, [r4, #4]
 80042ca:	bf08      	it	eq
 80042cc:	f8c8 1000 	streq.w	r1, [r8]
 80042d0:	5162      	str	r2, [r4, r5]
 80042d2:	604b      	str	r3, [r1, #4]
 80042d4:	4630      	mov	r0, r6
 80042d6:	f000 f82f 	bl	8004338 <__malloc_unlock>
 80042da:	f104 000b 	add.w	r0, r4, #11
 80042de:	1d23      	adds	r3, r4, #4
 80042e0:	f020 0007 	bic.w	r0, r0, #7
 80042e4:	1ac2      	subs	r2, r0, r3
 80042e6:	bf1c      	itt	ne
 80042e8:	1a1b      	subne	r3, r3, r0
 80042ea:	50a3      	strne	r3, [r4, r2]
 80042ec:	e7af      	b.n	800424e <_malloc_r+0x22>
 80042ee:	6862      	ldr	r2, [r4, #4]
 80042f0:	42a3      	cmp	r3, r4
 80042f2:	bf0c      	ite	eq
 80042f4:	f8c8 2000 	streq.w	r2, [r8]
 80042f8:	605a      	strne	r2, [r3, #4]
 80042fa:	e7eb      	b.n	80042d4 <_malloc_r+0xa8>
 80042fc:	4623      	mov	r3, r4
 80042fe:	6864      	ldr	r4, [r4, #4]
 8004300:	e7ae      	b.n	8004260 <_malloc_r+0x34>
 8004302:	463c      	mov	r4, r7
 8004304:	687f      	ldr	r7, [r7, #4]
 8004306:	e7b6      	b.n	8004276 <_malloc_r+0x4a>
 8004308:	461a      	mov	r2, r3
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	42a3      	cmp	r3, r4
 800430e:	d1fb      	bne.n	8004308 <_malloc_r+0xdc>
 8004310:	2300      	movs	r3, #0
 8004312:	6053      	str	r3, [r2, #4]
 8004314:	e7de      	b.n	80042d4 <_malloc_r+0xa8>
 8004316:	230c      	movs	r3, #12
 8004318:	4630      	mov	r0, r6
 800431a:	6033      	str	r3, [r6, #0]
 800431c:	f000 f80c 	bl	8004338 <__malloc_unlock>
 8004320:	e794      	b.n	800424c <_malloc_r+0x20>
 8004322:	6005      	str	r5, [r0, #0]
 8004324:	e7d6      	b.n	80042d4 <_malloc_r+0xa8>
 8004326:	bf00      	nop
 8004328:	20001248 	.word	0x20001248

0800432c <__malloc_lock>:
 800432c:	4801      	ldr	r0, [pc, #4]	@ (8004334 <__malloc_lock+0x8>)
 800432e:	f7ff bf03 	b.w	8004138 <__retarget_lock_acquire_recursive>
 8004332:	bf00      	nop
 8004334:	20001240 	.word	0x20001240

08004338 <__malloc_unlock>:
 8004338:	4801      	ldr	r0, [pc, #4]	@ (8004340 <__malloc_unlock+0x8>)
 800433a:	f7ff befe 	b.w	800413a <__retarget_lock_release_recursive>
 800433e:	bf00      	nop
 8004340:	20001240 	.word	0x20001240

08004344 <__ssputs_r>:
 8004344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004348:	461f      	mov	r7, r3
 800434a:	688e      	ldr	r6, [r1, #8]
 800434c:	4682      	mov	sl, r0
 800434e:	42be      	cmp	r6, r7
 8004350:	460c      	mov	r4, r1
 8004352:	4690      	mov	r8, r2
 8004354:	680b      	ldr	r3, [r1, #0]
 8004356:	d82d      	bhi.n	80043b4 <__ssputs_r+0x70>
 8004358:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800435c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004360:	d026      	beq.n	80043b0 <__ssputs_r+0x6c>
 8004362:	6965      	ldr	r5, [r4, #20]
 8004364:	6909      	ldr	r1, [r1, #16]
 8004366:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800436a:	eba3 0901 	sub.w	r9, r3, r1
 800436e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004372:	1c7b      	adds	r3, r7, #1
 8004374:	444b      	add	r3, r9
 8004376:	106d      	asrs	r5, r5, #1
 8004378:	429d      	cmp	r5, r3
 800437a:	bf38      	it	cc
 800437c:	461d      	movcc	r5, r3
 800437e:	0553      	lsls	r3, r2, #21
 8004380:	d527      	bpl.n	80043d2 <__ssputs_r+0x8e>
 8004382:	4629      	mov	r1, r5
 8004384:	f7ff ff52 	bl	800422c <_malloc_r>
 8004388:	4606      	mov	r6, r0
 800438a:	b360      	cbz	r0, 80043e6 <__ssputs_r+0xa2>
 800438c:	464a      	mov	r2, r9
 800438e:	6921      	ldr	r1, [r4, #16]
 8004390:	f7ff fed4 	bl	800413c <memcpy>
 8004394:	89a3      	ldrh	r3, [r4, #12]
 8004396:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800439a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800439e:	81a3      	strh	r3, [r4, #12]
 80043a0:	6126      	str	r6, [r4, #16]
 80043a2:	444e      	add	r6, r9
 80043a4:	6026      	str	r6, [r4, #0]
 80043a6:	463e      	mov	r6, r7
 80043a8:	6165      	str	r5, [r4, #20]
 80043aa:	eba5 0509 	sub.w	r5, r5, r9
 80043ae:	60a5      	str	r5, [r4, #8]
 80043b0:	42be      	cmp	r6, r7
 80043b2:	d900      	bls.n	80043b6 <__ssputs_r+0x72>
 80043b4:	463e      	mov	r6, r7
 80043b6:	4632      	mov	r2, r6
 80043b8:	4641      	mov	r1, r8
 80043ba:	6820      	ldr	r0, [r4, #0]
 80043bc:	f000 faaa 	bl	8004914 <memmove>
 80043c0:	2000      	movs	r0, #0
 80043c2:	68a3      	ldr	r3, [r4, #8]
 80043c4:	1b9b      	subs	r3, r3, r6
 80043c6:	60a3      	str	r3, [r4, #8]
 80043c8:	6823      	ldr	r3, [r4, #0]
 80043ca:	4433      	add	r3, r6
 80043cc:	6023      	str	r3, [r4, #0]
 80043ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d2:	462a      	mov	r2, r5
 80043d4:	f000 fad6 	bl	8004984 <_realloc_r>
 80043d8:	4606      	mov	r6, r0
 80043da:	2800      	cmp	r0, #0
 80043dc:	d1e0      	bne.n	80043a0 <__ssputs_r+0x5c>
 80043de:	4650      	mov	r0, sl
 80043e0:	6921      	ldr	r1, [r4, #16]
 80043e2:	f7ff feb9 	bl	8004158 <_free_r>
 80043e6:	230c      	movs	r3, #12
 80043e8:	f8ca 3000 	str.w	r3, [sl]
 80043ec:	89a3      	ldrh	r3, [r4, #12]
 80043ee:	f04f 30ff 	mov.w	r0, #4294967295
 80043f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043f6:	81a3      	strh	r3, [r4, #12]
 80043f8:	e7e9      	b.n	80043ce <__ssputs_r+0x8a>
	...

080043fc <_svfiprintf_r>:
 80043fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004400:	4698      	mov	r8, r3
 8004402:	898b      	ldrh	r3, [r1, #12]
 8004404:	4607      	mov	r7, r0
 8004406:	061b      	lsls	r3, r3, #24
 8004408:	460d      	mov	r5, r1
 800440a:	4614      	mov	r4, r2
 800440c:	b09d      	sub	sp, #116	@ 0x74
 800440e:	d510      	bpl.n	8004432 <_svfiprintf_r+0x36>
 8004410:	690b      	ldr	r3, [r1, #16]
 8004412:	b973      	cbnz	r3, 8004432 <_svfiprintf_r+0x36>
 8004414:	2140      	movs	r1, #64	@ 0x40
 8004416:	f7ff ff09 	bl	800422c <_malloc_r>
 800441a:	6028      	str	r0, [r5, #0]
 800441c:	6128      	str	r0, [r5, #16]
 800441e:	b930      	cbnz	r0, 800442e <_svfiprintf_r+0x32>
 8004420:	230c      	movs	r3, #12
 8004422:	603b      	str	r3, [r7, #0]
 8004424:	f04f 30ff 	mov.w	r0, #4294967295
 8004428:	b01d      	add	sp, #116	@ 0x74
 800442a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800442e:	2340      	movs	r3, #64	@ 0x40
 8004430:	616b      	str	r3, [r5, #20]
 8004432:	2300      	movs	r3, #0
 8004434:	9309      	str	r3, [sp, #36]	@ 0x24
 8004436:	2320      	movs	r3, #32
 8004438:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800443c:	2330      	movs	r3, #48	@ 0x30
 800443e:	f04f 0901 	mov.w	r9, #1
 8004442:	f8cd 800c 	str.w	r8, [sp, #12]
 8004446:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80045e0 <_svfiprintf_r+0x1e4>
 800444a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800444e:	4623      	mov	r3, r4
 8004450:	469a      	mov	sl, r3
 8004452:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004456:	b10a      	cbz	r2, 800445c <_svfiprintf_r+0x60>
 8004458:	2a25      	cmp	r2, #37	@ 0x25
 800445a:	d1f9      	bne.n	8004450 <_svfiprintf_r+0x54>
 800445c:	ebba 0b04 	subs.w	fp, sl, r4
 8004460:	d00b      	beq.n	800447a <_svfiprintf_r+0x7e>
 8004462:	465b      	mov	r3, fp
 8004464:	4622      	mov	r2, r4
 8004466:	4629      	mov	r1, r5
 8004468:	4638      	mov	r0, r7
 800446a:	f7ff ff6b 	bl	8004344 <__ssputs_r>
 800446e:	3001      	adds	r0, #1
 8004470:	f000 80a7 	beq.w	80045c2 <_svfiprintf_r+0x1c6>
 8004474:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004476:	445a      	add	r2, fp
 8004478:	9209      	str	r2, [sp, #36]	@ 0x24
 800447a:	f89a 3000 	ldrb.w	r3, [sl]
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 809f 	beq.w	80045c2 <_svfiprintf_r+0x1c6>
 8004484:	2300      	movs	r3, #0
 8004486:	f04f 32ff 	mov.w	r2, #4294967295
 800448a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800448e:	f10a 0a01 	add.w	sl, sl, #1
 8004492:	9304      	str	r3, [sp, #16]
 8004494:	9307      	str	r3, [sp, #28]
 8004496:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800449a:	931a      	str	r3, [sp, #104]	@ 0x68
 800449c:	4654      	mov	r4, sl
 800449e:	2205      	movs	r2, #5
 80044a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044a4:	484e      	ldr	r0, [pc, #312]	@ (80045e0 <_svfiprintf_r+0x1e4>)
 80044a6:	f000 fa5f 	bl	8004968 <memchr>
 80044aa:	9a04      	ldr	r2, [sp, #16]
 80044ac:	b9d8      	cbnz	r0, 80044e6 <_svfiprintf_r+0xea>
 80044ae:	06d0      	lsls	r0, r2, #27
 80044b0:	bf44      	itt	mi
 80044b2:	2320      	movmi	r3, #32
 80044b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044b8:	0711      	lsls	r1, r2, #28
 80044ba:	bf44      	itt	mi
 80044bc:	232b      	movmi	r3, #43	@ 0x2b
 80044be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044c2:	f89a 3000 	ldrb.w	r3, [sl]
 80044c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80044c8:	d015      	beq.n	80044f6 <_svfiprintf_r+0xfa>
 80044ca:	4654      	mov	r4, sl
 80044cc:	2000      	movs	r0, #0
 80044ce:	f04f 0c0a 	mov.w	ip, #10
 80044d2:	9a07      	ldr	r2, [sp, #28]
 80044d4:	4621      	mov	r1, r4
 80044d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044da:	3b30      	subs	r3, #48	@ 0x30
 80044dc:	2b09      	cmp	r3, #9
 80044de:	d94b      	bls.n	8004578 <_svfiprintf_r+0x17c>
 80044e0:	b1b0      	cbz	r0, 8004510 <_svfiprintf_r+0x114>
 80044e2:	9207      	str	r2, [sp, #28]
 80044e4:	e014      	b.n	8004510 <_svfiprintf_r+0x114>
 80044e6:	eba0 0308 	sub.w	r3, r0, r8
 80044ea:	fa09 f303 	lsl.w	r3, r9, r3
 80044ee:	4313      	orrs	r3, r2
 80044f0:	46a2      	mov	sl, r4
 80044f2:	9304      	str	r3, [sp, #16]
 80044f4:	e7d2      	b.n	800449c <_svfiprintf_r+0xa0>
 80044f6:	9b03      	ldr	r3, [sp, #12]
 80044f8:	1d19      	adds	r1, r3, #4
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	9103      	str	r1, [sp, #12]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	bfbb      	ittet	lt
 8004502:	425b      	neglt	r3, r3
 8004504:	f042 0202 	orrlt.w	r2, r2, #2
 8004508:	9307      	strge	r3, [sp, #28]
 800450a:	9307      	strlt	r3, [sp, #28]
 800450c:	bfb8      	it	lt
 800450e:	9204      	strlt	r2, [sp, #16]
 8004510:	7823      	ldrb	r3, [r4, #0]
 8004512:	2b2e      	cmp	r3, #46	@ 0x2e
 8004514:	d10a      	bne.n	800452c <_svfiprintf_r+0x130>
 8004516:	7863      	ldrb	r3, [r4, #1]
 8004518:	2b2a      	cmp	r3, #42	@ 0x2a
 800451a:	d132      	bne.n	8004582 <_svfiprintf_r+0x186>
 800451c:	9b03      	ldr	r3, [sp, #12]
 800451e:	3402      	adds	r4, #2
 8004520:	1d1a      	adds	r2, r3, #4
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	9203      	str	r2, [sp, #12]
 8004526:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800452a:	9305      	str	r3, [sp, #20]
 800452c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80045e4 <_svfiprintf_r+0x1e8>
 8004530:	2203      	movs	r2, #3
 8004532:	4650      	mov	r0, sl
 8004534:	7821      	ldrb	r1, [r4, #0]
 8004536:	f000 fa17 	bl	8004968 <memchr>
 800453a:	b138      	cbz	r0, 800454c <_svfiprintf_r+0x150>
 800453c:	2240      	movs	r2, #64	@ 0x40
 800453e:	9b04      	ldr	r3, [sp, #16]
 8004540:	eba0 000a 	sub.w	r0, r0, sl
 8004544:	4082      	lsls	r2, r0
 8004546:	4313      	orrs	r3, r2
 8004548:	3401      	adds	r4, #1
 800454a:	9304      	str	r3, [sp, #16]
 800454c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004550:	2206      	movs	r2, #6
 8004552:	4825      	ldr	r0, [pc, #148]	@ (80045e8 <_svfiprintf_r+0x1ec>)
 8004554:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004558:	f000 fa06 	bl	8004968 <memchr>
 800455c:	2800      	cmp	r0, #0
 800455e:	d036      	beq.n	80045ce <_svfiprintf_r+0x1d2>
 8004560:	4b22      	ldr	r3, [pc, #136]	@ (80045ec <_svfiprintf_r+0x1f0>)
 8004562:	bb1b      	cbnz	r3, 80045ac <_svfiprintf_r+0x1b0>
 8004564:	9b03      	ldr	r3, [sp, #12]
 8004566:	3307      	adds	r3, #7
 8004568:	f023 0307 	bic.w	r3, r3, #7
 800456c:	3308      	adds	r3, #8
 800456e:	9303      	str	r3, [sp, #12]
 8004570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004572:	4433      	add	r3, r6
 8004574:	9309      	str	r3, [sp, #36]	@ 0x24
 8004576:	e76a      	b.n	800444e <_svfiprintf_r+0x52>
 8004578:	460c      	mov	r4, r1
 800457a:	2001      	movs	r0, #1
 800457c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004580:	e7a8      	b.n	80044d4 <_svfiprintf_r+0xd8>
 8004582:	2300      	movs	r3, #0
 8004584:	f04f 0c0a 	mov.w	ip, #10
 8004588:	4619      	mov	r1, r3
 800458a:	3401      	adds	r4, #1
 800458c:	9305      	str	r3, [sp, #20]
 800458e:	4620      	mov	r0, r4
 8004590:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004594:	3a30      	subs	r2, #48	@ 0x30
 8004596:	2a09      	cmp	r2, #9
 8004598:	d903      	bls.n	80045a2 <_svfiprintf_r+0x1a6>
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0c6      	beq.n	800452c <_svfiprintf_r+0x130>
 800459e:	9105      	str	r1, [sp, #20]
 80045a0:	e7c4      	b.n	800452c <_svfiprintf_r+0x130>
 80045a2:	4604      	mov	r4, r0
 80045a4:	2301      	movs	r3, #1
 80045a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80045aa:	e7f0      	b.n	800458e <_svfiprintf_r+0x192>
 80045ac:	ab03      	add	r3, sp, #12
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	462a      	mov	r2, r5
 80045b2:	4638      	mov	r0, r7
 80045b4:	4b0e      	ldr	r3, [pc, #56]	@ (80045f0 <_svfiprintf_r+0x1f4>)
 80045b6:	a904      	add	r1, sp, #16
 80045b8:	f3af 8000 	nop.w
 80045bc:	1c42      	adds	r2, r0, #1
 80045be:	4606      	mov	r6, r0
 80045c0:	d1d6      	bne.n	8004570 <_svfiprintf_r+0x174>
 80045c2:	89ab      	ldrh	r3, [r5, #12]
 80045c4:	065b      	lsls	r3, r3, #25
 80045c6:	f53f af2d 	bmi.w	8004424 <_svfiprintf_r+0x28>
 80045ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045cc:	e72c      	b.n	8004428 <_svfiprintf_r+0x2c>
 80045ce:	ab03      	add	r3, sp, #12
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	462a      	mov	r2, r5
 80045d4:	4638      	mov	r0, r7
 80045d6:	4b06      	ldr	r3, [pc, #24]	@ (80045f0 <_svfiprintf_r+0x1f4>)
 80045d8:	a904      	add	r1, sp, #16
 80045da:	f000 f87d 	bl	80046d8 <_printf_i>
 80045de:	e7ed      	b.n	80045bc <_svfiprintf_r+0x1c0>
 80045e0:	08004ad6 	.word	0x08004ad6
 80045e4:	08004adc 	.word	0x08004adc
 80045e8:	08004ae0 	.word	0x08004ae0
 80045ec:	00000000 	.word	0x00000000
 80045f0:	08004345 	.word	0x08004345

080045f4 <_printf_common>:
 80045f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045f8:	4616      	mov	r6, r2
 80045fa:	4698      	mov	r8, r3
 80045fc:	688a      	ldr	r2, [r1, #8]
 80045fe:	690b      	ldr	r3, [r1, #16]
 8004600:	4607      	mov	r7, r0
 8004602:	4293      	cmp	r3, r2
 8004604:	bfb8      	it	lt
 8004606:	4613      	movlt	r3, r2
 8004608:	6033      	str	r3, [r6, #0]
 800460a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800460e:	460c      	mov	r4, r1
 8004610:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004614:	b10a      	cbz	r2, 800461a <_printf_common+0x26>
 8004616:	3301      	adds	r3, #1
 8004618:	6033      	str	r3, [r6, #0]
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	0699      	lsls	r1, r3, #26
 800461e:	bf42      	ittt	mi
 8004620:	6833      	ldrmi	r3, [r6, #0]
 8004622:	3302      	addmi	r3, #2
 8004624:	6033      	strmi	r3, [r6, #0]
 8004626:	6825      	ldr	r5, [r4, #0]
 8004628:	f015 0506 	ands.w	r5, r5, #6
 800462c:	d106      	bne.n	800463c <_printf_common+0x48>
 800462e:	f104 0a19 	add.w	sl, r4, #25
 8004632:	68e3      	ldr	r3, [r4, #12]
 8004634:	6832      	ldr	r2, [r6, #0]
 8004636:	1a9b      	subs	r3, r3, r2
 8004638:	42ab      	cmp	r3, r5
 800463a:	dc2b      	bgt.n	8004694 <_printf_common+0xa0>
 800463c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004640:	6822      	ldr	r2, [r4, #0]
 8004642:	3b00      	subs	r3, #0
 8004644:	bf18      	it	ne
 8004646:	2301      	movne	r3, #1
 8004648:	0692      	lsls	r2, r2, #26
 800464a:	d430      	bmi.n	80046ae <_printf_common+0xba>
 800464c:	4641      	mov	r1, r8
 800464e:	4638      	mov	r0, r7
 8004650:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004654:	47c8      	blx	r9
 8004656:	3001      	adds	r0, #1
 8004658:	d023      	beq.n	80046a2 <_printf_common+0xae>
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	6922      	ldr	r2, [r4, #16]
 800465e:	f003 0306 	and.w	r3, r3, #6
 8004662:	2b04      	cmp	r3, #4
 8004664:	bf14      	ite	ne
 8004666:	2500      	movne	r5, #0
 8004668:	6833      	ldreq	r3, [r6, #0]
 800466a:	f04f 0600 	mov.w	r6, #0
 800466e:	bf08      	it	eq
 8004670:	68e5      	ldreq	r5, [r4, #12]
 8004672:	f104 041a 	add.w	r4, r4, #26
 8004676:	bf08      	it	eq
 8004678:	1aed      	subeq	r5, r5, r3
 800467a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800467e:	bf08      	it	eq
 8004680:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004684:	4293      	cmp	r3, r2
 8004686:	bfc4      	itt	gt
 8004688:	1a9b      	subgt	r3, r3, r2
 800468a:	18ed      	addgt	r5, r5, r3
 800468c:	42b5      	cmp	r5, r6
 800468e:	d11a      	bne.n	80046c6 <_printf_common+0xd2>
 8004690:	2000      	movs	r0, #0
 8004692:	e008      	b.n	80046a6 <_printf_common+0xb2>
 8004694:	2301      	movs	r3, #1
 8004696:	4652      	mov	r2, sl
 8004698:	4641      	mov	r1, r8
 800469a:	4638      	mov	r0, r7
 800469c:	47c8      	blx	r9
 800469e:	3001      	adds	r0, #1
 80046a0:	d103      	bne.n	80046aa <_printf_common+0xb6>
 80046a2:	f04f 30ff 	mov.w	r0, #4294967295
 80046a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046aa:	3501      	adds	r5, #1
 80046ac:	e7c1      	b.n	8004632 <_printf_common+0x3e>
 80046ae:	2030      	movs	r0, #48	@ 0x30
 80046b0:	18e1      	adds	r1, r4, r3
 80046b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046bc:	4422      	add	r2, r4
 80046be:	3302      	adds	r3, #2
 80046c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046c4:	e7c2      	b.n	800464c <_printf_common+0x58>
 80046c6:	2301      	movs	r3, #1
 80046c8:	4622      	mov	r2, r4
 80046ca:	4641      	mov	r1, r8
 80046cc:	4638      	mov	r0, r7
 80046ce:	47c8      	blx	r9
 80046d0:	3001      	adds	r0, #1
 80046d2:	d0e6      	beq.n	80046a2 <_printf_common+0xae>
 80046d4:	3601      	adds	r6, #1
 80046d6:	e7d9      	b.n	800468c <_printf_common+0x98>

080046d8 <_printf_i>:
 80046d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046dc:	7e0f      	ldrb	r7, [r1, #24]
 80046de:	4691      	mov	r9, r2
 80046e0:	2f78      	cmp	r7, #120	@ 0x78
 80046e2:	4680      	mov	r8, r0
 80046e4:	460c      	mov	r4, r1
 80046e6:	469a      	mov	sl, r3
 80046e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046ee:	d807      	bhi.n	8004700 <_printf_i+0x28>
 80046f0:	2f62      	cmp	r7, #98	@ 0x62
 80046f2:	d80a      	bhi.n	800470a <_printf_i+0x32>
 80046f4:	2f00      	cmp	r7, #0
 80046f6:	f000 80d1 	beq.w	800489c <_printf_i+0x1c4>
 80046fa:	2f58      	cmp	r7, #88	@ 0x58
 80046fc:	f000 80b8 	beq.w	8004870 <_printf_i+0x198>
 8004700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004704:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004708:	e03a      	b.n	8004780 <_printf_i+0xa8>
 800470a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800470e:	2b15      	cmp	r3, #21
 8004710:	d8f6      	bhi.n	8004700 <_printf_i+0x28>
 8004712:	a101      	add	r1, pc, #4	@ (adr r1, 8004718 <_printf_i+0x40>)
 8004714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004718:	08004771 	.word	0x08004771
 800471c:	08004785 	.word	0x08004785
 8004720:	08004701 	.word	0x08004701
 8004724:	08004701 	.word	0x08004701
 8004728:	08004701 	.word	0x08004701
 800472c:	08004701 	.word	0x08004701
 8004730:	08004785 	.word	0x08004785
 8004734:	08004701 	.word	0x08004701
 8004738:	08004701 	.word	0x08004701
 800473c:	08004701 	.word	0x08004701
 8004740:	08004701 	.word	0x08004701
 8004744:	08004883 	.word	0x08004883
 8004748:	080047af 	.word	0x080047af
 800474c:	0800483d 	.word	0x0800483d
 8004750:	08004701 	.word	0x08004701
 8004754:	08004701 	.word	0x08004701
 8004758:	080048a5 	.word	0x080048a5
 800475c:	08004701 	.word	0x08004701
 8004760:	080047af 	.word	0x080047af
 8004764:	08004701 	.word	0x08004701
 8004768:	08004701 	.word	0x08004701
 800476c:	08004845 	.word	0x08004845
 8004770:	6833      	ldr	r3, [r6, #0]
 8004772:	1d1a      	adds	r2, r3, #4
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6032      	str	r2, [r6, #0]
 8004778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800477c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004780:	2301      	movs	r3, #1
 8004782:	e09c      	b.n	80048be <_printf_i+0x1e6>
 8004784:	6833      	ldr	r3, [r6, #0]
 8004786:	6820      	ldr	r0, [r4, #0]
 8004788:	1d19      	adds	r1, r3, #4
 800478a:	6031      	str	r1, [r6, #0]
 800478c:	0606      	lsls	r6, r0, #24
 800478e:	d501      	bpl.n	8004794 <_printf_i+0xbc>
 8004790:	681d      	ldr	r5, [r3, #0]
 8004792:	e003      	b.n	800479c <_printf_i+0xc4>
 8004794:	0645      	lsls	r5, r0, #25
 8004796:	d5fb      	bpl.n	8004790 <_printf_i+0xb8>
 8004798:	f9b3 5000 	ldrsh.w	r5, [r3]
 800479c:	2d00      	cmp	r5, #0
 800479e:	da03      	bge.n	80047a8 <_printf_i+0xd0>
 80047a0:	232d      	movs	r3, #45	@ 0x2d
 80047a2:	426d      	negs	r5, r5
 80047a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047a8:	230a      	movs	r3, #10
 80047aa:	4858      	ldr	r0, [pc, #352]	@ (800490c <_printf_i+0x234>)
 80047ac:	e011      	b.n	80047d2 <_printf_i+0xfa>
 80047ae:	6821      	ldr	r1, [r4, #0]
 80047b0:	6833      	ldr	r3, [r6, #0]
 80047b2:	0608      	lsls	r0, r1, #24
 80047b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80047b8:	d402      	bmi.n	80047c0 <_printf_i+0xe8>
 80047ba:	0649      	lsls	r1, r1, #25
 80047bc:	bf48      	it	mi
 80047be:	b2ad      	uxthmi	r5, r5
 80047c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80047c2:	6033      	str	r3, [r6, #0]
 80047c4:	bf14      	ite	ne
 80047c6:	230a      	movne	r3, #10
 80047c8:	2308      	moveq	r3, #8
 80047ca:	4850      	ldr	r0, [pc, #320]	@ (800490c <_printf_i+0x234>)
 80047cc:	2100      	movs	r1, #0
 80047ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047d2:	6866      	ldr	r6, [r4, #4]
 80047d4:	2e00      	cmp	r6, #0
 80047d6:	60a6      	str	r6, [r4, #8]
 80047d8:	db05      	blt.n	80047e6 <_printf_i+0x10e>
 80047da:	6821      	ldr	r1, [r4, #0]
 80047dc:	432e      	orrs	r6, r5
 80047de:	f021 0104 	bic.w	r1, r1, #4
 80047e2:	6021      	str	r1, [r4, #0]
 80047e4:	d04b      	beq.n	800487e <_printf_i+0x1a6>
 80047e6:	4616      	mov	r6, r2
 80047e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80047ec:	fb03 5711 	mls	r7, r3, r1, r5
 80047f0:	5dc7      	ldrb	r7, [r0, r7]
 80047f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047f6:	462f      	mov	r7, r5
 80047f8:	42bb      	cmp	r3, r7
 80047fa:	460d      	mov	r5, r1
 80047fc:	d9f4      	bls.n	80047e8 <_printf_i+0x110>
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d10b      	bne.n	800481a <_printf_i+0x142>
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	07df      	lsls	r7, r3, #31
 8004806:	d508      	bpl.n	800481a <_printf_i+0x142>
 8004808:	6923      	ldr	r3, [r4, #16]
 800480a:	6861      	ldr	r1, [r4, #4]
 800480c:	4299      	cmp	r1, r3
 800480e:	bfde      	ittt	le
 8004810:	2330      	movle	r3, #48	@ 0x30
 8004812:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004816:	f106 36ff 	addle.w	r6, r6, #4294967295
 800481a:	1b92      	subs	r2, r2, r6
 800481c:	6122      	str	r2, [r4, #16]
 800481e:	464b      	mov	r3, r9
 8004820:	4621      	mov	r1, r4
 8004822:	4640      	mov	r0, r8
 8004824:	f8cd a000 	str.w	sl, [sp]
 8004828:	aa03      	add	r2, sp, #12
 800482a:	f7ff fee3 	bl	80045f4 <_printf_common>
 800482e:	3001      	adds	r0, #1
 8004830:	d14a      	bne.n	80048c8 <_printf_i+0x1f0>
 8004832:	f04f 30ff 	mov.w	r0, #4294967295
 8004836:	b004      	add	sp, #16
 8004838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	f043 0320 	orr.w	r3, r3, #32
 8004842:	6023      	str	r3, [r4, #0]
 8004844:	2778      	movs	r7, #120	@ 0x78
 8004846:	4832      	ldr	r0, [pc, #200]	@ (8004910 <_printf_i+0x238>)
 8004848:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800484c:	6823      	ldr	r3, [r4, #0]
 800484e:	6831      	ldr	r1, [r6, #0]
 8004850:	061f      	lsls	r7, r3, #24
 8004852:	f851 5b04 	ldr.w	r5, [r1], #4
 8004856:	d402      	bmi.n	800485e <_printf_i+0x186>
 8004858:	065f      	lsls	r7, r3, #25
 800485a:	bf48      	it	mi
 800485c:	b2ad      	uxthmi	r5, r5
 800485e:	6031      	str	r1, [r6, #0]
 8004860:	07d9      	lsls	r1, r3, #31
 8004862:	bf44      	itt	mi
 8004864:	f043 0320 	orrmi.w	r3, r3, #32
 8004868:	6023      	strmi	r3, [r4, #0]
 800486a:	b11d      	cbz	r5, 8004874 <_printf_i+0x19c>
 800486c:	2310      	movs	r3, #16
 800486e:	e7ad      	b.n	80047cc <_printf_i+0xf4>
 8004870:	4826      	ldr	r0, [pc, #152]	@ (800490c <_printf_i+0x234>)
 8004872:	e7e9      	b.n	8004848 <_printf_i+0x170>
 8004874:	6823      	ldr	r3, [r4, #0]
 8004876:	f023 0320 	bic.w	r3, r3, #32
 800487a:	6023      	str	r3, [r4, #0]
 800487c:	e7f6      	b.n	800486c <_printf_i+0x194>
 800487e:	4616      	mov	r6, r2
 8004880:	e7bd      	b.n	80047fe <_printf_i+0x126>
 8004882:	6833      	ldr	r3, [r6, #0]
 8004884:	6825      	ldr	r5, [r4, #0]
 8004886:	1d18      	adds	r0, r3, #4
 8004888:	6961      	ldr	r1, [r4, #20]
 800488a:	6030      	str	r0, [r6, #0]
 800488c:	062e      	lsls	r6, r5, #24
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	d501      	bpl.n	8004896 <_printf_i+0x1be>
 8004892:	6019      	str	r1, [r3, #0]
 8004894:	e002      	b.n	800489c <_printf_i+0x1c4>
 8004896:	0668      	lsls	r0, r5, #25
 8004898:	d5fb      	bpl.n	8004892 <_printf_i+0x1ba>
 800489a:	8019      	strh	r1, [r3, #0]
 800489c:	2300      	movs	r3, #0
 800489e:	4616      	mov	r6, r2
 80048a0:	6123      	str	r3, [r4, #16]
 80048a2:	e7bc      	b.n	800481e <_printf_i+0x146>
 80048a4:	6833      	ldr	r3, [r6, #0]
 80048a6:	2100      	movs	r1, #0
 80048a8:	1d1a      	adds	r2, r3, #4
 80048aa:	6032      	str	r2, [r6, #0]
 80048ac:	681e      	ldr	r6, [r3, #0]
 80048ae:	6862      	ldr	r2, [r4, #4]
 80048b0:	4630      	mov	r0, r6
 80048b2:	f000 f859 	bl	8004968 <memchr>
 80048b6:	b108      	cbz	r0, 80048bc <_printf_i+0x1e4>
 80048b8:	1b80      	subs	r0, r0, r6
 80048ba:	6060      	str	r0, [r4, #4]
 80048bc:	6863      	ldr	r3, [r4, #4]
 80048be:	6123      	str	r3, [r4, #16]
 80048c0:	2300      	movs	r3, #0
 80048c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048c6:	e7aa      	b.n	800481e <_printf_i+0x146>
 80048c8:	4632      	mov	r2, r6
 80048ca:	4649      	mov	r1, r9
 80048cc:	4640      	mov	r0, r8
 80048ce:	6923      	ldr	r3, [r4, #16]
 80048d0:	47d0      	blx	sl
 80048d2:	3001      	adds	r0, #1
 80048d4:	d0ad      	beq.n	8004832 <_printf_i+0x15a>
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	079b      	lsls	r3, r3, #30
 80048da:	d413      	bmi.n	8004904 <_printf_i+0x22c>
 80048dc:	68e0      	ldr	r0, [r4, #12]
 80048de:	9b03      	ldr	r3, [sp, #12]
 80048e0:	4298      	cmp	r0, r3
 80048e2:	bfb8      	it	lt
 80048e4:	4618      	movlt	r0, r3
 80048e6:	e7a6      	b.n	8004836 <_printf_i+0x15e>
 80048e8:	2301      	movs	r3, #1
 80048ea:	4632      	mov	r2, r6
 80048ec:	4649      	mov	r1, r9
 80048ee:	4640      	mov	r0, r8
 80048f0:	47d0      	blx	sl
 80048f2:	3001      	adds	r0, #1
 80048f4:	d09d      	beq.n	8004832 <_printf_i+0x15a>
 80048f6:	3501      	adds	r5, #1
 80048f8:	68e3      	ldr	r3, [r4, #12]
 80048fa:	9903      	ldr	r1, [sp, #12]
 80048fc:	1a5b      	subs	r3, r3, r1
 80048fe:	42ab      	cmp	r3, r5
 8004900:	dcf2      	bgt.n	80048e8 <_printf_i+0x210>
 8004902:	e7eb      	b.n	80048dc <_printf_i+0x204>
 8004904:	2500      	movs	r5, #0
 8004906:	f104 0619 	add.w	r6, r4, #25
 800490a:	e7f5      	b.n	80048f8 <_printf_i+0x220>
 800490c:	08004ae7 	.word	0x08004ae7
 8004910:	08004af8 	.word	0x08004af8

08004914 <memmove>:
 8004914:	4288      	cmp	r0, r1
 8004916:	b510      	push	{r4, lr}
 8004918:	eb01 0402 	add.w	r4, r1, r2
 800491c:	d902      	bls.n	8004924 <memmove+0x10>
 800491e:	4284      	cmp	r4, r0
 8004920:	4623      	mov	r3, r4
 8004922:	d807      	bhi.n	8004934 <memmove+0x20>
 8004924:	1e43      	subs	r3, r0, #1
 8004926:	42a1      	cmp	r1, r4
 8004928:	d008      	beq.n	800493c <memmove+0x28>
 800492a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800492e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004932:	e7f8      	b.n	8004926 <memmove+0x12>
 8004934:	4601      	mov	r1, r0
 8004936:	4402      	add	r2, r0
 8004938:	428a      	cmp	r2, r1
 800493a:	d100      	bne.n	800493e <memmove+0x2a>
 800493c:	bd10      	pop	{r4, pc}
 800493e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004942:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004946:	e7f7      	b.n	8004938 <memmove+0x24>

08004948 <_sbrk_r>:
 8004948:	b538      	push	{r3, r4, r5, lr}
 800494a:	2300      	movs	r3, #0
 800494c:	4d05      	ldr	r5, [pc, #20]	@ (8004964 <_sbrk_r+0x1c>)
 800494e:	4604      	mov	r4, r0
 8004950:	4608      	mov	r0, r1
 8004952:	602b      	str	r3, [r5, #0]
 8004954:	f7fc fa54 	bl	8000e00 <_sbrk>
 8004958:	1c43      	adds	r3, r0, #1
 800495a:	d102      	bne.n	8004962 <_sbrk_r+0x1a>
 800495c:	682b      	ldr	r3, [r5, #0]
 800495e:	b103      	cbz	r3, 8004962 <_sbrk_r+0x1a>
 8004960:	6023      	str	r3, [r4, #0]
 8004962:	bd38      	pop	{r3, r4, r5, pc}
 8004964:	2000123c 	.word	0x2000123c

08004968 <memchr>:
 8004968:	4603      	mov	r3, r0
 800496a:	b510      	push	{r4, lr}
 800496c:	b2c9      	uxtb	r1, r1
 800496e:	4402      	add	r2, r0
 8004970:	4293      	cmp	r3, r2
 8004972:	4618      	mov	r0, r3
 8004974:	d101      	bne.n	800497a <memchr+0x12>
 8004976:	2000      	movs	r0, #0
 8004978:	e003      	b.n	8004982 <memchr+0x1a>
 800497a:	7804      	ldrb	r4, [r0, #0]
 800497c:	3301      	adds	r3, #1
 800497e:	428c      	cmp	r4, r1
 8004980:	d1f6      	bne.n	8004970 <memchr+0x8>
 8004982:	bd10      	pop	{r4, pc}

08004984 <_realloc_r>:
 8004984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004988:	4607      	mov	r7, r0
 800498a:	4614      	mov	r4, r2
 800498c:	460d      	mov	r5, r1
 800498e:	b921      	cbnz	r1, 800499a <_realloc_r+0x16>
 8004990:	4611      	mov	r1, r2
 8004992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004996:	f7ff bc49 	b.w	800422c <_malloc_r>
 800499a:	b92a      	cbnz	r2, 80049a8 <_realloc_r+0x24>
 800499c:	f7ff fbdc 	bl	8004158 <_free_r>
 80049a0:	4625      	mov	r5, r4
 80049a2:	4628      	mov	r0, r5
 80049a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049a8:	f000 f81a 	bl	80049e0 <_malloc_usable_size_r>
 80049ac:	4284      	cmp	r4, r0
 80049ae:	4606      	mov	r6, r0
 80049b0:	d802      	bhi.n	80049b8 <_realloc_r+0x34>
 80049b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80049b6:	d8f4      	bhi.n	80049a2 <_realloc_r+0x1e>
 80049b8:	4621      	mov	r1, r4
 80049ba:	4638      	mov	r0, r7
 80049bc:	f7ff fc36 	bl	800422c <_malloc_r>
 80049c0:	4680      	mov	r8, r0
 80049c2:	b908      	cbnz	r0, 80049c8 <_realloc_r+0x44>
 80049c4:	4645      	mov	r5, r8
 80049c6:	e7ec      	b.n	80049a2 <_realloc_r+0x1e>
 80049c8:	42b4      	cmp	r4, r6
 80049ca:	4622      	mov	r2, r4
 80049cc:	4629      	mov	r1, r5
 80049ce:	bf28      	it	cs
 80049d0:	4632      	movcs	r2, r6
 80049d2:	f7ff fbb3 	bl	800413c <memcpy>
 80049d6:	4629      	mov	r1, r5
 80049d8:	4638      	mov	r0, r7
 80049da:	f7ff fbbd 	bl	8004158 <_free_r>
 80049de:	e7f1      	b.n	80049c4 <_realloc_r+0x40>

080049e0 <_malloc_usable_size_r>:
 80049e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049e4:	1f18      	subs	r0, r3, #4
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	bfbc      	itt	lt
 80049ea:	580b      	ldrlt	r3, [r1, r0]
 80049ec:	18c0      	addlt	r0, r0, r3
 80049ee:	4770      	bx	lr

080049f0 <_init>:
 80049f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f2:	bf00      	nop
 80049f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049f6:	bc08      	pop	{r3}
 80049f8:	469e      	mov	lr, r3
 80049fa:	4770      	bx	lr

080049fc <_fini>:
 80049fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fe:	bf00      	nop
 8004a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a02:	bc08      	pop	{r3}
 8004a04:	469e      	mov	lr, r3
 8004a06:	4770      	bx	lr
